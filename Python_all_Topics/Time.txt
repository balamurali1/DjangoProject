
print(2 - False) #False=0
print(2 - True)  #True = 1

output
------
2
1


time Module in Python
=======================
Following modules are used to work with date,time and duration.
1.time
2.datetime

Epoch
-----
The epoch is the point where the time starts, and is platform dependent.
This point is taken as the January 1st of the current year, 00:00:00. For Unix, the
epoch is january 1st 1970,00:00:00(UTC)

UTC
----
UTC is coordinated Universal Time(Formerly known as Greenwhich Mean Time, or GMT).
The acronym UTC is not a mistake but a compromise between English and French.

DST
----
DST is Daylight saving Time,an adjustment of the timezone by(usually)
one hour during part of the year.DST rules are magic(determined by local law) and can change
from year to year	

Time Modules
--------------
1.time()Function
----------------
This function return the time in seconds since the epoch as a floating point number.
The specific date of the epoch and  the handling of leap seconds is platform dependent

ctime() Function
------------------
This function is used to get current date and time.When we pass epoch  time in seconds to
the function it returns corresponding date and time in string format. when we do not pass
epoch time,it returns current date and time in string format.

localtime()Function
------------------------
This function is used to convert seconds into date and time.It returns an object'struct_time'
which can be used to access the attributes either using an index or using a name.

Index          Attribute                      value
0		tm_year				4digit year number e.g 2019
1		tm_mon				Range[1,12]
2		tm_mday				Range[1,31]
3		tm_hour				Range[0,23]
4		tm_min				Range[0,59]
5		tm_sec				Range[0,61],including leap seconds
6		tm_wday				Range[0,6],Monday is 0
7		tm_yday				Range[1,366]
8 		tm_isdst			[0,1 or -1],0 = no DST,1 = DST is in effect,-1=not known
		tm_zone				Timezone name
		Tm_gmtoff			Offset east of UTC in seconds

EX:

from time import time,ctime, localtime
epoch = time()
print(epoch)
print('------------------')

et = ctime(epoch)
print(et)
print('-------------')
print(ctime())

output
-------
1625067163.921268
------------------
Wed Jun 30 21:02:43 2021
-------------
Wed Jun 30 21:02:43 2021


EX:
from time import time,ctime, localtime
stobj = localtime()
print(stobj)

output
------
time.struct_time(tm_year=2021, tm_mon=6, tm_mday=30, tm_hour=21, tm_min=4, 
tm_sec=43, tm_wday=2, tm_yday=181, tm_isdst=0)

EX:
from time import time,ctime, localtime
stobj = localtime()
print(stobj)
print()
print('Year:',stobj.tm_year)
print('Month:',stobj.tm_mon)
print('Date:',stobj.tm_mday)
print('Hour:',stobj.tm_hour)
print('Minute:',stobj.tm_min)
print('Second:',stobj.tm_sec)

output
-------
Year: 2021
Month: 6
Date: 30
Hour: 21
Minute: 10
Second: 43

EX:
from time import time,ctime, localtime
stobj = localtime()
print(stobj.tm_year, end='/')
print(stobj.tm_mon, end = '/')
print(stobj.tm_mday)

output
------
2021/6/30

EX:
from time import time,ctime, localtime
stobj = localtime()

print(stobj.tm_hour, end=':')
print(stobj.tm_min, end = ':')
print(stobj.tm_sec)

output
------
21:18:33


datetime Class in Python
========================

	datetime Module
	---------------
	
datetime - It handles date and time.it has year,month.day,hour,minute,second,microsecond and tzinfo
attributes

date - It handle dates of gregorian calendar,without taking time zone into consideratio.It has
year,month and day attributes.

time-It handle time assuming that every day has exactly 24 x 60 x 60 seconds.It has hour,minute,second,
microsecond and tzinfo attributes.

timedelta - It handle duration.The duration may be the difference between two date,time or datetime instance.


datetime class
-------------
datetime object - A datetime object is a single object containing all the information from a date
object and a time object


Creating Object of datetime Class
----------------------------------
object_name = datetime(year,month,day,hour=0,minute=0,second=0,microsecond=0,tzinfo=None,*,fold=0)

The year,month and day arguments are required,tzinfo may be None,or an instance of a tzinfo subclass.The
remaining arguments may be integers,in the following ranges:

	MINYEAR<=year<=MAXYEAR,
	1 <=month <=12,
	1<=day<=number of days in the given month and year,
	0<=hour<24,
	0<=minute<60,
	0<=second<60,
	0<=microsecond<1000000,
	fold in [0,1]

The fold parameter specifies whether there was any fold in time.A fold in time means a reverse back of the
clock time.In countries following Daylight Saving time during the end of summer clocks are reversed back by I
hour.This reverse back is a flod in time.

*means a splat operation.Using a splat operator a tuple can be unpacked and a time object can be constructed
out of the value from the tuple.


EX:
dt = datetime(year=2019,month=6,day=30,hour=5,minute=34)


EX:
from datetime import datetime
dt =datetime(year=2019,month=6,day=30)

print(dt)

output
-----
2019-06-30 00:00:00


EX:
from datetime import datetime
dt1 = datetime(year=2019,month=6,day=30)
dt2 = datetime(year=2018,month=5,day=29,hour=15,minute=34)
dt3 = datetime(2017,4,28)
dt4 = datetime(2016,3,27,14,30)
print(dt1)
print(dt2)
print(dt3)
print(dt4)

output
-------
2019-06-30 00:00:00
2018-05-29 15:34:00
2017-04-28 00:00:00
2016-03-27 14:30:00

EX:
from datetime import datetime
dt1 = datetime(year=2019,month=6,day=30)
dt2 = datetime(year=2018,month=5,day=29,hour=15,minute=34)
dt3 = datetime(2017,4,28)
dt4 = datetime(2016,3,27,14,30)
print(dt1.year)
print(dt2.month,dt2.minute)
print(dt3)
print(dt4)

output
-------
2019
5 34
2017-04-28 00:00:00
2016-03-27 14:30:00


datetime class's Methods
--------------------------
now() - This method is used to get the current date and time.We can provide timezone
information to this method.if the timezone is not provided, then it take the local time
zone.It returns an object that contains date and time inforamtion in any timezone.We can
use day, mont, year,hour,minute and second

	EX:datetime.now()

today()-This method is used to get current date and time.It returns the  date and time
information.
	EX:datetime.today()

EX:
from datetime import datetime
ct = datetime.now()
print(ct)

output
------
2021-06-30 22:22:13.212156

EX:
from datetime import datetime
ct = datetime.now()
print(ct.day)
print(ct.month)
print(ct.year)

output
------
30
6
2021

EX:
from datetime import datetime
ct = datetime.today()
print(ct)

output
------
2021-06-30 22:27:11.494150


EX:
from datetime import datetime
ct = datetime.today()
print(ct.hour)
print(ct.day)
print(ct.minute)

output
------
22
30
30


date class in Python
======================
date object - A date object is an object containing information of year,month and day

Creating object of data class
----------------------------
object_name = date(year,month day)
All arguments are required.Arguments any be intergers,in the following ranges:

	MINYEAR<=year<=MAXYEAR
	1<=month<=12
	1<=day<=number of days in the given month and year

	EX: d = date(year = 2019,month = 6,day = 30)



date class's Method
-------------------
today()Method - This method is used to get the current date.It returns only date.

EX: date.today(year=2019,month=6,day=30)



EX:
from datetime import date
d1 = date(year=2019,month=6,day = 30)
print(d1)

output
------
2019-06-30


EX:
from datetime import date
d1 = date(2019,6,30)
print(d1)

output
-----
2019-06-30


EX:
from datetime import date
d1 = date(year=2019,month=6,day = 30)
print(d1.year)
print(d1.month)

output
------
2019
6


EX:
from datetime import date
cd = date.today()
print(cd.year)
print(cd.month)

output
------
2021
6



time Class in Python
===================
time object - A time object is an object containing inforamtion of local time
of day,independent of particular day,and subject to adjustment via tzinfo object.

Creating Object of time class
---------------------------
object_name = time(hour=0,minute=0,second=0,microsecond=0,tzinfo=None,*, fold=0)

All arguments are optional.tzinfo may be None, or an instance of a tzinfo subclass.The
remaining arguments may be integers, in the following ranges:

0<=hour<24,
0<=minute<60,
0<=second<60,
0<=microsecond<1000000,
fold in [0,1].

All default to 0 except tzinfo, which defaults to None

EX:
t = time(hour=5,minute=34,second=30)


EX:
from datetime import  time
t = time(hour = 15,minute = 34, second=12)
print(t)

output
------
15:34:12

EX:
from datetime import  time
t = time(hour = 15,minute = 34, second=12)
print(t.minute)
print(t.hour)

output
------
34
15

EX:
from datetime import  time
t = time(15,34, 12)
print(t.minute)
print(t.hour)

output
------
34
15

timedelta Class in Python
==========================
timedelta object - A timedelta object represents a duration, the difference between two dates 
or times.

It is possible to know the future dates or previous dates using timedelta.

Creating Object of timedelta class
-------------------------------------
object_name = timedelta(days=0,seconds=0,microseconds=0,milliseconds=0,minutes=0, hours=0, weeks=0)

All arguments are optional and default to 0.Arguments may be integers or floats,and may be
positive or negative.

Only days,seconds and microseconds are stored internally.Arguments are converted to those
units

A milliseconds is converted to 1000 microseconds.
A minute is converted to 60 seconds
An hour is converted to 3600 seconds.
A week is converted to 7 days.

EX:
td = timedelta(days=10)


EX:
from datetime import timedelta
td = timedelta(days=10)
print(td)

output
------
10 days, 0:00:00


EX:
from datetime import timedelta,date
td = timedelta(days=10)
d = date.today()
print(d + td)

output
-------
2021-07-11


EX:
from datetime import timedelta,date 
td = timedelta(days=15)
d = date.today()
print(d - td)                                                                                                                                                                                                                                                                                                                                                                                                        output
------
2021-06-16


Comparing Two Dates in Python
===============================

We can compare date class and datetime class objects using ==,<,>.
The comparison will return either True or False

#Comparing Two Dates

from datetime import date
d1 = date(year = 2019,month=6,day=30)
d2 = date(year=2016,month=6,day=30)
print(d1 == d2)

output
------
False


EX:
#Comparing Two Dates

from datetime import date

d1 = date(year = 2019,month=6,day=30)
d2 = date(year=2016,month=6,day=30)
print(d1 == d2)
print(d1 > d2)
print(d1 < d2)
print(d1 != d2)

output
------
False
True
False
True


Formatting Date and Time in Python
=====================================
strftime() Method -This method is used to format the content of datetime,date and
time class object. strftime represents string format to time.This method convert the
object into a specified format and returns the  formatted string.

EX:
dt = datetime.today()
newdt = dt.strftime("%B,%d,%Y")


Format code
--------------
format code  	Meaning			 	Example

%a		Weekday in short name		   Sun,Mon,.......Sat
%A		Weekday in full name		   Sunday,Monday,.....Saturday
%d		Day of month with 0 padded 	   01,02,.......30,31
%b		Month in short Name		   Jan,Feb,......Dec
%B		Month in full Name		   January,.........December
%m		Month in number with 0 padded      01,02,.........,12
%y    Year in short with 0 padded,without century  00,01,02,.......,99
%Y		Year in Full with century	   0001,0002,.......,9999

%H		Hours with 0 padded(24 hours clock)  00,01,02,.......,23
%I 		Hourse with 0 padded(12 hourse clock) 01,02,........,12
%p		AM/PM 					AM,PM

%M		Minute with 0 paddedd			00,01,....,59
%s 		Second with 0 padded
  
%f		Microsecond				000000 ,............9988                                                         
%Z 		Time zone name				(empty),UTC,CST

%j		Day number of ere		     001,002,.........366

%U		week number of the year,Subday as the  00,01,...........,53
 		first day of week with 0padded.

%c 		Local's appropriate date and time 	Tue Jan 30 21:30:00 2019	
		representaiion			

%x 		Local's appropriate date representation	 08/16/88(None);
							 08/16/1988(en_US)
							 16.08.1988(de_DE)

%X		Locale's appropriate time representation  21:30:00(en_US);
							  21:30:00(de_DE)

%%		A literal '%' character		  	  %



EX:
#Formatting Date and Time

from datetime import datetime
dt = datetime.today()
print(dt)


output
------
2021-07-02 07:47:59.231970

EX:
#Formatting Date and Time

from datetime import datetime
dt = datetime.today()
print(dt)
print()

newd1 = dt.strftime('%B, %d, %Y')
print(newd1)
print()

newd2 = dt.strftime('%d/%d/%Y')
print(newd2)
print()

newd3 = dt.strftime('%d-%m-%Y')
print(newd3)
print()

newt1 = dt.strftime('%H:%M:%S')  #24 hr time, Railway Time
print(newt1)
print()

newt2 = dt.strftime('%I:%M:%S') #Hourse Time
print(newt2)
print()


output
------
2021-07-02 08:00:29.725776

July, 02, 2021

02/02/2021

02-07-2021

08:00:29

08:00:29


EX:
from datetime import datetime

newd1 = dt.strftime('%B%d, %Y')
print(newd1)
print(type(newd1))
print()

output
------
July02, 2021
<class 'str'>


EX:
from datetime import datetime

dt = datetime.today()
print(dt)
print(type(dt))
print()

output
-------
2021-07-02 08:10:46.725384
<class 'datetime.datetime'>



sleep Method in Python
======================
#sleep() Method is used to step excution of a program temporarily for a given amount of time.
When this function is called,PVM stops program execution for given amount of time.
#It belongs to time module

EX:
for i in range(20):
	print(i)

output
------
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19

EX:

import time
for i in range(18):
	print(i)
	if(i==10):
		time.sleep(5)


output
-------
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

EX:

import time
for i in range(18):
	print(i)
	if(i==10):
		time.sleep(4.5)

output
------
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14



How to Calculate age in Python
===============================

EX:

from datetime import date

dob = date(1993,10,15)

t = date.today()

age = t.year - dob.year - ((t.month,t.day) < (dob.month,dob.day))

print(age)


output
------
27


Multitasking in Python
======================
Executing multiple task at the same time.

Type of Multitasking
--------------------
1.Process based Multitasking
2.Thread based Multitasking


1.Process based Multitasking
----------------------------
Executing multiple task at the same time where each task is a separate independent
program(process),is called process based multitasking.It is suitable for Operating System level


2.Thread based Multitasking
-------------------------------
Executing multiple task at the same time where each task is a separate independent part
of the same program(process),is called Thread based multitasking and each independent part
is called Thread.It is suitable for Programmatic level.


Thread and Multithreading in Python(VVVVIMP INTERVIEW)
=====================================

Thread is a separate flow of execution.Every thread has a task.

Multithreading
--------------
Using Multiple Threads in Program or process

The main importent application areas of multi threading are:
	1.Multimedia Graphic
	2.Animations
	3.Video Games
	4.Web Servers
	5.Application Servers


Main Thread in Python
=====================
1.When we start any Python Program,One thread brging running immediately,Which is called
Main Thread of that program created by PVM.

2.The main thread is crated automatically when your program is started.


EX:
import threading

t = threading.current_thread().getName()

print('GeekyShows')

print(t)

output
------
GeekyShows
MainThread


Creating a Thread without using a Class in Python
==============================================

"Thread" class of "threading" module is used to  create threads.To create our own
thread we need to create an object of ThreadClass.

Following are the ways of creating threads:

1.Creating a thread without using a class
2.Creating a thread by creating a child class to Thread class
3.Creating a thread without creating child class to Thread class


Creating a thread without using a class
-----------------------------------------
from threading import Thread
thread_object = Thread(target=function_name,args=(arg1,arg2,.....))
thread_object-it represents our thread.
target-It represent the function on which the thread will act.
args-It represents a tuple of arguments which are passed to the function.

EX:
t = Thread(target=disp,args=(10,20))

How to Start Thread
----------------------
Once a thread is created it should be started by calling start()Method.

EX:
from threading import Thread
def disp():
	print('Thread Running')

t = Thread(target=disp)

t.start()	

output
------
Thread Running

EX:

from threading import Thread
def disp(a):
	print('Thread Running',a)

t = Thread(target=disp,args=(10,))

t.start()	

output
------
Thread Running 10


EX:
from threading import Thread
def disp(a,b):
	print('Thread Running',a,b)

t = Thread(target=disp,args=(10,20))

t.start()	

output
------
Thread Running 10 20


EX:

from threading import Thread

def disp():
	print('Child Thread')


t = Thread(target=disp)

t.start()

for i in range(5):
	print('Main Thread')	


output
-------
Child Thread
Main Thread
Main Thread
Main Thread
Main Thread
Main Thread

EX:

from threading import Thread

def disp():
	for i in range(5):
		print('Child Thread')

t = Thread(target=disp)	

t.start()

for i in range(5):
	print('Main Thread')	

output
------
Child Thread
Main Thread
Main Thread
Child Thread
Child Thread
Child Thread
Child Thread
Main Thread
Main Thread
Main Thread

EX:
from threading import Thread

def disp():
	for i in range(5):
		print('Child video C')

t = Thread(target=disp)	

t.start()

for i in range(5):
	print('Main Video M')	

output
------
Child video C
Main Video M
Child video C
Main Video M
Child video C
Child video C
Main Video M
Main Video M
Main Video M
Child video C


EX:
from threading import Thread

def disp():
	for i in range(5):
		print('Child video C')

t = Thread(target=disp)	

t.start()

for i in range(5):
	print('Main Video M')

for i in range(10):
	print('Publish Video')		

output
-----
Child video C
Main Video M
Child video C
Main Video M
Main Video M
Main Video M
Main Video M
Publish Video
Publish Video
Child video C
Publish Video
Child video C
Publish Video
Child video C
Publish Video
Publish Video
Publish Video
Publish Video
Publish Video
Publish Video


Set and Get Thread Name in Python 
=================================
1.current_thread() - This function current thread object.

2.getName() - Every has a name by defaulr,to get the name of thread we cma 

3.setName(name)- Tbis method is used to set the name of thread.

4.name Property- This property is used to get or set name of te thrat



EX: Video 52 nundi chudu....anni








 
	






				





                                                                                                                                                                                     














	
			

	


	