	While loop
	==========

loop Control Statement
=======================
Loop control statement are used when a section of code may either be
excuted a fixed number of times,or while some condition is true.

1.While loop
2.For loop

1.Whileloop
============
	syntax:
		while(condition):
			Statement
		Rest of the Code



EX:
a = 1	#Initial Value
while a <= 10:
	print(a)
	a +=1		#a = a + 1
print('Rest of the Code')

ouput
----
1
2
3
4
5
6
7
8
9
10
Rest of the Code


EX:
a = 2
while a <= 20:
	print(a)
	a +=2	#a = a+2
print('Rest of the Code')	

output
-------
2
4
6
8
10
12
14
16
18
20
Rest of the Code


While Loop with else
=======================
This repeatedly tests the condition and,if it is True excuted the statement 1;if
the condition is False(Which may be the first time it is tested) the satatement 2
of the else clause,is 	excuted and the loop terminates.The else suite will be always
excuted irrespective of the satatement in the loop are executed or not.

	syntax:
		while(condition):
			Statement1
		else:
			Statement 2
		Rest of the Code


EX:
a = 1
while a <= 5:
	print(a)
	a+=1
else:
	print('While condition False so Else part executed.')

print('Rest of the code')		


ouput
------
1
2
3
4
5
While condition False so Else part executed.
Rest of the code


EX:
a = 6
while a <= 5:
	print(a)
	a+=1
else:
	print('While condition False so Else part executed.')

print('Rest of the code')		


ouput
-----
While condition False so Else part executed.
Rest of the code



Infinite While Loop(vvvvIMP)
=====================

	syntax:
		while(True):
			statement

		Rest of the code


	Syntax:
		while(True):
			Statement
			if(condition):
				break
		Rest of the Code


EX:
i = 0

while True:
	i+=1
	print(i)
	if(i == 3):
		break

print('Rest of the Code')	

output
-------
1
2
3
Rest of the Code



Nested while Loop
===================
	syntax:
		while(condition):
			Statement
			while(condition):
				Statement
			Statement
		
		Rest of code


EX:
i = 1
while i <= 3:
	print('Outer Loop',i)
	i += 1
	j = 1
	while j <= 5:
		print("Inner Loop",j)
		j += 1

print("Rest of the Code")		


output
------
Outer Loop 1
Inner Loop 1
Inner Loop 2
Inner Loop 3
Inner Loop 4
Inner Loop 5
Outer Loop 2
Inner Loop 1
Inner Loop 2
Inner Loop 3
Inner Loop 4
Inner Loop 5
Outer Loop 3
Inner Loop 1
Inner Loop 2
Inner Loop 3
Inner Loop 4
Inner Loop 5
Rest of the Code


	
range Function in Python
=======================
range() funtion is used to generate a sequence of integers starting from 0 by default,
and increments by 1 by default,till j-1.

	syntax:
		range(start,stop,stepsize)
	
	start -starting position. if we do not mention start by default it's 0
	stop-Ending position.The range of integers stops one element prior to stop.If stop
	is j then it will stop at exact j-1
	stepsize - Increment by stepsize,if we do not mention start by default it's 1




range()Function
================
syntax:		
	range(j)      #0,1,2,3,4........j-1

	EX:
		range(10)   #0,1,2,3,4,5,6,8,9.



	range(i,j)	#i,i+1,i+2,i+3,.......j-1
	EX:
		range(1,10)  # 1,2,3,4,5,6,7,8,9.


	range(i,j,k)	#i,i+k,i+2k,i+3k,i+4k,......j-1
	EX:
		range(1,10,2)	#1,3,5,7,9.


	range(-1,-10,-2)   #-1,-3,-5,-7,-9.


	range(10,0,-1)	   #10,9,8,7,6,5,4,3,2,1


Rules
=======
1.All argument must be integers, whether its positive or negative.
2.You can not pass a string or float number or any other type in a start,stop
and stepsize.
3.The stepsize value should not be zero.


EX:
a = range(5)
print(a[0])
print(a[1])
print(a[2])
print(a[3])
print(a[4])

output
-----
0
1
2
3
4


EX:
a = range(1,5)
print(a[0])
print(a[1])
print(a[2])
print(a[3])

output
------
1
2
3
4

EX:
a = range(1,10,2)
print(a[0])
print(a[1])
print(a[2])
print(a[3])

output
------
1
3
5
7

EX:
a = range(-1,-10,-2)
print(a[0])
print(a[1])
print(a[2])
print(a[3])
print(a[4])

output
------
-1
-3
-5
-7
-9

EX:
a = range(5,0,-1)
print(a[0])
print(a[1])
print(a[2])
print(a[3])
print(a[4])

output
-------
5
4
3
2
1


for loop and Nested for Loop in Python
======================================
The for loop i useful to iterate over the element of the of sequence such as string,
list,tuple,...etc.

	syntax:
		for var in sequence:
			Statements
		Rest of the Code

EX:
st = 'GeekyShows'

for ch in st:
	print(ch)

print("Rest of the code")	

output
------
G
e
e
k
y
S
h
o
w
s
Rest of the code


For loop with range
====================

EX;
a = range(5)
for i in a:
	print(i)

ouptut
-----
0
1
2
3
4


	OR


for i in range(5):
	print(i)

output
-----
0
1
2
3
4


EX:
a = range(1,5)
for i in a:
	print(i)

output
-----
1
2
3
4

EX:
a = range(1,10,2)
for i in a:
	print(i)

output
------
1
3
5
7
9


EX:
a = range(-1,-10,-2)
for i in a:
	print(i)

output
------
-1
-3
-5
-7
-9

EX:
a = range(10,0,-1)
for i in a:
	print(i)

output
------
10
9
8
7
6
5
4
3
2
1

EX:
a = range(10,0,-2)
for i in a:
	print(i)

output
------
10
8
6
4
2

EX:
a = "Geekyshows"
n = len(a)
for i in range(n):
	print(i)
output
------
0
1
2
3
4
5
6
7
8
9

EX:
a = "Geekyshows"

n = len(a)

for i in range(n):
	print(i, '=', a[i])
print('Rest ofthe code')

output
------
0 = G
1 = e
2 = e
3 = k
4 = y
5 = s
6 = h
7 = o
8 = w
9 = s
Rest of the code


for loop with else
===================
The for loop is useful to iterate over the elements of sequence such
as string list,tuple,.The else suite will be always executed irrespective of the
statement in the loop are executed or not.

	syntax:
		for var in sequence:
			statements
		else:
			Statements
		Rest of the Code

EX:
a = "Geekyshows"

for i in a:
	print(i)

else:
	print('Else Part')

print('Rest of the Code')		

output
-------
G
e
e
k
y
s
h
o
w
s
Else Part
Rest of the Code


Nested for loop
===============
For loop inside another for loop is know as nested for loop.

Syntax;
	for i in range(n):
		for j in range(y):
			Statements
		Statements
	Rest of the code

EX:
for i in range(2):
	print('Outer Loop',i)
	for j in range(3):
		print("Inner Loop",j)

print('Rest of the code')		

output
-------
Outer Loop 0
Inner Loop 0
Inner Loop 1
Inner Loop 2
Outer Loop 1
Inner Loop 0
Inner Loop 1
Inner Loop 2
Rest of the code



Break Statement and Continue Statement in Python
==================================================

Break(it mena's condition ni 'off' chesthundi)
------
Break statement is used to jump out of loop to process the next statement in the 
program.

	syntax:
		while condition:
			if(condition):
				break
		Rest of Code

EX:

for i in range(10):
	print(i)

print('Rest of the code')	

output
-----
0
1
2
3
4
5
6
7
8
9
Rest of the code


EX;
for i in range(10):
	if(i == 5):
		break
	print(i)  #observe here

print('Rest of the code')	

output
------
0
1
2
3
4   #observe here
Rest of the code

EX:
for i in range(10):

	print(i)     #observe here
	
	if(i == 5):
		break
	

print('Rest of the code')	

output
------
0
1
2
3
4
5    #observe here
Rest of the code



Continue(it menas Skip)
--------
	continue statement is used in a loop to go back to the beginning of the loop
	
	syntax;
		while condition:
			if(condition):
				continue
		Rest of code


EX;
for i in range(10):

	if(i == 5):
		continue
	print(i)	
	

print('Rest of the code')	

output
------
0
1
2
3
4
6
7
8
9
Rest of the code



Pass Statement in Python(pass mean's akkada empty ga undi ani artham,akkada perform yedi jaragadhu ani.)
=============================
Pass Statement is used to do nothing. it can be used inside a loop or if statement to represent
no operation. Pass is useful when we need statement syntactically correct but we do not when
to do any opration.

	syntax:
		if(condition):

			pass    #Do not perform any operation

		else:
			Statements


	syntax;
		while condition:
			if(conndition):
				pass
			statement
		Rest of the code



EX;
if 5 > 2:   #True
	pass 

else:
	print('Else part')

print('Rest of the code')
		

output
------
Rest of the code

EX:

if 5 < 2:
	pass 

else:
	print('Else part')

print('Rest of the code')		

output
------
Else part
Rest of the code


EX:
i = 1
while i <= 10:
	if(i == 5):
		pass
	print(i)
	i+=1

print('Rest of the code')		

output
------
1
2
3
4
5
6
7
8
9
10
Rest of the code

=======================END====================


	









	













	
