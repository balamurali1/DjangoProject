		SQL(SQL=Structured Query Language)
		================================
SQL lo use chese commands
-------------------------
Data base lo data nu select cheyali ante - Select command use cheyali.
"	'"	"    Delete	"	 - Delete  "		"
"	"	"    Update 	" 	 - Update  "		"
"	"	"    Insert 	"	 - Insert Into  "	"
"	"	"    Modify	" 	 - Alter Database  "	"
"	"	"  Entaire delete "	 - Drop Index 	"	"
"	" 	" New tabel create "	 - Create Table "	"
"	"	"New database create "   - create database "	"
=======================**********======================	
SQL Commands-->1.Data Defination language(DDL)(vvvIMP)
			a.Create
			b.Alter
			c.Drop
			d.Truncate
			e.Rename
			f.Comment
	       2.Data Manipulation language(DML)(VVVIMP)
			a.Select(fetch)
			b.Insert
			c.Update
			d.Delete
	       3.Data Control language(DCL)
			a.Grant
			b.Revoke
	       4.Transaction control language(TCL)
			a.Commit
			b.Rollback
			c.save point
	       5.Constraints-->this is nothing but 'rule' apply cheyadam...
			a.Primary Key
			b.Foreign key
			c.check
			d.Unique
			e.Default
			f.Not null
Note:
1)	constraint_name-> ante
		1.Foreign key
		2.Primary Key
		3.unique key
		4.NOT NULL
		5.NULL....etc

2)SHOW INDEX from test;--->Importent line

3)Columns ni 'Field' antaru
4)Rows ni record and attribute antaru.
5) ctrl + c (yedaina tappu pothe edi click cheai... clear auvthundi.)
6)exist  kuda try chesthe 




3)mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| murali             |
| my_db              |
| mysql              |
| pdb                |
| performance_schema |
+--------------------+

===========================
	
C:\>cd Program Files

C:\Program Files>cd mysql

C:\Program Files\MySQL>cd mysql server 8.0

C:\Program Files\MySQL\MySQL Server 8.0>cd bin

C:\Program Files\MySQL\MySQL Server 8.0\bin>mysql -u root -p

Enter password: ********    #Bb@95812
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 25
Server version: 8.0.25 MySQL Community Server - GPL

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> quit
Bye

NOTE: SQL is not  casesensitive

 Create Database in SQL
=============================

mysql> CREATE DATABASE my_db;
Query OK, 1 row affected (0.13 sec)


Use Database in SQL
====================
USE-This is used to  tell your RDBMS/DBMS that you want  to use this  database.

	syntax:	USE database_name;
	EX: USE my_db;

mysql> USE my_db;  #Database Open cheyadam ee line	
Database changed


Create Table in SQL
====================

Syntax:
	CREATE TABLE table_name
	(
	Column_name1 data_type (size),
	Column_name2 data_type (size),
	Column_name3 data_type (size)
	);


EX:
	CREATE TABLE my_tab
	(
	name varchar (30),
	roll number (4),
	address varchar (100)
	);

Guidelines for creation of Table
-------------------------------
. Table name should start with an alphabet
. In table name,blank spaces and single quotes an not  allowed
. Reserve words of that RDBMS/DBMS cannot be used as table name
. Proper data type and size should be specified
. Unique column name should be specified

cmd lo--->

mysql> CREATE TABLE my_tab
    -> (
    -> name varchar (50),
    -> roll int (4)
    -> );
Query OK, 0 rows affected, 1 warning (2.03 sec)


Describe Table in SQL
====================
	DESC
	-----
This is used to describe your table.DESC only describe structure of table
not the information(rows) inside table. DESC is  short form of describe.
	syntax:
		DESC table_name;
	EX:
		DESC my_tab;

mysql> USE my_db;  #Data base open cheyadam first.
mysql> DESC my_tab; #Database open chesina tharuvatha table ni print cheyadam.
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| name  | varchar(50) | YES  |     | NULL    |       |
| roll  | int         | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.12 sec)


Show Database and Table 
========================
1.SHOW DATABASES - This command is used to  view all the  database name.
	syntax:	
		SHOW DATABASES;

ex:

mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| murali             |
| my_db              |
| mysql              |
| pdb                |
| performance_schema |
+--------------------+
6 rows in set (0.00 sec)


EX:

mysql> USE pdb; #Database ni open cheyadam
Database changed
mysql> SHOW TABLES; #Yenni table's unnayo chudadam..
+---------------+
| Tables_in_pdb |
+---------------+
| student       |
| student1      |
+---------------+
2 rows in set (0.00 sec)



2.SHOW TABLES - This command is used to view all table of current database.
	syntax:
		SHOW TABLES;

ex:
mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| my_tab          |
+-----------------+
1 row in set (0.00 sec)


INT and DEC Data Type in SQL
==============================
INT or INTEGER -IT holds whole number between -32,768 and 32,767 either
it is negative or positive.It can not hold a decimal numbers.The maximum
number of digits may be specified in parenthesis.
	Syntax:
		column_name INT (size);
	EX:			
		roll INT (5);

DEC or DECIMAL(size,p)- It holds fixed point numbers,Size is the total number of digits and 
p is the number of digits after the decimal point.The decimal point and the negative sign '-'
are not counted in size.if p is 0, values have no decimal point.The maximum number of size for
decimal is 65 and for p 30.if p omitted the default is 0.if size is omitted,
the default is 10.
	Syntax:
		column_name DECIMAL (size,p);
	EX:
		price DECIMAL (4,2);


CHAR, VARCHAR and TEXT Data Type in SQL
=========================================
CHAR or CHARACTER - It holds a "fixed length string"(can contain letters,numbers, and
special characters).The fixed size is specified in parenthesis.It can store up to 255
characters.
	syntax: column name CHAR(20);
	EX: name CHAR (20);

VARCHAR -it holds a "variable length string"(can contain letters,numbers,and special characters).
The maximum size is specified in parenthesis.It can store up to 255 characters.

NOTE:If we put a grater value than 255 it will be converted to a TEXT type.

	syntax:
		column_name VARCHAR (size);
	EX:
		name VARCHAR (50);

TEXT -It holds a string with a maximum length of 65,535 characters.
Syntax:
	column_name TEXT;
EX:
	address TEXT;


 DATE, DATATIME and TIMESTAMP Data Type in SQL
================================================
DATE-It displays Data values in yyyy-mm-dd format.
	syntax:
		column_name DATE;
	EX:
		age DATE;

DATETIME - It display DATETIME values in yyyy-mm-dd hh:mm:ss format.
	syntax:
		column_name DATETIME;
	EX:
		Date_of_join DATETIME;

TIMESTAMP - It  also displayes date and time.
	syntax:
		column_name TIMESTAMP;
	EX:
		login_dt TIMESTAMP;

	
		
Example of All Data Type in SQL
===============================

stu_id = INT
Name   = VARCHAR
Address = TEXT
DOB	= DATE
Fees	= DEC

cmd lo ---->

mysql> USE my_db;
Database changed

mysql> CREATE TABLE new_tab
    -> (
    -> stu_id INT (5),
    -> name VARCHAR (50),
    -> address TEXT,
    -> dob DATE,	
    -> fees DEC (10,2)
    -> );
Query OK, 0 rows affected, 1 warning (0.95 sec)

mysql> DESC new_tab;
+---------+---------------+------+-----+---------+-------+
| Field   | Type          | Null | Key | Default | Extra |
+---------+---------------+------+-----+---------+-------+
| stu_id  | int           | YES  |     | NULL    |       |
| name    | varchar(50)   | YES  |     | NULL    |       |
| address | text          | YES  |     | NULL    |       |
| dob     | date          | YES  |     | NULL    |       |
| fees    | decimal(10,2) | YES  |     | NULL    |       |
+---------+---------------+------+-----+---------+-------+
5 rows in set (0.13 sec)

mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| my_tab          |
| new_tab         |
+-----------------+
2 rows in set (0.00 sec)


Help and Support by MYSQL
==========================

mysql> help contents
You asked for help about help category: "Contents"
For more information, type 'help <item>', where <item> is one of the following
categories:
   Account Management
   Administration
   Components
   Compound Statements
   Contents
   Data Definition
   Data Manipulation
   Data Types
   Functions
   Geographic Features
   Help Metadata
   Language Structure
   Plugins
   Prepared Statements
   Replication Statements
   Storage Engines
   Table Maintenance
   Transactions
   User-Defined Functions
   Utility


mysql> help Functions
You asked for help about help category: "Functions"
For more information, type 'help <item>', where <item> is one of the following
categories:
   Aggregate Functions and Modifiers
   Bit Functions
   Cast Functions and Operators
   Comparison Operators
   Date and Time Functions
   Encryption Functions
   Enterprise Encryption Functions
   Flow Control Functions
   GROUP BY Functions and Modifiers
   GTID
   Information Functions
   Internal Functions
   Locking Functions
   Logical Operators
   Miscellaneous Functions
   Numeric Functions
   Performance Schema Functions
   Spatial Functions
   String Functions
   Window Functions
   XML

mysql> help Logical Operators
You asked for help about help category: "Logical Operators"
For more information, type 'help <item>', where <item> is one of the following
topics:
   !
   AND
   ASSIGN-EQUAL
   ASSIGN-VALUE
   OR
   XOR

........etc.


INSERT INTO in SQL
===================
The  INSERT INTO  statement is used to insert new records/row/tuple in a table.

syntax:

	INSERT INTO table_name(column1,column2,column3,column4,......)
	VALUES(value1,'value2','value3',value4.....);
	
EX:
	INSERT INTO my_tab(stu_id,name,address,mobile_no)
	VALUES(05,'Anu','Delhi',982112);

Rules
-----
	. Column and Value order should be same.
	. Any value that goes into a VARCHAR,CHAR,DATE or TEXT column has single quotes
	  around it.There are no need of quotes for numeric value(INT,DEC)
	
=======================================================
Need single quotes		No need
-------------------		--------
CHAR				INT or INTEGER
VARCHAR				DEC or DECIMAL
DATE
DATETIME
TIMESTAMP
TIME
BLOB
TEXT
===========================================================

EX:
mysql> USE my_db;
Database changed
mysql> CREATE TABLE student
    -> (
    -> stu_id INT (5),
    -> name VARCHAR (50),
    -> city VARCHAR (50),
    -> pin INT (20)
    -> );

mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| my_tab          |
| new_tab         |
| student         |
+-----------------+


mysql> DESC student;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| stu_id | int         | YES  |     | NULL    |       |
| name   | varchar(50) | YES  |     | NULL    |       |
| city   | varchar(50) | YES  |     | NULL    |       |
| pin    | int         | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
4 rows in set (0.04 sec)


mysql> INSERT INTO student (stu_id,name,city,pin)
    -> VALUES (01,'Raj','Ranchi',123456);

mysql> SELECT * FROM student; #student is TableName
+--------+------+--------+--------+
| stu_id | name | city   | pin    |
+--------+------+--------+--------+
|      1 | Raj  | Ranchi | 123456 |
+--------+------+--------+--------+
1 row in set (0.00 sec)


INSERT INTO without specifying Column Name in SQL
==============================================
	without specifying Column Name
	------------------------------
	Syntax:
		INSERT INTO table_name
		VALUES(value1,'value2','value3',value4);
	EX:
		INSERT INTO student
		VALUES(05,'Anu','Delhi',982112);

	Rules:
		. The values order should be same as column
		. We need to insert record for each column we can not leave any column


mysql> INSERT INTO student
    -> VALUES (02,'Sona','Delhi',652345);

mysql> SELECT * FROM student;
+--------+------+--------+--------+
| stu_id | name | city   | pin    |
+--------+------+--------+--------+
|      1 | Raj  | Ranchi | 123456 |
|      2 | Sona | Delhi  | 652345 |
+--------+------+--------+--------+


INSERT INTO with Changing order of column in SQL
================================================

Changing order of column
	syntax:
		INSERT INTO table_name(column2,column1,column4,column3)
		VALUES ('value2',value1,value4,'value3');

	EX:
		INSERT INTO student(name,stu_id,mobile_no,address)
		VALUES('Anu',05,982112,'Delhi');


mysql> INSERT INTO student(name, stu_id,pin,city)
    -> VALUES('Anu',3,879845,'kolkata');

mysql> SELECT * FROM student;
+--------+------+---------+--------+
| stu_id | name | city    | pin    |
+--------+------+---------+--------+
|      1 | Raj  | Ranchi  | 123456 |
|      2 | Sona | Delhi   | 652345 |
|      3 | Anu  | kolkata | 879845 |
+--------+------+---------+--------+


INSERT INTO Specified Column in SQL 
=================================
	Insert Data only in Specified Columns
	-------------------------------------

	Syntax:
		INSERT INTO table_name(column1,column2,column3)
		VALUES (value1,'value2','value3');

	EX:
		INSERT INTO my_tab(stu_id,name,address)
		VALUES (04,'murali','Delhi');


mysql> INSERT INTO student(stu_id,name,pin)
    -> VALUES (4,'Sonu',764839);

mysql> SELECT * FROM student;
+--------+------+---------+--------+
| stu_id | name | city    | pin    |
+--------+------+---------+--------+
|      1 | Raj  | Ranchi  | 123456 |
|      2 | Sona | Delhi   | 652345 |
|      3 | Anu  | kolkata | 879845 |
|      4 | Sonu | NULL    | 764839 |
+--------+------+---------+--------+

	
INSERT INTO Multiple rows in SQL
=================================
	Insert multiple record at one time
	-----------------------------------
	Syntax:
		INSERT INTO table_name
		(column1,column2,column3,column4)
		VALUES (value1,'value2','value3',value4),
		(value1,'value2','value3',value4);

	EX:
		INSERT INTO student
		(stu_id,name,address, mobile_no)
		VALUES(01,'Anu','Delhi',982112),
		(02,'Rohan','Mumbai',561425);


mysql> INSERT INTO student(stu_id,name,city,pin)
    -> VALUES (5,'shubham','HYD',542367),
    -> (6,'Amit','Ranchi',123456);
Records: 2  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM student;
+--------+---------+---------+--------+
| stu_id | name    | city    | pin    |
+--------+---------+---------+--------+
|      1 | Raj     | Ranchi  | 123456 |
|      2 | Sona    | Delhi   | 652345 |
|      3 | Anu     | kolkata | 879845 |
|      4 | Sonu    | NULL    | 764839 |
|      5 | shubham | HYD     | 542367 |
|      6 | Amit    | Ranchi  | 123456 |
+--------+---------+---------+--------+	


SELECT All or Particular Column records in SQL
=============================================
The SELECT statement is used to select data from a database and retrieve the
information.
	
  1.Select all columns from the table
	Syntax:	
		SELECT * FROM table_name;
	EX:
		SELECT * FROM my_tab;

  2.Select Particular columns from the table
	Syntax:
		SELECT column_name1,column_name2,.......
		FROM table_name;

	EX:
		SELECT name,mobile
		FROM my_tab;


mysql> SELECT * FROM student;
+--------+---------+---------+--------+
| stu_id | name    | city    | pin    |
+--------+---------+---------+--------+
|      1 | Raj     | Ranchi  | 123456 |
|      2 | Sona    | Delhi   | 652345 |
|      3 | Anu     | kolkata | 879845 |
|      4 | Sonu    | NULL    | 764839 |
|      5 | shubham | HYD     | 542367 |
|      6 | Amit    | Ranchi  | 123456 |
+--------+---------+---------+--------+

mysql> SELECT stu_id, name FROM student;
+--------+---------+
| stu_id | name    |
+--------+---------+
|      1 | Raj     |
|      2 | Sona    |
|      3 | Anu     |
|      4 | Sonu    |
|      5 | shubham |
|      6 | Amit    |
+--------+---------+  
		

Single Quotes Problem in SQL
=============================

INSERT INTO my_tab(t_id,c_name,address)
VALUES(142,'k.k's Company', 'Delhi');

There are two way to slove this problem:-
	. Use backslash
		EX:'k.k\'s Company'
	. Use two time single quotes
		EX:'k.k''s Company'



mysql> INSERT INTO student (stu_id,name,city,pin)
    -> VALUES (7,'kk's company','Delhi',345345);
    '> ----->Error vasthundi
    '> '; --->Error nundi bayataku ravali  ante ela type cheai....


mysql> INSERT INTO student (stu_id,name,city,pin)
    -> VALUES (7,'kk\'s company','Delhi',345345);

mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+


mysql> INSERT INTO student (stu_id,name,city,pin)
    -> VALUES (7,'kk''s company','Delhi',345345);

mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+




SELECT with LIMIT in SQL
===========================
SELECT LIMIT is used to specify some number of records to display.
 
	Syntax:
		SELECT column_name1,column_name2
		FROM table_name
		LIMIT records_number;

	EX:
		SELECT stu_id,name FROM new_tab
		LIMIT 3;

mysql> SELECT * FROM student
    -> LIMIT 5;
+--------+---------+---------+--------+
| stu_id | name    | city    | pin    |
+--------+---------+---------+--------+
|      1 | Raj     | Ranchi  | 123456 |
|      2 | Sona    | Delhi   | 652345 |
|      3 | Anu     | kolkata | 879845 |
|      4 | Sonu    | NULL    | 764839 |
|      5 | shubham | HYD     | 542367 |
+--------+---------+---------+--------+


mysql> SELECT * FROM student
    -> LIMIT 1, 5;  #SQL lo counting anedi 0 nundi start auvthundi.
+--------+---------+---------+--------+
| stu_id | name    | city    | pin    |
+--------+---------+---------+--------+
|      2 | Sona    | Delhi   | 652345 |
|      3 | Anu     | kolkata | 879845 |
|      4 | Sonu    | NULL    | 764839 |
|      5 | shubham | HYD     | 542367 |
|      6 | Amit    | Ranchi  | 123456 |
+--------+---------+---------+--------+
5 rows in set (0.00 sec)


mysql> SELECT stu_id, name  FROM student
    -> LIMIT 5;
+--------+---------+
| stu_id | name    |
+--------+---------+
|      1 | Raj     |
|      2 | Sona    |
|      3 | Anu     |
|      4 | Sonu    |
|      5 | shubham |
+--------+---------+


mysql> SELECT  stu_id, name, city FROM student
    -> LIMIT 2, 5;
+--------+--------------+---------+
| stu_id | name         | city    |
+--------+--------------+---------+
|      3 | Anu          | kolkata |
|      4 | Sonu         | NULL    |
|      5 | shubham      | HYD     |
|      6 | Amit         | Ranchi  |
|      7 | kk's company | Delhi   |
+--------+--------------+---------+


WHERE Clause and equal operator in SQL 
================================

WHERE is used to search for a specific data.

Syntax:
	1.Specific data from all column
		syntax:
			SELECT *
			FROM table_name
			WHERE column_name operator 'value';
		EX:
			SELECT *
			FROM new_tab
			WHERE name = 'Anu';
		EX:
			SELECT *
			FROM new_tab
			WHERE stu_id = 5;

	2.Specific data from specific column
		Syntax:
			SELECT column_name
			FROM table_name
			WHERE column_name operator 'value';


		EX:
			SELECT name
			FROM new_tab
			WHERE name = 'Anu';
		EX:
			SELECT name
			FROM new_tab
			WHERE stu_id = 5;
Note: Value can be text or numeric. If it is then we have to put single quotes.

Operator			Description
-------				----------
=				Equal
<> or !=			Not equal
>				Greater than
<				Less than
>=				Greater than or equal
<=				Less than or equal
BETWEEN				Between an inclusive range
LIKE				Search for a pattern
IN				To specify multiple possible values for a column


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE city = 'Delhi';
+--------+--------------+-------+--------+
| stu_id | name         | city  | pin    |
+--------+--------------+-------+--------+
|      2 | Sona         | Delhi | 652345 |
|      7 | kk's company | Delhi | 345345 |
|      7 | kk's company | Delhi | 345345 |
+--------+--------------+-------+--------+


mysql> SELECT stu_id, name FROM student
    -> WHERE city = 'Delhi';
+--------+--------------+
| stu_id | name         |
+--------+--------------+
|      2 | Sona         |
|      7 | kk's company |
|      7 | kk's company |
+--------+--------------+

WHERE Clause and Not equal operator in SQL
==========================================

mysql> SELECT * FROM student
    -> WHERE city != 'Delhi';
+--------+---------+---------+--------+
| stu_id | name    | city    | pin    |
+--------+---------+---------+--------+
|      1 | Raj     | Ranchi  | 123456 |
|      3 | Anu     | kolkata | 879845 |
|      5 | shubham | HYD     | 542367 |
|      6 | Amit    | Ranchi  | 123456 |
+--------+---------+---------+--------+


WHERE Clause and Greater than less than in SQL
=====================================

mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE stu_id > 4;
+--------+--------------+--------+--------+
| stu_id | name         | city   | pin    |
+--------+--------------+--------+--------+
|      5 | shubham      | HYD    | 542367 |
|      6 | Amit         | Ranchi | 123456 |
|      7 | kk's company | Delhi  | 345345 |
|      7 | kk's company | Delhi  | 345345 |
+--------+--------------+--------+--------+

mysql> SELECT * FROM student
    -> WHERE stu_id < 4;
+--------+------+---------+--------+
| stu_id | name | city    | pin    |
+--------+------+---------+--------+
|      1 | Raj  | Ranchi  | 123456 |
|      2 | Sona | Delhi   | 652345 |
|      3 | Anu  | kolkata | 879845 |
+--------+------+---------+--------+
3 rows in set (0.00 sec)


mysql> SELECT * FROM student
    -> WHERE stu_id <= 4;
+--------+------+---------+--------+
| stu_id | name | city    | pin    |
+--------+------+---------+--------+
|      1 | Raj  | Ranchi  | 123456 |
|      2 | Sona | Delhi   | 652345 |
|      3 | Anu  | kolkata | 879845 |
|      4 | Sonu | NULL    | 764839 |
+--------+------+---------+--------+



mysql> SELECT * FROM student
    -> WHERE stu_id >= 4;
+--------+--------------+--------+--------+
| stu_id | name         | city   | pin    |
+--------+--------------+--------+--------+
|      4 | Sonu         | NULL   | 764839 |
|      5 | shubham      | HYD    | 542367 |
|      6 | Amit         | Ranchi | 123456 |
|      7 | kk's company | Delhi  | 345345 |
|      7 | kk's company | Delhi  | 345345 |
+--------+--------------+--------+--------+

mysql> SELECT * FROM student
    -> WHERE name > 'R'; (Grater then lo R ni include auvthundi,rule anthe...)
+--------+---------+--------+--------+
| stu_id | name    | city   | pin    |
+--------+---------+--------+--------+
|      1 | Raj     | Ranchi | 123456 |
|      2 | Sona    | Delhi  | 652345 |
|      4 | Sonu    | NULL   | 764839 |
|      5 | shubham | HYD    | 542367 |
+--------+---------+--------+--------+


mysql> SELECT * FROM student
    -> WHERE name < 'R'; (Less then lo R include kadu,rule anthe ....)
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      3 | Anu          | kolkata | 879845 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+


mysql> SELECT * FROM student
    -> WHERE name <= 'R';
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      3 | Anu          | kolkata | 879845 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE name >= 'R';
+--------+---------+--------+--------+
| stu_id | name    | city   | pin    |
+--------+---------+--------+--------+
|      1 | Raj     | Ranchi | 123456 |
|      2 | Sona    | Delhi  | 652345 |
|      4 | Sonu    | NULL   | 764839 |
|      5 | shubham | HYD    | 542367 |
+--------+---------+--------+--------+


IS NULL and IS NOT NULL in SQL 
===============================

NULL values represent missing unknown data.
NULL isnot equal to 0

IS NULL- This is used to select only the record with NULL values in the column.
	Syntax:
		SELECT column_name FROM table_name
		WHERE column_name IS NULL;

	EX:
		SELECT emp_id,emp_name,city
		FROM emp
		WHERE city IS NULL;


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+


mysql> SELECT * FROM student
    -> WHERE city = 0;---->0 pedithey NULL unna row ni remove chesi migatha rows vasthai..
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE city IS NULL;----->IS NULL pedithey NULL unna row vasthundi..
+--------+------+------+--------+
| stu_id | name | city | pin    |
+--------+------+------+--------+
|      4 | Sonu | NULL | 764839 |
+--------+------+------+--------+


IS NOT NULL -This is used to select only the records with no NULL values in the column.
	Syntax:
		SELECT column_name FROM table_name
		WHERE column_name IS NOT NULL;

	EX:
		SELECT emp_id,emp_name,city
		FROM emp
		WHERE city IS NOT NULL;


mysql> SELECT * FROM student
    -> WHERE city IS NOT NULL;---->IS NOT NULL pedithey NULL unna row ni remove chesi migatha rows vasthai.
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

AND operator in SQL
==================
The AND operator displays a record if both the first condition AND the
second condition are true.
	Syntax:
		SELECT * FROM table_name
		WHERE column_name = 'value'
		AND column = 'value';

	EX:
		SELECT * FROM new_tab
		WHERE name = 'Anu'
		AND stu_id = 5;


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE name = 'Sona' AND stu_id = 2;
+--------+------+-------+--------+
| stu_id | name | city  | pin    |
+--------+------+-------+--------+
|      2 | Sona | Delhi | 652345 |
+--------+------+-------+--------+
	

mysql> SELECT * FROM student
    -> WHERE name = 'Sona' AND stu_id = 1;
Empty set (0.00 sec)

output
-----
	Error vasthundi...


OR operator in SQL 
=================
The OR  operator displays a record if either the first condition OR the second condition is true.

Syntax:
	SELECT * FROM table_name
	WHERE column_name = 'value'
	OR column = 'value';

EX:
	SELECT * FROM new_tab
	WHERE name = 'Anu'
	OR stu_id = 5;


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE city = 'Delhi' OR name = 'Raj';
+--------+--------------+--------+--------+
| stu_id | name         | city   | pin    |
+--------+--------------+--------+--------+
|      1 | Raj          | Ranchi | 123456 |
|      2 | Sona         | Delhi  | 652345 |
|      7 | kk's company | Delhi  | 345345 |
|      7 | kk's company | Delhi  | 345345 |
+--------+--------------+--------+--------+	


mysql> SELECT * FROM student
    -> WHERE city = 'Delhi' OR name = 'murali';
+--------+--------------+-------+--------+
| stu_id | name         | city  | pin    |
+--------+--------------+-------+--------+
|      2 | Sona         | Delhi | 652345 |
|      7 | kk's company | Delhi | 345345 |
|      7 | kk's company | Delhi | 345345 |
+--------+--------------+-------+--------+

Combination of AND & OR in SQL
=================================
Syntax:

SELECT * FROM table_name
WHERE column_name = 'value'
AND (column_name = 'value' OR column_name1 = 'value');

EX: 
	SELECT * FROM new_tab
	WHERE name = 'Anu' AND (stu_id = 5 OR address = 'Kolkata');


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE city = 'Delhi' AND (stu_id = 2 OR name = 'Raj');
+--------+------+-------+--------+
| stu_id | name | city  | pin    |
+--------+------+-------+--------+
|      2 | Sona | Delhi | 652345 |
+--------+------+-------+--------+

mysql> SELECT * FROM student
    -> WHERE city = 'Delhi' OR (stu_id = 1  AND name = 'Raj');
+--------+--------------+--------+--------+
| stu_id | name         | city   | pin    |
+--------+--------------+--------+--------+
|      1 | Raj          | Ranchi | 123456 |
|      2 | Sona         | Delhi  | 652345 |
|      7 | kk's company | Delhi  | 345345 |
|      7 | kk's company | Delhi  | 345345 |
+--------+--------------+--------+--------+

mysql> SELECT * FROM student
    -> WHERE city = 'Delhi' OR (stu_id = 1  OR  name = 'Raj');
+--------+--------------+--------+--------+
| stu_id | name         | city   | pin    |
+--------+--------------+--------+--------+
|      1 | Raj          | Ranchi | 123456 |
|      2 | Sona         | Delhi  | 652345 |
|      7 | kk's company | Delhi  | 345345 |
|      7 | kk's company | Delhi  | 345345 |
+--------+--------------+--------+--------+


mysql> SELECT * FROM student
    -> WHERE city = 'Delhi' AND (stu_id = 1  AND  name = 'Raj');
Empty set (0.00 sec)

output
----	
	Error Vasthundi


mysql> SELECT * FROM student
    -> WHERE city = 'Delhi' AND (stu_id = 2  AND  name = 'Sona');
+--------+------+-------+--------+
| stu_id | name | city  | pin    |
+--------+------+-------+--------+
|      2 | Sona | Delhi | 652345 |
+--------+------+-------+--------+


IN Operator in SQL
====================
The IN operator allows you to specify multiple values in a WHERE clause.

	syntax:
		SELECT * FROM table_name
		WHERE column_name IN ('value1', 'value2',....);

	EX:
		SELECT * FROM new_tab
		WHERE name IN ('Anu','Sonu');




mysql> CREATE TABLE emp
    -> (
    -> emp_id INT(5),
    -> emp_name VARCHAR (50),
    -> dob DATE,
    -> dept TEXT,
    -> salary DEC,
    -> city VARCHAR (50),
    -> pin INT (20),
    -> email varchar
    -> );
Query OK, 0 rows affected, 2 warnings (2.01 sec)

mysql> DESC emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| emp_id   | int           | YES  |     | NULL    |       |
| emp_name | varchar(50)   | YES  |     | NULL    |       |
| dob      | date          | YES  |     | NULL    |       |
| dept     | text          | YES  |     | NULL    |       |
| salary   | decimal(10,0) | YES  |     | NULL    |       |
| city     | varchar(50)   | YES  |     | NULL    |       |
| pin      | int           | YES  |     | NULL    |       |
| email    | varchar       | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+


mysql> INSERT INTO emp(emp_id,emp_name,dob,dept,salary,city,pin,email)
    -> VALUES (101,'Ram','1990-01-01','IT',30000,'Delhi',800001,'ram@geekyshows.com'),
    -> (102,'Amit','1988-04-03','Research',45000,'Mumbai',800002,'amit@geekyshows.com'),
    -> (103,'Tanu','1990-01-01','Accountant',15000,'Delhi',800001,'tanu@geekyshows.com'),
    -> (104,'Sunil','1989-12-05','IT',30000,'Kolkata',800003,'sunil@geekyshows.com'),
    -> (105,'Sonam','1989-12-05','Executive',10000,'kolkata',800003,'sonam@geekyshows.com'),
    -> (106,'komal','1992-11-03','HR',35000,'Ranchi',800004,'komanl@geekyshows.com'),
    -> (107,'Vinay','1990-10-06','HR',35000,'kolkata',800003,'vinay@geekyshows.com'),
    -> (108,'Dev','1989-09-25','IT',30000,'Mumbai',800002,'dev@geekyshows.com'),
    -> (109,'Suhana','1990-07-15','IT',30000,'Ranchi',800004,'suhana@geekyshows.com'),
    -> (110,'Puja','1988-01-26','HR',35000,'Banglore',800005,'puja@geekyshows.com'),
    -> (111,'Raja','1992-11-03','Accountant',15000,'patna',800007,'raj@geekyshows.com'),
    -> (112,'jai','1990-01-18','Trainer',20000,'Chennai',800009,'jai@geekyshows.com'),
    -> (113,'Sonam','1990-01-18','Trainer',20000,'J&k',800010,'sonam@geekyshows.com'),
    -> (114,'Devit','1989-09-25','IT',30000,'Chennai',800009,'devit@geekyshows.com');
Query OK, 14 rows affected (0.21 sec)
Records: 14  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE city IN ('Delhi','Ranchi');
+--------+----------+------------+------------+--------+--------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city   | pin    | email                 |
+--------+----------+------------+------------+--------+--------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi  | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi  | 800001 | ram@geekyshows.com    |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi  | 800001 | tanu@geekyshows.com   |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi | 800004 | komanl@geekyshows.com |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi | 800004 | suhana@geekyshows.com |
+--------+----------+------------+------------+--------+--------+--------+-----------------------+


mysql> SELECT emp_id, emp_name  FROM emp
    -> WHERE city IN ('Delhi','Ranchi');
+--------+----------+
| emp_id | emp_name |
+--------+----------+
|    101 | Ram      |
|    101 | Ram      |
|    103 | Tanu     |
|    106 | komal    |
|    109 | Suhana   |
+--------+----------+

NOT IN operator in SQL
=======================

Syntax:
	SELECT *
	FROM table_name
	WHERE column_name NOT IN('value1','value2',....);

EX:
	SELECT *
	FROM new_tab
	WHERE name NOT IN ("Anu','Sonu');


mysql> SELECT * FROM emp
    -> WHERE city NOT IN ('Delhi','Ranchi');
+--------+----------+------------+------------+--------+----------+--------+----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                |
+--------+----------+------------+------------+--------+----------+--------+----------------------+
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com  |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com   |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com  |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com   |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com   |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com |
+--------+----------+------------+------------+--------+----------+--------+----------------------+


mysql> SELECT emp_id, emp_name  FROM emp
    -> WHERE city NOT IN ('Delhi','Ranchi');
+--------+----------+
| emp_id | emp_name |
+--------+----------+
|    102 | Amit     |
|    104 | Sunil    |
|    105 | Sonam    |
|    107 | Vinay    |
|    108 | Dev      |
|    110 | Puja     |
|    111 | Raja     |
|    112 | jai      |
|    113 | Sonam    |
|    114 | Devit    |
+--------+----------+

BETWEEN Number in SQL 
=======================
The BETWEEN operator selects values within a range. The  values can be
numbers,text, or dates.

1.Between Number
	syntax:
		SELECT * FROM table_name
		WHERE column_name BETWEEN value1 AND value2;

	EX:
		SELECT * FROM new_tab
		WHERE stu_id BETWEEN 6 AND 8 ;


mysql> SELECT * FROM emp
    -> WHERE emp_id BETWEEN 105 AND 110;
+--------+----------+------------+-----------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept      | salary | city     | pin    | email                 |
+--------+----------+------------+-----------+--------+----------+--------+-----------------------+
|    105 | Sonam    | 1989-12-05 | Executive |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR        |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR        |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT        |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT        |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR        |  35000 | Banglore | 800005 | puja@geekyshows.com   |
+--------+----------+------------+-----------+--------+----------+--------+-----------------------+


mysql> SELECT emp_id, emp_name, city  FROM emp
    -> WHERE emp_id BETWEEN 105 AND 110;
+--------+----------+----------+
| emp_id | emp_name | city     |
+--------+----------+----------+
|    105 | Sonam    | kolkata  |
|    106 | komal    | Ranchi   |
|    107 | Vinay    | kolkata  |
|    108 | Dev      | Mumbai   |
|    109 | Suhana   | Ranchi   |
|    110 | Puja     | Banglore |
+--------+----------+----------+

 BETWEEN Text in SQL 
=====================

Syntax:
	SELECT * FROM table_name
	WHERE column_name
	BETWEEN 'value1' AND 'value2';

EX:
	SELECT * FROM new_tab
	WHERE name BETWEEN 'B' AND 'J';


mysql> SELECT * FROM emp
    -> WHERE emp_name BETWEEN 'A' AND 'S';
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE city BETWEEN 'B' AND 'k';
+--------+----------+------------+------------+--------+----------+--------+----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                |
+--------+----------+------------+------------+--------+----------+--------+----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com   |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com  |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com  |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com   |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com |
+--------+----------+------------+------------+--------+----------+--------+----------------------+

BETWEEN Date in SQL 
========================

Syntax:
	SELECT * FROM table_name
	WHERE column_name
	BETWEEN 'yyyy/mm/dd' AND 'yyyy/mm/dd';

EX:
	SELECT * FROM new_tab
	WHERE date
	BETWEEN '2000/01/04',AND '2001/02/14';


mysql> SELECT * FROM emp
    -> WHERE dob BETWEEN '1990-01-01' AND '1992-11-03';
+--------+----------+------------+------------+--------+---------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city    | pin    | email                 |
+--------+----------+------------+------------+--------+---------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi   | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi   | 800001 | ram@geekyshows.com    |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi   | 800001 | tanu@geekyshows.com   |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi  | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata | 800003 | vinay@geekyshows.com  |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi  | 800004 | suhana@geekyshows.com |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna   | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k     | 800010 | sonam@geekyshows.com  |
+--------+----------+------------+------------+--------+---------+--------+-----------------------+


 NOT BETWEEN Number in SQL
============================
To display the data which is not in the range.

	1.NOT BETWEEN Number
		syntax:
			SELECT * FROM table_name
			WHERE column_name
			NOT BETWEEN value1 AND value2;
		EX:
			SELECT * FROM Products
			WHERE stu_id
			NOT BETWEEN 3 AND 7;


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
|      8 | Rohit        | NULL    | 345787 |
+--------+--------------+---------+--------+

mysql> SELECT * FROM student
    -> WHERE stu_id NOT BETWEEN 4 AND 7;
+--------+-------+---------+--------+
| stu_id | name  | city    | pin    |
+--------+-------+---------+--------+
|      1 | Raj   | Ranchi  | 123456 |
|      2 | Sona  | Delhi   | 652345 |
|      3 | Anu   | kolkata | 879845 |
|      8 | Rohit | NULL    | 345787 |
+--------+-------+---------+--------+


NOT BETWEEN Text in SQL
======================
Syntax:
	SELECT * FROM table_name
	WHERE column_name	
	NOT BETWEEN 'value1', AND 'value2';

EX:
	SELECT * FROM new_tab
	WHERE name
	NOT BETWEEN 'B' AND 'J';


mysql> SELECT * FROM student
    -> WHERE name NOT BETWEEN 'A' AND 'k';
+--------+--------------+--------+--------+
| stu_id | name         | city   | pin    |
+--------+--------------+--------+--------+
|      1 | Raj          | Ranchi | 123456 |
|      2 | Sona         | Delhi  | 652345 |
|      4 | Sonu         | NULL   | 764839 |
|      5 | shubham      | HYD    | 542367 |
|      7 | kk's company | Delhi  | 345345 |
|      7 | kk's company | Delhi  | 345345 |
|      8 | Rohit        | NULL   | 345787 |
+--------+--------------+--------+--------+

NOT BETWEEN Date in SQL
=========================

NOT BETWEEN date

	syntax:
		SELECT * FROM table_name
		WHERE column_name
		NOT BETWEEN 'yyyy/mm/dd' AND 'yyyy/mm/dd';

	EX:
		SELECT * FROM new_tab
		WHERE date
		NOT BETWEEN '2000/01/01' AND '2001/12/31';



mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE dob NOT BETWEEN '1990-01-01' AND '1992-11-03';
+--------+----------+------------+-----------+--------+----------+--------+----------------------+
| emp_id | emp_name | dob        | dept      | salary | city     | pin    | email                |
+--------+----------+------------+-----------+--------+----------+--------+----------------------+
|    102 | Amit     | 1988-04-03 | Research  |  45000 | Mumbai   | 800002 | amit@geekyshows.com  |
|    104 | Sunil    | 1989-12-05 | IT        |  30000 | Kolkata  | 800003 | sunil@geekyshows.com |
|    105 | Sonam    | 1989-12-05 | Executive |  10000 | kolkata  | 800003 | sonam@geekyshows.com |
|    108 | Dev      | 1989-09-25 | IT        |  30000 | Mumbai   | 800002 | dev@geekyshows.com   |
|    110 | Puja     | 1988-01-26 | HR        |  35000 | Banglore | 800005 | puja@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT        |  30000 | Chennai  | 800009 | devit@geekyshows.com |
+--------+----------+------------+-----------+--------+----------+--------+----------------------+


BETWEEN with IN SQL
======================
Syntax:
	SELECT * FROM table_name
	WHERE (column_name BETWEEN value1 AND value2)
	AND column_name IN (value1, value2);

EX:
	SELECT * FROM emp
	WHERE (salary BETWEEN 25000 AND 50000)
	AND dept IN ('IT','HR');


mysql> SELECT * FROM emp
    -> WHERE (salary BETWEEN 20000 AND 45000) AND dept IN('IT','HR');
+--------+----------+------------+------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept | salary | city     | pin    | email                 |
+--------+----------+------------+------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT   |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT   |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    104 | Sunil    | 1989-12-05 | IT   |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR   |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR   |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT   |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT   |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR   |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    114 | Devit    | 1989-09-25 | IT   |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------+--------+----------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE (salary BETWEEN 20000 AND 45000) OR dept IN('IT','HR');
+--------+----------+------------+----------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept     | salary | city     | pin    | email                 |
+--------+----------+------------+----------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT       |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT       |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT       |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR       |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR       |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT       |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT       |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR       |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    112 | jai      | 1990-01-18 | Trainer  |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer  |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT       |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+----------+--------+----------+--------+-----------------------+


BETWEEN with NOT IN SQL 
===========================
Syntax:
	SELECT * FROM table_name
	WHERE (column_name BETWEEN value1 AND value2)
	AND NOT column_name IN (value1,value2);

EX:
	SELECT * FROM emp
	WHERE (salary BETWEEN 25000 AND 50000)
	AND NOT dept IN ('IT','HR');


mysql> SELECT * FROM emp
    -> WHERE (salary BETWEEN 20000 AND 45000) AND NOT dept IN('IT','HR');
+--------+----------+------------+----------+--------+---------+--------+----------------------+
| emp_id | emp_name | dob        | dept     | salary | city    | pin    | email                |
+--------+----------+------------+----------+--------+---------+--------+----------------------+
|    102 | Amit     | 1988-04-03 | Research |  45000 | Mumbai  | 800002 | amit@geekyshows.com  |
|    112 | jai      | 1990-01-18 | Trainer  |  20000 | Chennai | 800009 | jai@geekyshows.com   |
|    113 | Sonam    | 1990-01-18 | Trainer  |  20000 | J&k     | 800010 | sonam@geekyshows.com |
+--------+----------+------------+----------+--------+---------+--------+----------------------+

LIKE with % WildCard in SQL
===========================

The LIKE operator is used to serach for a specified pattern in a  column.
	Syntax:
		SELECT * 
		FROM table_name
		WHERE column_name LIKE 'pattern';

	EX:
		SELECT * 
		FROM new_tab
		WHERE name LIKE '%nu';

Note: LIKE is the keyword

	Wildcards
	---------
Wildcards are used ro search for data within a table.These characters are used with the LIKE
Operator.

	Wildcard			Description
	---------			-------------
	%				Zero or more characters
	_				One single character
	[charlist]			Sets and ranges of characters to match
	[^charlist] or [!charlist]	Matches only a character NOT specified within the
					brackets


1. % - Zero or more characters

	'Geek%' - All stating with geek EX:Geekyshows
	'%shows'-All ending with shows EX:Geekyshows
	'%sh%' - All containing with sh.EX: Geekyshows

2. _ One Single character
	'show_' - Starting with show then any character. EX:- shows
	'_eek' - any character then eek. EX:-  geek
	'G_e_k' - G then any character,Then e then any character ,Then k EX:- Geek

mysql> USE my_db;
Database changed
mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE emp_name LIKE 'su%';
+--------+----------+------------+------+--------+---------+--------+-----------------------+
| emp_id | emp_name | dob        | dept | salary | city    | pin    | email                 |
+--------+----------+------------+------+--------+---------+--------+-----------------------+
|    104 | Sunil    | 1989-12-05 | IT   |  30000 | Kolkata | 800003 | sunil@geekyshows.com  |
|    109 | Suhana   | 1990-07-15 | IT   |  30000 | Ranchi  | 800004 | suhana@geekyshows.com |
+--------+----------+------------+------+--------+---------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE emp_name LIKE 's%';
+--------+----------+------------+-----------+--------+---------+--------+-----------------------+
| emp_id | emp_name | dob        | dept      | salary | city    | pin    | email                 |
+--------+----------+------------+-----------+--------+---------+--------+-----------------------+
|    104 | Sunil    | 1989-12-05 | IT        |  30000 | Kolkata | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive |  10000 | kolkata | 800003 | sonam@geekyshows.com  |
|    109 | Suhana   | 1990-07-15 | IT        |  30000 | Ranchi  | 800004 | suhana@geekyshows.com |
|    113 | Sonam    | 1990-01-18 | Trainer   |  20000 | J&k     | 800010 | sonam@geekyshows.com  |
+--------+----------+------------+-----------+--------+---------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE emp_name LIKE '%ja';
+--------+----------+------------+------------+--------+----------+--------+---------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email               |
+--------+----------+------------+------------+--------+----------+--------+---------------------+
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+---------------------+


mysql> SELECT * FROM emp
    -> WHERE city LIKE '%l%';
+--------+----------+------------+------------+--------+----------+--------+----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                |
+--------+----------+------------+------------+--------+----------+--------+----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com   |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com  |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+----------------------+


mysql> SELECT * FROM emp
    -> WHERE city LIKE '%el%';
+--------+----------+------------+------------+--------+-------+--------+---------------------+
| emp_id | emp_name | dob        | dept       | salary | city  | pin    | email               |
+--------+----------+------------+------------+--------+-------+--------+---------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi | 800001 | ram@geekyshows.com  |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi | 800001 | ram@geekyshows.com  |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi | 800001 | tanu@geekyshows.com |
+--------+----------+------------+------------+--------+-------+--------+---------------------+


 LIKE with _ Wildcard in SQL
===========================

mysql> SELECT * FROM emp
    -> WHERE emp_name  LIKE '_am';
+--------+----------+------------+------+--------+-------+--------+--------------------+
| emp_id | emp_name | dob        | dept | salary | city  | pin    | email              |
+--------+----------+------------+------+--------+-------+--------+--------------------+
|    101 | Ram      | 1990-01-01 | IT   |  30000 | Delhi | 800001 | ram@geekyshows.com |
|    101 | Ram      | 1990-01-01 | IT   |  30000 | Delhi | 800001 | ram@geekyshows.com |
+--------+----------+------------+------+--------+-------+--------+--------------------+


mysql> SELECT * FROM emp
    -> WHERE emp_name  LIKE 'raj_';
+--------+----------+------------+------------+--------+-------+--------+--------------------+
| emp_id | emp_name | dob        | dept       | salary | city  | pin    | email              |
+--------+----------+------------+------------+--------+-------+--------+--------------------+
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna | 800007 | raj@geekyshows.com |
+--------+----------+------------+------------+--------+-------+--------+--------------------+

mysql> SELECT * FROM emp
    -> WHERE emp_name  LIKE 'k_m__';
+--------+----------+------------+------+--------+--------+--------+-----------------------+
| emp_id | emp_name | dob        | dept | salary | city   | pin    | email                 |
+--------+----------+------------+------+--------+--------+--------+-----------------------+
|    106 | komal    | 1992-11-03 | HR   |  35000 | Ranchi | 800004 | komanl@geekyshows.com |
+--------+----------+------------+------+--------+--------+--------+-----------------------+


LIKE with [charlist] Wildcard in SQL
=================================

	[charlist]			
	[^charlist] or [!charlist]

Note: This Two Doesn't support SQL



NOT LIKE in SQL
==================
	Syntax:
		SELECT *
		FROM table_name
		WHERE column_name NOT LIKE 'pattern';
	
	EX:
		SELECT * 
		FROM new_tab
		WHERE name NOT LIKE '%nu';

mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+


mysql> SELECT * FROM emp
    -> WHERE emp_name  NOT LIKE '%nu';
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+


ORDER BY decending order in SQL
================================
This is used to start the records.
	ASC -It sorts in ascending order (by default)

	DESC - It sorts in descending order.

1. Sort in descending order
	Syntax:
		SELECT * FROM table_name
		ORDER BY column_name DESC;

EX:
	SELECT * FROM emp
	ORDER BY emp_name DESC;


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
|      8 | Rohit        | NULL    | 345787 |
+--------+--------------+---------+--------+


mysql> SELECT * FROM student
    -> ORDER BY name DESC;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      4 | Sonu         | NULL    | 764839 |
|      2 | Sona         | Delhi   | 652345 |
|      5 | shubham      | HYD     | 542367 |
|      8 | Rohit        | NULL    | 345787 |
|      1 | Raj          | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
|      3 | Anu          | kolkata | 879845 |
|      6 | Amit         | Ranchi  | 123456 |
+--------+--------------+---------+--------+

		
mysql> SELECT * FROM student
    -> ORDER BY stu_id DESC;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      8 | Rohit        | NULL    | 345787 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
|      6 | Amit         | Ranchi  | 123456 |
|      5 | shubham      | HYD     | 542367 |
|      4 | Sonu         | NULL    | 764839 |
|      3 | Anu          | kolkata | 879845 |
|      2 | Sona         | Delhi   | 652345 |
|      1 | Raj          | Ranchi  | 123456 |
+--------+--------------+---------+--------+


ORDER BY Asecending order in SQL
===============================
 Sort in ascending order

Syntax:
	SELECT * FROM table_name
	ORDER BY column_name ASC; (ASC is optional)

EX:
	SELECT * FROM emp
	ORDER BY emp_name;



mysql> SELECT * FROM student
    -> ORDER BY stu_id DESC;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      8 | Rohit        | NULL    | 345787 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
|      6 | Amit         | Ranchi  | 123456 |
|      5 | shubham      | HYD     | 542367 |
|      4 | Sonu         | NULL    | 764839 |
|      3 | Anu          | kolkata | 879845 |
|      2 | Sona         | Delhi   | 652345 |
|      1 | Raj          | Ranchi  | 123456 |
+--------+--------------+---------+--------+


mysql> SELECT * FROM student
    -> ORDER BY stu_id ASC;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
|      8 | Rohit        | NULL    | 345787 |
+--------+--------------+---------+--------+


NOT NULL in SQL 
===============
BY default a tables column can hold NULL values.
The NOT NULL constraint enforces a field to always contain a value.
This means that you cannot insert a new record, or update a record without
adding a value to this field.

EX:
	CREATE TABLE student
	(
	Name varchar (30),
	Roll integer (5),
	Mobile_no integer (10) NOT NULL
	);



mysql> CREATE TABLE n_tab
    -> (
    -> id int (5) NOT NULL,
    -> name varchar (30),
    -> city varchar (50)
    -> );
Query OK, 0 rows affected, 1 warning (4.37 sec)

mysql> DESC n_tab;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int         | NO   |     | NULL    |       |
| name  | varchar(30) | YES  |     | NULL    |       |
| city  | varchar(50) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+


mysql> INSERT INTO n_tab (id, name, city)
    -> VALUES (1, 'Sumit', 'Patna');

mysql> SELECT * FROM n_tab;
+----+-------+-------+
| id | name  | city  |
+----+-------+-------+
|  1 | Sumit | Patna |
+----+-------+-------+


mysql> INSERT INTO n_tab ( name, city)
    -> VALUES ('Ramesh', 'Ranchi');
ERROR 1364 (HY000): Field 'id' doesn't have a default value


Note: Actually ga ikkada yedaina column ni vadili petti rasthe 'by default ga NULL apply auvthundi" record
anedi enter auvthundi...ala enter kakunda Ikkada yemjarigindi ante Table create chesetappudu 
manamu 'id' lo NOT NULL use cheshamu.Ala rayadam valla 'id' column ni vadili petti rasthe 
database table lo record anedi enter kadu.


UNIQUE KEY in SQL 
===============

The UNIQUE constraint uniquely identifies each record in a database table.
There can be many UNIQUE  Constraints per table. A UNIQUE KEY  column can
contain NULL values.

	CREATE TABLE student
	(
	Name varchar (30),
	Roll integer (5),
	Mobile_no integer (10) UNIQUE KEY 
	);


mysql> CREATE TABLE u_tab
    -> (
    -> stu_id int (5) UNIQUE KEY,
    -> name varchar (30),
    -> roll int (5) UNIQUE KEY,
    -> city varchar (40)
    -> );

mysql> DESC u_tab;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| stu_id | int         | YES  | UNI | NULL    |       |
| name   | varchar(30) | YES  |     | NULL    |       |
| roll   | int         | YES  | UNI | NULL    |       |
| city   | varchar(40) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

mysql> INSERT INTO u_tab (stu_id, name, roll, city)
    -> VALUES (1, 'Ram', 101, 'Delhi');

mysql> SELECT * FROM u_tab;
+--------+------+------+-------+
| stu_id | name | roll | city  |
+--------+------+------+-------+
|      1 | Ram  |  101 | Delhi |
+--------+------+------+-------+


mysql> INSERT INTO u_tab (name, roll, city)
    -> VALUES ('Sam', 102, 'Delhi');

mysql> SELECT * FROM  u_tab;
+--------+------+------+-------+
| stu_id | name | roll | city  |
+--------+------+------+-------+
|      1 | Ram  |  101 | Delhi |
|   NULL | Sam  |  102 | Delhi |
+--------+------+------+-------+


mysql> INSERT INTO u_tab (stu_id, name, roll, city)
    -> VALUES (1, 'Raj', 103, 'Ranchi');
ERROR 1062 (23000): Duplicate entry '1' for key 'u_tab.stu_id'


mysql> INSERT INTO u_tab (stu_id, name, roll, city)
    -> VALUES (2, 'Raj', 101, 'Ranchi');
ERROR 1062 (23000): Duplicate entry '101' for key 'u_tab.roll'



Note:
	Manamu Table crate chesetappudu yee column ki aithe UNIQUE KEY Echamoo
haa cloumn lo same data ni thisukodu...Duplicate's ni allow cheyadu.. NULL ni
allow chesthundi malli.



mysql> INSERT INTO u_tab (name, roll, city)
    -> VALUES ('Rani', 103, 'Ranchi');

mysql> select * from u_tab;
+--------+------+------+--------+
| stu_id | name | roll | city   |
+--------+------+------+--------+
|      1 | Ram  |  101 | Delhi  |
|   NULL | Sam  |  102 | Delhi  |
|   NULL | Rani |  103 | Ranchi |
+--------+------+------+--------+


PRIMARY KEY in SQL
===================

The  PRIMARY KEY  constraint uniquely identifies each record in a database table.
Primary keys must contain UNIQUE values. A "Primary Key column cannot contain NULL values".
Most tables should have  a Primary key, and "each table can have only ONE primary key".

CREATE TABLE student
(
Name varchar (30),
Roll integer (5) NOT NULL PRIMARY KEY,
Mobile_no,integer (10)
);

(OR)

CREATE TABLE student
(
Name varchar (30),
Roll integer (5) NOT NULL,
Mobile_no integer (10),
PRIMARY KEY (Roll)
);

mysql> CREATE TABLE p_tab
    -> (
    -> id int (5) NOT NULL PRIMARY KEY,
    -> name varchar (40),
    -> roll int (5) UNIQUE KEY,
    -> city varchar (50)
    -> );


mysql> DESC p_tab;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int         | NO   | PRI | NULL    |       |
| name  | varchar(40) | YES  |     | NULL    |       |
| roll  | int         | YES  | UNI | NULL    |       |
| city  | varchar(50) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

mysql> INSERT INTO p_tab (id, name, roll, city)
    -> VALUES (1, 'Rahul', 101, 'Delhi');

mysql> SELECT * FROM p_tab;
+----+-------+------+-------+
| id | name  | roll | city  |
+----+-------+------+-------+
|  1 | Rahul |  101 | Delhi |
+----+-------+------+-------+

		UNIQUE KEY Error (Duplicate not allowed)
		--------------
mysql> INSERT INTO p_tab (id, name, roll, city)
    -> VALUES (2, 'Rani', 101, 'kolkata');
ERROR 1062 (23000): Duplicate entry '101' for key 'p_tab.roll'

	Primary Key Error also ( Duplicate not allowed, it is working with same UNIQUE KEY laga )
	------------------------

mysql> INSERT INTO p_tab (id, name, roll, city)
    -> VALUES (1, 'Rajesh', 102, 'kerala');
ERROR 1062 (23000): Duplicate entry '1' for key 'p_tab.PRIMARY'

		NULL
		----
mysql> INSERT INTO p_tab (name, roll, city)
    -> VALUES ('Sonu',103,'NDK');
ERROR 1364 (HY000): Field 'id' doesn't have a default value
		
Note: Actually ga ikkada yedaina column ni vadili petti rasthe 'by default ga NULL apply auvthundi" record
anedi enter auvthundi...ala enter kakunda Ikkada yemjarigindi ante Table create chesetappudu 
manamu 'id' lo NOT NULL use cheshamu.Ala rayadam valla 'id' column ni vadili petti rasthe 
database table lo record anedi enter kadu.


AUTO INCREMENT in SQL 
======================

Auto Increment is used to generate an unique number when a new record is inserted
into a table. a AUTO INCREMENT, and "each table can have only ONE AUTO INCREMENT"
AUTO INCREMENT ignore the NULL value
	
	Syntax:
		CREATE TABLE table_name	
		(
		Column_name int NOT NULL AUTO_INCREMENT,
		Column_name1 varchar (50) NOT NULL,
		Column_name2 varchar (50),
		PRIMARY KEY (column_name)
		);


	EX:
		CREATE TABLE emp;
		(
		Emp_id int NOT NULL AUTO_INCREMENT,
		Emp_name varchar (50) NOT NULL,
		City varchar (50),
		PRIMARY KEY (Emp_id)
		);

	
	1)INSERT INTO emp (emp_name,city)
	  VALUES ('Subham','Delhi'),
	  ('Ankit','Mumbai');

	2)INSERT INTO emp(emp_id,emp_name,city)
	  VALUES (NULL,'Subham','Delhi'),
	  (NULL, 'Ankit','Mumbai');


	3)INSERT INTO emp(emp_id, emp_name ,city)
	  VALUES (NULL,'Subham','Delhi'),
	  (1, 'Ankit','Mumbai');

		

mysql> CREATE TABLE ap_tab
    -> (
    -> id int NOT NULL AUTO_INCREMENT,
    -> name varchar (50),
    -> city varchar (60),
    -> PRIMARY KEY (id)
    -> );
Query OK, 0 rows affected (2.64 sec)

mysql> DESC ap_tab;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(50) | YES  |     | NULL    |                |
| city  | varchar(60) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+


mysql> INSERT INTO ap_tab(name,city)
    -> VALUES ('Raj','Delhi');

mysql> SELECT * FROM ap_tab;
+----+------+-------+
| id | name | city  |
+----+------+-------+
|  1 | Raj  | Delhi |
+----+------+-------+

mysql> INSERT INTO ap_tab(name,city)
    -> VALUES ('Rani','kolkata');

mysql> SELECT * FROM ap_tab;
+----+------+---------+
| id | name | city    |
+----+------+---------+
|  1 | Raj  | Delhi   |
|  2 | Rani | kolkata |
+----+------+---------+


mysql> INSERT INTO ap_tab(id, name,city)
    -> VALUES (NULL,'Rahul','HYD');

mysql> SELECT * FROM ap_tab;
+----+-------+---------+
| id | name  | city    |
+----+-------+---------+
|  1 | Raj   | Delhi   |
|  2 | Rani  | kolkata |
|  3 | Rahul | HYD     |
+----+-------+---------+


mysql> INSERT INTO ap_tab(id, name,city)
    -> VALUES (NULL,'Raja','Ranchi'),
    -> (2,'Sam','Patna');
ERROR 1062 (23000): Duplicate entry '2' for key 'ap_tab.PRIMARY'


mysql> INSERT INTO ap_tab(id, name,city)
    -> VALUES (34,'Rakesh','Ranchi');

mysql> SELECT * FROM ap_tab;
+----+--------+---------+
| id | name   | city    |
+----+--------+---------+
|  1 | Raj    | Delhi   |
|  2 | Rani   | kolkata |
|  3 | Rahul  | HYD     |
| 34 | Rakesh | Ranchi  |
+----+--------+---------+

Note:34 anedi manuvall ga enter cheshanu,Auto_increment jaragaledu.3 tharuvatha 4 ravali kada..
Manuwall ga enter chesthe ela vasthundi..

mysql> INSERT INTO ap_tab(name,city)
    -> VALUES ('Rak','Ranchi');

mysql> SELECT * FROM ap_tab;
+----+--------+---------+
| id | name   | city    |
+----+--------+---------+
|  1 | Raj    | Delhi   |
|  2 | Rani   | kolkata |
|  3 | Rahul  | HYD     |
| 34 | Rakesh | Ranchi  |
| 35 | Rak    | Ranchi  |
+----+--------+---------+

NOte: id column ni observe cheai...



Starting AUTO INCREMENT with a particular Number in SQL
================================================

mysql> CREATE TABLE k_tab
    -> (
    -> id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> name varchar (50)
    -> );

mysql> DESC k_tab;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(50) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+

mysql> ALTER TABLE k_tab AUTO_INCREMENT = 10;

mysql> INSERT INTO k_tab(name)
    -> VALUES ('Ram'),
    -> ('Murali');


mysql> SELECT * FROM k_tab;
+----+--------+
| id | name   |
+----+--------+
| 10 | Ram    |
| 11 | Murali |
+----+--------+



Alias(Nik name) in SQL
===============
Aliases are used to 'temporarily' rename a table name or a column name.
	FOR TABLE:
	Syntax:
		SELECT column_name FROM table_name AS alias_name;	
	EX:
		SELECT name FROM student AS widyarthi;

	FOR COLUMN:
	Syntax:
		SELECT column_name AS alias_name FROM table_name;

	EX:
		SELECT name AS student_name FROM student;
		SELECT name student_name FROM student; -->(AS is optional)
		SELECT name AS "Student Name" FROM student;


mysql> SELECT * FROM student;
+--------+--------------+---------+--------+
| stu_id | name         | city    | pin    |
+--------+--------------+---------+--------+
|      1 | Raj          | Ranchi  | 123456 |
|      2 | Sona         | Delhi   | 652345 |
|      3 | Anu          | kolkata | 879845 |
|      4 | Sonu         | NULL    | 764839 |
|      5 | shubham      | HYD     | 542367 |
|      6 | Amit         | Ranchi  | 123456 |
|      7 | kk's company | Delhi   | 345345 |
|      7 | kk's company | Delhi   | 345345 |
|      8 | Rohit        | NULL    | 345787 |
+--------+--------------+---------+--------+

mysql> SELECT name AS Student_Name FROM student;
+--------------+
| Student_Name |
+--------------+
| Raj          |
| Sona         |
| Anu          |
| Sonu         |
| shubham      |
| Amit         |
| kk's company |
| kk's company |
| Rohit        |
+--------------+

mysql> SELECT pin pincode FROM student;
+---------+
| pincode |
+---------+
|  123456 |
|  652345 |
|  879845 |
|  764839 |
|  542367 |
|  123456 |
|  345345 |
|  345345 |
|  345787 |
+---------+

mysql> SELECT name "Student Name" FROM student;
+--------------+
| Student Name |
+--------------+
| Raj          |
| Sona         |
| Anu          |
| Sonu         |
| shubham      |
| Amit         |
| kk's company |
| kk's company |
| Rohit        |
+--------------+

Arithmetic Operators in SQL
========================

* / + -

Syntax:
	SELECT column_name,column_name Operator value FROM table_name;

EX:
	SELECT name,cost,cost+100 FROM item_tab;
	SELECT name,cost,cost+100 AS "New Cost" FROM item_tab;



mysql> CREATE TABLE stu
    -> (
    -> stid int(5),
    -> name varchar (50),
    -> city varchar(50),
    -> mark int,
    -> result TEXT
    -> );

mysql> DESC stu;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| stid   | int         | YES  |     | NULL    |       |
| name   | varchar(50) | YES  |     | NULL    |       |
| city   | varchar(50) | YES  |     | NULL    |       |
| mark   | int         | YES  |     | NULL    |       |
| result | text        | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+	


mysql> INSERT INTO stu(stid,name,city,mark,result)
    -> VALUES(1,'Rahul','Delhi',300,'1st'),
    -> (2,'Rani','Chennai',250,'2nd'),
    -> (3,'Soni','Ranchi',320,'1st'),
    -> (4,'Jai','Hyd',255,'2nd'),
    -> (5,'rock','mumbai',150,'3rd'),
    -> (6,'Sonam','Patna',145,'Fail');

mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | 1st    |
|    2 | Rani  | Chennai |  250 | 2nd    |
|    3 | Soni  | Ranchi  |  320 | 1st    |
|    4 | Jai   | Hyd     |  255 | 2nd    |
|    5 | rock  | mumbai  |  150 | 3rd    |
|    6 | Sonam | Patna   |  145 | Fail   |
+------+-------+---------+------+--------+
	
		
mysql> SELECT stid, name, mark, mark+100 FROM stu;
+------+-------+------+----------+
| stid | name  | mark | mark+100 |
+------+-------+------+----------+
|    1 | Rahul |  300 |      400 |
|    2 | Rani  |  250 |      350 |
|    3 | Soni  |  320 |      420 |
|    4 | Jai   |  255 |      355 |
|    5 | rock  |  150 |      250 |
|    6 | Sonam |  145 |      245 |
+------+-------+------+----------+


mysql> SELECT stid, name, mark, mark+100 AS "New Marks" FROM stu;
+------+-------+------+-----------+
| stid | name  | mark | New Marks |
+------+-------+------+-----------+
|    1 | Rahul |  300 |       400 |
|    2 | Rani  |  250 |       350 |
|    3 | Soni  |  320 |       420 |
|    4 | Jai   |  255 |       355 |
|    5 | rock  |  150 |       250 |
|    6 | Sonam |  145 |       245 |
+------+-------+------+-----------+

mysql> SELECT stid, name, mark, mark+stid AS "New Marks" FROM stu;
+------+-------+------+-----------+
| stid | name  | mark | New Marks |
+------+-------+------+-----------+
|    1 | Rahul |  300 |       301 |
|    2 | Rani  |  250 |       252 |
|    3 | Soni  |  320 |       323 |
|    4 | Jai   |  255 |       259 |
|    5 | rock  |  150 |       155 |
|    6 | Sonam |  145 |       151 |
+------+-------+------+-----------+


SELECT DISTINCT in SQL
======================

The SELECT DISTINCT statement is used to display only distinct(different)
values.(Duplicate's ni thisivesi chupisthundi.)

Syntax:
	SELECT DISTINCT column_name FROM table_name;

EX:
	SELECT DISTINCT name FROM student;


mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+

mysql> SELECT DISTINCT emp_name FROM emp;
+----------+
| emp_name |
+----------+
| Ram      |
| Amit     |
| Tanu     |
| Sunil    |
| Sonam    |
| komal    |
| Vinay    |
| Dev      |
| Suhana   |
| Puja     |
| Raja     |
| jai      |
| Devit    |
+----------+

mysql> SELECT DISTINCT dept FROM emp;
+------------+
| dept       |
+------------+
| IT         |
| Research   |
| Accountant |
| Executive  |
| HR         |
| Trainer    |
+------------+

ALTER TABLE for adding one column without constraints in SQL 
=================================================
This command is used to Add/Change/Modify/Drop existing structure of the table.
	. ADD Column
	. Enable/Disable Constraints
	. Change Column
	. Modify Column
	. Drop Column

ADD Column - When a new column is to be added to  the table structure without 
constraints.

Syntax:
	ALTER TABLE table_name
	ADD COLUMN column_name datatype (size);

EX:
	ALTER TABLE my_tab
	ADD COLUMN stu_id integer (5);

Note:
	Some RDBMS doesn't support ADD COLUMN


mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | 1st    |
|    2 | Rani  | Chennai |  250 | 2nd    |
|    3 | Soni  | Ranchi  |  320 | 1st    |
|    4 | Jai   | Hyd     |  255 | 2nd    |
|    5 | rock  | mumbai  |  150 | 3rd    |
|    6 | Sonam | Patna   |  145 | Fail   |
+------+-------+---------+------+--------+


mysql> ALTER TABLE stu
    -> ADD COLUMN m_no int (11);

mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+------+
| stid | name  | city    | mark | result | m_no |
+------+-------+---------+------+--------+------+
|    1 | Rahul | Delhi   |  300 | 1st    | NULL |
|    2 | Rani  | Chennai |  250 | 2nd    | NULL |
|    3 | Soni  | Ranchi  |  320 | 1st    | NULL |
|    4 | Jai   | Hyd     |  255 | 2nd    | NULL |
|    5 | rock  | mumbai  |  150 | 3rd    | NULL |
|    6 | Sonam | Patna   |  145 | Fail   | NULL |
+------+-------+---------+------+--------+------+
	

ALTER TABLE for adding multiple columns without constraints in SQL 
===========================================

Syntax:
	ALTER TABLE table_name
	ADD COLUMN column_name datatype (size),
	ADD COLUMN column_name datatype (size);

EX:
	ALTER TABLE my_tab
	ADD COLUMN email varchar (50),
	ADD COLUMN pin int (8);



mysql> ALTER TABLE stu
    -> ADD COLUMN email varchar (50),
    -> ADD COLUMN pin int (8);

mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+------+-------+------+
| stid | name  | city    | mark | result | m_no | email | pin  |
+------+-------+---------+------+--------+------+-------+------+
|    1 | Rahul | Delhi   |  300 | 1st    | NULL | NULL  | NULL |
|    2 | Rani  | Chennai |  250 | 2nd    | NULL | NULL  | NULL |
|    3 | Soni  | Ranchi  |  320 | 1st    | NULL | NULL  | NULL |
|    4 | Jai   | Hyd     |  255 | 2nd    | NULL | NULL  | NULL |
|    5 | rock  | mumbai  |  150 | 3rd    | NULL | NULL  | NULL |
|    6 | Sonam | Patna   |  145 | Fail   | NULL | NULL  | NULL |
+------+-------+---------+------+--------+------+-------+------+


ALTER TABLE for Adding Column by Position without constraints in SQL
==================================================

ADD COLUMN by Position
	. Last (by default)
	. First
	. After

Syntax:
	ALTER TABLE table_name
	ADD COLUMN column_name datatype (size) FIRST;

EX:
	ALTER TABLE my_tab
	ADD COLUMN city varchar (50) FIRST;



mysql> ALTER TABLE stu
    -> ADD COLUMN roll int (5) FIRST;

mysql> SELECT * FROM stu;
+------+------+-------+---------+------+--------+------+-------+------+
| roll | stid | name  | city    | mark | result | m_no | email | pin  |
+------+------+-------+---------+------+--------+------+-------+------+
| NULL |    1 | Rahul | Delhi   |  300 | 1st    | NULL | NULL  | NULL |
| NULL |    2 | Rani  | Chennai |  250 | 2nd    | NULL | NULL  | NULL |
| NULL |    3 | Soni  | Ranchi  |  320 | 1st    | NULL | NULL  | NULL |
| NULL |    4 | Jai   | Hyd     |  255 | 2nd    | NULL | NULL  | NULL |
| NULL |    5 | rock  | mumbai  |  150 | 3rd    | NULL | NULL  | NULL |
| NULL |    6 | Sonam | Patna   |  145 | Fail   | NULL | NULL  | NULL |
+------+------+-------+---------+------+--------+------+-------+------+	


syntax:
	ALTER TABLE table_name
	ADD COLUMN column_name datatype (size) AFTER column_name;

EX:
	ALTER TABLE my_tab
	ADD COLUMN L_name varchar (50) AFTER name;



mysql> ALTER TABLE stu
    -> ADD COLUMN L_name varchar (50) AFTER name;

mysql> SELECT * FROM stu;
+------+------+-------+--------+---------+------+--------+------+-------+------+
| roll | stid | name  | L_name | city    | mark | result | m_no | email | pin  |
+------+------+-------+--------+---------+------+--------+------+-------+------+
| NULL |    1 | Rahul | NULL   | Delhi   |  300 | 1st    | NULL | NULL  | NULL |
| NULL |    2 | Rani  | NULL   | Chennai |  250 | 2nd    | NULL | NULL  | NULL |
| NULL |    3 | Soni  | NULL   | Ranchi  |  320 | 1st    | NULL | NULL  | NULL |
| NULL |    4 | Jai   | NULL   | Hyd     |  255 | 2nd    | NULL | NULL  | NULL |
| NULL |    5 | rock  | NULL   | mumbai  |  150 | 3rd    | NULL | NULL  | NULL |
| NULL |    6 | Sonam | NULL   | Patna   |  145 | Fail   | NULL | NULL  | NULL |
+------+------+-------+--------+---------+------+--------+------+-------+------+


ALTER TABLE for Adding Column with constraints in SQL 
===============================================
Add column -When a new column is to be added to the table Structure with constraints.

	syntax:
		ALTER TABLE table_name
		ADD COLUMN column_name data_type (size) Constraint_name,
		ADD constraint_name column_name;

	EX:
		ALTER TABLE my_tab
		ADD COLUMN roll int (10) NOT NULL
		ADD PRIMARY KEY (roll);



mysql> CREATE TABLE items
    -> (
    -> name varchar (50)
    -> );
Query OK, 0 rows affected (1.48 sec)

mysql> DESC items;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| name  | varchar(50) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+


mysql> INSERT INTO items(name)
    -> VALUES ('Mobile'),
    -> ('Laptop'),
    -> ('TV'),
    -> ('PC'),
    -> ('Cam');

mysql> SELECT * FROM items;
+--------+
| name   |
+--------+
| Mobile |
| Laptop |
| TV     |
| PC     |
| Cam    |
+--------+ 


mysql> ALTER TABLE items
    -> ADD COLUMN item_no int (5) NOT NULL;

mysql> SELECT * FROM items;
+--------+---------+
| name   | item_no |
+--------+---------+
| Mobile |       0 |
| Laptop |       0 |
| TV     |       0 |
| PC     |       0 |
| Cam    |       0 |
+--------+---------+ 

mysql> ALTER TABLE items
    -> ADD COLUMN item_n int (5) NOT NULL AUTO_INCREMENT,
    -> ADD PRIMARY KEY (item_n);

mysql> SELECT * FROM items;
+--------+---------+--------+
| name   | item_no | item_n |
+--------+---------+--------+
| Mobile |       0 |      1 |
| Laptop |       0 |      2 |
| TV     |       0 |      3 |
| PC     |       0 |      4 |
| Cam    |       0 |      5 |
+--------+---------+--------+


ALTER TABLE for Adding Column by Position with constraints in SQL
===========================================

mysql> CREATE TABLE items
    -> (
    -> name varchar (50)
    -> );
Query OK, 0 rows affected (1.48 sec)

mysql> DESC items;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| name  | varchar(50) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+


mysql> INSERT INTO items(name)
    -> VALUES ('Mobile'),
    -> ('Laptop'),
    -> ('TV'),
    -> ('PC'),
    -> ('Cam');

mysql> SELECT * FROM items;
+--------+
| name   |
+--------+
| Mobile |
| Laptop |
| TV     |
| PC     |
| Cam    |
+--------+ 

mysql> ALTER TABLE item
    -> ADD COLUMN item_no int NOT NULL AUTO_INCREMENT FIRST,
    -> ADD PRIMARY KEY(item_no);

mysql>  SELECT * FROM item;
+---------+--------+
| item_no | name   |
+---------+--------+
|       1 | Mobile |
|       2 | Laptop |
|       3 | TV     |
|       4 | PC     |
|       5 | Cam    |
+---------+--------+


mysql> ALTER TABLE item
    -> ADD COLUMN seller_id int UNIQUE KEY AFTER item_no;

mysql> SELECT * FROM item;
+---------+-----------+--------+
| item_no | seller_id | name   |
+---------+-----------+--------+
|       1 |      NULL | Mobile |
|       2 |      NULL | Laptop |
|       3 |      NULL | TV     |
|       4 |      NULL | PC     |
|       5 |      NULL | Cam    |
+---------+-----------+--------+

mysql>  DESC item;
+-----------+-------------+------+-----+---------+----------------+
| Field     | Type        | Null | Key | Default | Extra          |
+-----------+-------------+------+-----+---------+----------------+
| item_no   | int         | NO   | PRI | NULL    | auto_increment |
| seller_id | int         | YES  | UNI | NULL    |                |
| name      | varchar(50) | YES  |     | NULL    |                |
+-----------+-------------+------+-----+---------+----------------+

ALTER TABLE for Adding Constraint in Column SQL
==========================================
When integrity constraints have to be  included.

	syntax:
		ALTER TABLE table_name
		ADD CONSTRAINT constraint_name column_name;

 	EX:
		ALTER TABLE my_tab
		ADD CONSTRAINT PRIMARY KEY (roll);



mysql> CREATE TABLE ite
    -> (
    -> seller_id int(11),
    -> name varchar (50)
    -> );
Query OK, 0 rows affected, 1 warning (0.79 sec)

mysql> DESC ite;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| seller_id | int         | YES  |     | NULL    |       |
| name      | varchar(50) | YES  |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+


mysql> INSERT INTO ite(name)
    -> VALUES('Mobile'),
    -> ('Laptop'),
    -> ('TV'),
    -> ('PC'),
    -> ('Cam');

mysql> SELECT * FROM ite;
+-----------+--------+
| seller_id | name   |
+-----------+--------+
|      NULL | Mobile |
|      NULL | Laptop |
|      NULL | TV     |
|      NULL | PC     |
|      NULL | Cam    |
+-----------+--------+


mysql> ALTER TABLE ite
    -> ADD CONSTRAINT UNIQUE KEY (seller_id);

mysql> SELECT * FROM ite;
+-----------+--------+
| seller_id | name   |
+-----------+--------+
|      NULL | Mobile |
|      NULL | Laptop |
|      NULL | TV     |
|      NULL | PC     |
|      NULL | Cam    |
+-----------+--------+
5 rows in set (0.10 sec)

mysql> DESC ite;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| seller_id | int         | YES  | UNI | NULL    |       |
| name      | varchar(50) | YES  |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+


Change Column Name and Its Data Type WIthout Constraints in SQL
====================================================
Change column -This is used to change name and data type of an existing column
		Without constraints:-

Syntax:
	ALTER TABLE table_name
	CHANGE COLUMN old_column_name new_column_name new_data_type (size);

EX:
	ALTER TABLE my_tab
	CHANGE COLUMN name Student varchar (5);



mysql> SELECT * FROM ite;
+-----------+--------+
| seller_id | name   |
+-----------+--------+
|      NULL | Mobile |
|      NULL | Laptop |
|      NULL | TV     |
|      NULL | PC     |
|      NULL | Cam    |
+-----------+--------+


mysql> ALTER TABLE ite
    -> CHANGE COLUMN name P_Name varchar (50);

mysql> SELECT * FROM ite;
+-----------+--------+
| seller_id | P_Name |
+-----------+--------+
|      NULL | Mobile |
|      NULL | Laptop |
|      NULL | TV     |
|      NULL | PC     |
|      NULL | Cam    |
+-----------+--------+


mysql> ALTER TABLE ite
    -> CHANGE COLUMN P_Name Pro_Name varchar (50);

mysql> SELECT * FROM ite;
+-----------+----------+
| seller_id | Pro_Name |
+-----------+----------+
|      NULL | Mobile   |
|      NULL | Laptop   |
|      NULL | TV       |
|      NULL | PC       |
|      NULL | Cam      |
+-----------+----------+
5 rows in set (0.03 sec)


Change more than one column Name(Multiple) and its data type without constraints in SQL
====================================================

Change more than one column

syntax:
	ALTER TABLE table_name
	CHANGE COLUMN old_column_name new_column_name new_data_type(size),
	CHANGE COLUMN old_column_name new_column_name new_data_type (size);

EX:
	ALTER TABLE my_tab
	CHANGE COLUMN name Student varchar (5),
	CHANGE COLUMN roll id int (5);


mysql> SELECT * FROM ite;
+-----------+----------+
| seller_id | Pro_Name |
+-----------+----------+
|      NULL | Mobile   |
|      NULL | Laptop   |
|      NULL | TV       |
|      NULL | PC       |
|      NULL | Cam      |
+-----------+----------+
5 rows in set (0.00 sec)


mysql> ALTER TABLE ite
    -> CHANGE COLUMN seller_id sale_id int (8),
    -> CHANGE COLUMN Pro_Name Product_name varchar (50);

mysql> SELECT * FROM ite;
+---------+--------------+
| sale_id | Product_name |
+---------+--------------+
|    NULL | Mobile       |
|    NULL | Laptop       |
|    NULL | TV           |
|    NULL | PC           |
|    NULL | Cam          |
+---------+--------------+

*******************************************************
CHANGE COLUMN name and its Data Type with constraint in SQL
===========================================

Change Column with Constraints:-

	syntax:
		ALTER TABLE table_name
		CHANGE COLUMN old_column_name new_column_name new_data_type (size) Constraint_name,
		ADD constraint_name (column_name);
	EX:
		ALTER TABLE my_tab
		CHANGE COLUMN roll id int (5) NOT NULL,
		ADD PRIMARY KEY(id);

 	

mysql> CREATE TABLE test
    -> (
    -> id int  UNIQUE KEY,
    -> name varchar (30)
    -> );

mysql> DESC test;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int         | YES  | UNI | NULL    |       |
| name  | varchar(30) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+


mysql> ALTER TABLE test
    -> CHANGE COLUMN id stu_id int (10) NOT NULL,
    -> ADD PRIMARY KEY (stu_id);

mysql> DESC test;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| stu_id | int         | NO   | PRI | NULL    |       |
| name   | varchar(30) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
****************please observe key column top to bottom******************

***************************
MODIFY COLUMN 'Data Type and Its Size with' or Without Constraint in SQL
===================================================

MODIY COLUMN-This is used to modify size of the  data type or the data type
itself of an existing column without changing column name.

	syntax:
		ALTER TABLE table_name
		MODIFY COLUMN column_name datatype (size);

	EX:
		ALTER TABLE my_tab
		MODIFY COLUMN roll integer (10);

mysql> DESC test;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| stu_id | int         | NO   | PRI | NULL    |       |
| name   | varchar(30) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

mysql> ALTER TABLE test
    -> MODIFY COLUMN name char (40);

mysql> DESC test;
+--------+----------+------+-----+---------+-------+
| Field  | Type     | Null | Key | Default | Extra |
+--------+----------+------+-----+---------+-------+
| stu_id | int      | NO   | PRI | NULL    |       |
| name   | char(40) | YES  |     | NULL    |       |
+--------+----------+------+-----+---------+-------+

mysql> ALTER TABLE test
    -> MODIFY COLUMN name char (40) NOT NULL;---->I am also change Constraint name 

mysql> DESC test;
+--------+----------+------+-----+---------+-------+
| Field  | Type     | Null | Key | Default | Extra |
+--------+----------+------+-----+---------+-------+
| stu_id | int      | NO   | PRI | NULL    |       |
| name   | char(40) | NO   |     | NULL    |       |
+--------+----------+------+-----+---------+-------+

************************************

DROP COLUMN with or without constraint in SQL
====================================
	When a column in a table need to delete


syntax:
	ALTER TABLE table_name
	DROP COLUMN column_name;

EX:
	ALTER TABLE my_tab
	DROP COLUMN roll;


mysql> DESC test;
+--------+----------+------+-----+---------+-------+
| Field  | Type     | Null | Key | Default | Extra |
+--------+----------+------+-----+---------+-------+
| stu_id | int      | NO   | PRI | NULL    |       |
| name   | char(40) | NO   |     | NULL    |       |
+--------+----------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> ALTER TABLE test
    -> DROP COLUMN name;

mysql> DESC test;
+--------+------+------+-----+---------+-------+
| Field  | Type | Null | Key | Default | Extra |
+--------+------+------+-----+---------+-------+
| stu_id | int  | NO   | PRI | NULL    |       |
+--------+------+------+-----+---------+-------+

	When removing constraint from a column.
	---------------------------------------
	Syntax:
		ALTER TABLE table_name
		DROP constraint_name column_name;

	Ex:
		ALTER TABLE my_tab
		DROP UNIQUE KEY (roll);


mysql> DESC test;
+--------+------+------+-----+---------+-------+
| Field  | Type | Null | Key | Default | Extra |
+--------+------+------+-----+---------+-------+
| stu_id | int  | NO   | PRI | NULL    |       |
+--------+------+------+-----+---------+-------+
1 row in set (0.19 sec)

mysql>
mysql>
mysql> ALTER TABLE test
    -> DROP PRIMARY KEY (stu_id);

output
-----
	ERROR vasthundi direct ga constraint_name delete cheyalemu.


DROP TABLE or Delete Table from database in SQL
=====================================

This command is used to delete/remove table from the database.

	syntax:
		DROP TABLE table_name;

	EX:
		DROP TABLE my_tab;


mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| ap_tab          |
| emp             |
| ite             |
| item            |
| items           |
| k_tab           |
| my_tab          |
| n_tab           |
| new_tab         |
| p_tab           |
| stu             |
| student         |
| test            |
| u_tab           |
+-----------------+
14 rows in set (0.12 sec)

mysql> DROP TABLE test;


mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| ap_tab          |
| emp             |
| ite             |
| item            |
| items           |
| k_tab           |
| my_tab          |
| n_tab           |
| new_tab         |
| p_tab           |
| stu             |
| student         |
| u_tab           |
+-----------------+


Delete Data of Table using TRUNCATE TABLE in SQL
=======================================
	When we only want to delete the data inside the table, and not the table itself.

	Syntax;
		TRUNCATE TABLE table_name;

	EX:
		TRUNCATE TABLE my_tab;


mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| ap_tab          |
| emp             |
| ite             |
| item            |
| items           |
| k_tab           |
| my_tab          |
| n_tab           |
| new_tab         |
| p_tab           |
| stu             |
| student         |
| u_tab           |
+-----------------+
13 rows in set (0.00 sec)

mysql> select * from p_tab;
+----+-------+------+-------+
| id | name  | roll | city  |
+----+-------+------+-------+
|  1 | Rahul |  101 | Delhi |
+----+-------+------+-------+
1 row in set (0.12 sec)

mysql> TRUNCATE TABLE p_tab;
Query OK, 0 rows affected (1.78 sec)

mysql> select * from p_tab;--->Table lo unde data matrame delete aindi 

mysql> DESC p_tab;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int         | NO   | PRI | NULL    |       |
| name  | varchar(40) | YES  |     | NULL    |       |
| roll  | int         | YES  | UNI | NULL    |       |
| city  | varchar(50) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+


Rename Table Name using 'RENAME TABLE' in SQL
========================================
	This command is used to rename one or more table

	syntax:
		RENAME TABLE old_table_name to new_table_name;

	EX;
		RENAME TABLE my_tab to your_tab;


mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| ap_tab          |
| emp             |
| ite             |
| item            |
| items           |
| k_tab           |
| my_tab          |
| n_tab           |
| new_tab         |
| p_tab           |
| stu             |
| student         |
| u_tab           |
+-----------------+

mysql> RENAME TABLE p_tab to pl_tab;

mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| ap_tab          |
| emp             |
| ite             |
| item            |
| items           |
| k_tab           |
| my_tab          |
| n_tab           |
| new_tab         |
| pl_tab          |
| stu             |
| student         |
| u_tab           |
+-----------------+

Alter Database using ALTER DATABASE in SQL
=================================

Not a importent video no 69
			

Delete Database using DROP DATABASE in SQL
===================================
The DROP DATABASE statement is used to delete a database.

	syntax:
		DROP DATABASE database_name;
	EX:
		DROP DATABASE db;


mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| murali             |
| my_db              |
| mysql              |
| pdb                |
| performance_schema |
+--------------------+
6 rows in set (0.20 sec)

mysql> DROP DATABASE murali;


mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| my_db              |
| mysql              |
| pdb                |
| performance_schema |
+--------------------+


SHOW COLUMNS(Field) in SQL
==================

It shows all the columns of table and their data type along with any
 other column specific details.It is just like DESC table_name.

Syntax:
	SHOW COLUMNS FROM table_name;

EX;
	SHOW COLUMNS FROM emp;


mysql> SHOW COLUMNS FROM student;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| stu_id | int         | YES  |     | NULL    |       |
| name   | varchar(50) | YES  |     | NULL    |       |
| city   | varchar(50) | YES  |     | NULL    |       |
| pin    | int         | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+


 SHOW CREATE DATABASE in SQL
===============================

It shows commands which you have written while creating your Database.

Syntax;
	SHOW CREATE DATABASE database_name;

EX;
	SHOW CREATE DATABASE my_db;


mysql> SHOW CREATE DATABASE my_db;-->ee command execute cheyagane 

create chesina database kanipisthundi..



SHOW CREATE TABLE in SQL	
==============================
It shows commands which you have written while creating your table.
	syntax:	
		SHOW CREATE TABLE table_name;

	EX:
		SHOW CREATE TABLE emp;


mysql> USE my_db;
Database changed

mysql> SHOW CREATE TABLE student;-->ee command execute cheyagane create chesina

table vasthundi.



Update Records in Table Part 1 in SQL
====================================

The UPDATE statement used to update existing records in a table

Syntax:
	UPDATE table_name
	SET column1 = value1,column2 = value2,.....
	WHERE some_column = some_value;

EX:
	UPDATE emp
	SET emp_name = 'Arjun', salary = 35000
	WHERE emp_id = 101;

Note: WHERE is necessary otherwise all records will be replace with given value

		
mysql> SELECT * FROM stu;
+------+------+-------+--------+---------+------+--------+------+-------+------+
| roll | stid | name  | L_name | city    | mark | result | m_no | email | pin  |
+------+------+-------+--------+---------+------+--------+------+-------+------+
| NULL |    1 | Rahul | NULL   | Delhi   |  300 | 1st    | NULL | NULL  | NULL |
| NULL |    2 | Rani  | NULL   | Chennai |  250 | 2nd    | NULL | NULL  | NULL |
| NULL |    3 | Soni  | NULL   | Ranchi  |  320 | 1st    | NULL | NULL  | NULL |
| NULL |    4 | Jai   | NULL   | Hyd     |  255 | 2nd    | NULL | NULL  | NULL |
| NULL |    5 | rock  | NULL   | mumbai  |  150 | 3rd    | NULL | NULL  | NULL |
| NULL |    6 | Sonam | NULL   | Patna   |  145 | Fail   | NULL | NULL  | NULL |
+------+------+-------+--------+---------+------+--------+------+-------+------+
6 rows in set (0.09 sec)

mysql> ALTER TABLE stu
    -> DROP COLUMN roll;

mysql> ALTER TABLE stu
    -> DROP COLUMN pin;

mysql> ALTER TABLE stu
    -> DROP COLUMN email;

mysql> SELECT * FROM stu;
+------+-------+--------+---------+------+--------+------+
| stid | name  | L_name | city    | mark | result | m_no |
+------+-------+--------+---------+------+--------+------+
|    1 | Rahul | NULL   | Delhi   |  300 | 1st    | NULL |
|    2 | Rani  | NULL   | Chennai |  250 | 2nd    | NULL |
|    3 | Soni  | NULL   | Ranchi  |  320 | 1st    | NULL |
|    4 | Jai   | NULL   | Hyd     |  255 | 2nd    | NULL |
|    5 | rock  | NULL   | mumbai  |  150 | 3rd    | NULL |
|    6 | Sonam | NULL   | Patna   |  145 | Fail   | NULL |
+------+-------+--------+---------+------+--------+------+


mysql> UPDATE stu
    -> SET L_name = 'kumar', m_no= 23564
    -> WHERE stid = 1;

mysql>  SELECT * FROM stu;
+------+-------+--------+---------+------+--------+-------+
| stid | name  | L_name | city    | mark | result | m_no  |
+------+-------+--------+---------+------+--------+-------+
|    1 | Rahul | kumar  | Delhi   |  300 | 1st    | 23564 |
|    2 | Rani  | NULL   | Chennai |  250 | 2nd    |  NULL |
|    3 | Soni  | NULL   | Ranchi  |  320 | 1st    |  NULL |
|    4 | Jai   | NULL   | Hyd     |  255 | 2nd    |  NULL |
|    5 | rock  | NULL   | mumbai  |  150 | 3rd    |  NULL |
|    6 | Sonam | NULL   | Patna   |  145 | Fail   |  NULL |
+------+-------+--------+---------+------+--------+-------+


mysql> UPDATE stu
    -> SET L_name = 'rocky', m_no= 2354
    -> WHERE stid = 5;

mysql>  SELECT * FROM stu;
+------+-------+--------+---------+------+--------+-------+
| stid | name  | L_name | city    | mark | result | m_no  |
+------+-------+--------+---------+------+--------+-------+
|    1 | Rahul | kumar  | Delhi   |  300 | 1st    | 23564 |
|    2 | Rani  | NULL   | Chennai |  250 | 2nd    |  NULL |
|    3 | Soni  | NULL   | Ranchi  |  320 | 1st    |  NULL |
|    4 | Jai   | NULL   | Hyd     |  255 | 2nd    |  NULL |
|    5 | rock  | rocky  | mumbai  |  150 | 3rd    |  2354 |
|    6 | Sonam | NULL   | Patna   |  145 | Fail   |  NULL |
+------+-------+--------+---------+------+--------+-------+


Update Records in Table Part 2 in SQL
===============================

mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  30000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
15 rows in set (0.12 sec)

mysql>  UPDATE emp
    -> SET salary = 50000
    -> WHERE emp_id = 101;

mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  50000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  50000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+


UPDATE with CASE(multiple) in SQL 
=======================
Syntax:

	UPDATE table_name
	SET new_column = 
	CASE
		WHEN column_name1 = some_value1 THEN new_value1
		WHEN column_name2 = some_value2 THEN new_value2
		ELSE new_value3--->(optional)
	END;

EX:
	UPDATE student
	SET Result = 
	CASE
		WHEN mark >= 300 THEN 'First'
		WHEN mark < 300 AND mark >= 250 THEN 'Second'
		WHEN mark < 250 AND mark >= 150 THEN 'Third'
		ELSE 'Fail'--->(optional)
	END;



mysql> SELECT * FROM stu;
+------+-------+---------+------+
| stid | name  | city    | mark |
+------+-------+---------+------+
|    1 | Rahul | Delhi   |  300 |
|    2 | Rani  | Chennai |  250 |
|    3 | Soni  | Ranchi  |  320 |
|    4 | Jai   | Hyd     |  255 |
|    5 | rock  | mumbai  |  150 |
|    6 | Sonam | Patna   |  145 |
+------+-------+---------+------+
6 rows in set (0.00 sec)

mysql> ALTER TABLE stu
    -> ADD COLUMN result varchar (50);

mysql> SELECT *  FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | NULL   |
|    2 | Rani  | Chennai |  250 | NULL   |
|    3 | Soni  | Ranchi  |  320 | NULL   |
|    4 | Jai   | Hyd     |  255 | NULL   |
|    5 | rock  | mumbai  |  150 | NULL   |
|    6 | Sonam | Patna   |  145 | NULL   |
+------+-------+---------+------+--------+


mysql> SELECT *  FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | NULL   |
|    2 | Rani  | Chennai |  250 | NULL   |
|    3 | Soni  | Ranchi  |  320 | NULL   |
|    4 | Jai   | Hyd     |  255 | NULL   |
|    5 | rock  | mumbai  |  150 | NULL   |
|    6 | Sonam | Patna   |  145 | NULL   |
+------+-------+---------+------+--------+
6 rows in set (0.00 sec)

mysql>
mysql>
mysql>
mysql> UPDATE stu
    -> SET result =
    -> CASE
    -> WHEN mark >= 300 THEN 'FIRST'
    -> WHEN mark < 300 AND mark >= 250 THEN 'SECOND'
    -> WHEN mark < 250 AND mark >= 150 THEN 'THIRD'
    -> ELSE 'FAIL'
    -> END;
Query OK, 6 rows affected (0.09 sec)
Rows matched: 6  Changed: 6  Warnings: 0

mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | FIRST  |
|    2 | Rani  | Chennai |  250 | SECOND |
|    3 | Soni  | Ranchi  |  320 | FIRST  |
|    4 | Jai   | Hyd     |  255 | SECOND |
|    5 | rock  | mumbai  |  150 | THIRD  |
|    6 | Sonam | Patna   |  145 | FAIL   |
+------+-------+---------+------+--------+


mysql>
mysql>
mysql> UPDATE stu
    -> SET result = 'FIRST'
    -> WHERE stid = 6;

mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | FIRST  |
|    2 | Rani  | Chennai |  250 | SECOND |
|    3 | Soni  | Ranchi  |  320 | FIRST  |
|    4 | Jai   | Hyd     |  255 | SECOND |
|    5 | rock  | mumbai  |  150 | THIRD  |
|    6 | Sonam | Patna   |  145 | FIRST  |
+------+-------+---------+------+--------+


mysql> UPDATE stu
    -> SET mark =350
    -> WHERE stid = 6;

mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | FIRST  |
|    2 | Rani  | Chennai |  250 | SECOND |
|    3 | Soni  | Ranchi  |  320 | FIRST  |
|    4 | Jai   | Hyd     |  255 | SECOND |
|    5 | rock  | mumbai  |  150 | THIRD  |
|    6 | Sonam | Patna   |  350 | FIRST  |
+------+-------+---------+------+--------+


DELETE recods in Table in SQL
=============================
The DELETE statement is used to delete records in a table
	1.Delete a Specific Record
	----------------------------
Syntax:
	DELETE FROM table_name
	WHERE some_column = some_value;

EX:
	DELETE FROM emp
	WHERE emp_name = 'Sonam' AND emp_id = 105

Note: WHERE is necessary otherwise all records will be delete


mysql> SELECT * FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | FIRST  |
|    2 | Rani  | Chennai |  250 | SECOND |
|    3 | Soni  | Ranchi  |  320 | FIRST  |
|    4 | Jai   | Hyd     |  255 | SECOND |
|    5 | rock  | mumbai  |  150 | THIRD  |
|    6 | Sonam | Patna   |  350 | FIRST  |
+------+-------+---------+------+--------+
6 rows in set (0.00 sec)

mysql> DELETE FROM stu
    -> WHERE stid = 6;

mysql> SELECT *  FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | FIRST  |
|    2 | Rani  | Chennai |  250 | SECOND |
|    3 | Soni  | Ranchi  |  320 | FIRST  |
|    4 | Jai   | Hyd     |  255 | SECOND |
|    5 | rock  | mumbai  |  150 | THIRD  |
+------+-------+---------+------+--------+


mysql> SELECT *  FROM stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | FIRST  |
|    2 | Rani  | Chennai |  250 | SECOND |
|    3 | Soni  | Ranchi  |  320 | FIRST  |
|    4 | Jai   | Hyd     |  255 | SECOND |
|    5 | rock  | mumbai  |  150 | THIRD  |
+------+-------+---------+------+--------+

mysql> DELETE FROM stu
    -> WHERE name = 'rock' AND stid = 5;

mysql> select * from stu;
+------+-------+---------+------+--------+
| stid | name  | city    | mark | result |
+------+-------+---------+------+--------+
|    1 | Rahul | Delhi   |  300 | FIRST  |
|    2 | Rani  | Chennai |  250 | SECOND |
|    3 | Soni  | Ranchi  |  320 | FIRST  |
|    4 | Jai   | Hyd     |  255 | SECOND |
+------+-------+---------+------+--------+


2.Delete All Records
-------------------
Syntax:
	DELETE FROM table_name;

(OR)
	DELETE * FROM table_name;

EX:
	DELETE FROM emp;
(OR)
	DELETE * FROM emp;

	Note:"We cannot undo this records"
Table alane untundi,andulo unde records(row's) matrame delete auvthai..
malli records kavali ante appudu new ga insert cheyali.	
	


mysql> SELECT * FROM n_tab;
+----+-------+-------+
| id | name  | city  |
+----+-------+-------+
|  1 | Sumit | Patna |
+----+-------+-------+
1 row in set (0.10 sec)

mysql> DELETE FROM n_tab;
Query OK, 1 row affected (0.19 sec)

mysql> SELECT * FROM n_tab;
Empty set (0.00 sec)


Copy Old Table to New Table within same Database in
====================================================

Within Same Database
	syntax:
		CREATE TABLE new_table LIKE old_table;
		INSERT new_table SELECT * FROM old_table;

	EX:
		CREATE TABLE teacher LIKE student;
		INSERT teacher SELECT * FROM student;



mysql> select * from k_tab;
+----+--------+
| id | name   |
+----+--------+
| 10 | Ram    |
| 11 | Murali |
+----+--------+
2 rows in set (0.11 sec)

mysql> CREATE TABLE new_k_tab LIKE k_tab;
Query OK, 0 rows affected (2.13 sec)

mysql> show tables;
+-----------------+
| Tables_in_my_db |
+-----------------+
| ap_tab          |
| emp             |
| ite             |
| item            |
| items           |
| k_tab           |
| my_tab          |
| n_tab           |
| new_k_tab       |
| new_tab         |
| pl_tab          |
| stu             |
| student         |
| u_tab           |
+-----------------+


mysql> DESC new_k_tab;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(50) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+



mysql> INSERT new_k_tab SELECT * FROM k_tab;

mysql> SELECT * FROM new_k_tab;
+----+--------+
| id | name   |
+----+--------+
| 10 | Ram    |
| 11 | Murali |
+----+--------+


Copy Old Table to New Table different Database in SQL
============================================

Within different Database
Use the database where you want to copy old table

Syntax:
	CREATE TABLE new_table LINK old_db.old_table;
	INSERT new_table SELECT * FROM old_db.old_table;

EX:
	CREATE TABLE teacher LINK my_db.student;
	INSERT teacher SELECT * FROM my_db.student;



mysql> CREATE DATABASE new_db;
Query OK, 1 row affected (0.27 sec)


mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| my_db              |
| mysql              |
| new_db             |
| pdb                |
| performance_schema |
+--------------------+


mysql> USE my_db;
Database changed
mysql> SHOW TABLES;
+-----------------+
| Tables_in_my_db |
+-----------------+
| ap_tab          |
| emp             |
| ite             |
| item            |
| items           |
| k_tab           |
| my_tab          |
| n_tab           |
| new_k_tab       |
| new_tab         |
| pl_tab          |
| stu             |
| student         |
| u_tab           |
+-----------------+

mysql> USE new_db;
Database changed

mysql> show tables;
Empty set (0.00 sec)

mysql> CREATE TABLE k_tab LIKE my_db.k_tab;
Query OK, 0 rows affected (2.00 sec)

mysql> SHOW TABLES;
+------------------+
| Tables_in_new_db |
+------------------+
| k_tab            |
+------------------+
1 row in set (0.00 sec)

mysql> DESC k_tab;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(50) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+

mysql> INSERT k_tab SELECT * FROM my_db.k_tab;
Query OK, 2 rows affected (0.17 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM K_tab;
+----+--------+
| id | name   |
+----+--------+
| 10 | Ram    |
| 11 | Murali |
+----+--------+
2 rows in set (0.06 sec)


MIN and MAX Function in SQL 
===========================
MIN(column_name) - Smallest value of the  selected column.
MAX(column_name) - Largest value of the  selected column.
SUM(column_name)- The total sum of a numeric column.
AVG(column_name)-The average value of a numeric column.
SQRT(column_name)- The square root  of a numeric column.
ROUND(column_name,decimal)-function is used to  round a numeric  field to
the number of decimal specified


mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  50000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  50000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
15 rows in set (0.10 sec)

mysql> SELECT MIN(salary) FROM emp;
+-------------+
| MIN(salary) |
+-------------+
|       10000 |
+-------------+

mysql> SELECT MAX(salary) FROM emp;
+-------------+
| MAX(salary) |
+-------------+
|       50000 |
+-------------+
1 row in set (0.00 sec)

mysql> SELECT MAX(dob) FROM emp;
+------------+
| MAX(dob)   |
+------------+
| 1992-11-03 |
+------------+
1 row in set (0.00 sec)

mysql> SELECT MAX(emp_name) FROM emp;
+---------------+
| MAX(emp_name) |
+---------------+
| Vinay         |
+---------------+
1 row in set (0.00 sec)

mysql> SELECT MAX(salary) AS newsalary FROM emp;--->Just like Tempararely...
+-----------+
| newsalary |
+-----------+
|     50000 |
+-----------+
1 row in set (0.00 sec)		
 
	
SUM and AVG Function in SQL 
===========================
mysql> SELECT SUM(salary) FROM emp;
+-------------+
| SUM(salary) |
+-------------+
|      450000 |
+-------------+
1 row in set (0.02 sec)


mysql> SELECT AVG(salary) FROM emp;
+-------------+
| AVG(salary) |
+-------------+
|  30000.0000 |
+-------------+
1 row in set (0.00 sec)


mysql> SELECT SUM(salary) AS Total_salary  FROM emp;-->>Tempararely...
+--------------+
| Total_salary |
+--------------+
|       450000 |
+--------------+
1 row in set (0.00 sec)


mysql> SELECT AVG(salary) AS Avg_salary FROM emp;
+------------+
| Avg_salary |
+------------+
| 30000.0000 |
+------------+
1 row in set (0.00 sec)


SQRT Function in SQL
========================
mysql> SELECT salary,  SQRT(salary) FROM emp;
+--------+--------------------+
| salary | SQRT(salary)       |
+--------+--------------------+
|  50000 | 223.60679774997897 |
|  50000 | 223.60679774997897 |
|  45000 | 212.13203435596427 |
|  15000 | 122.47448713915891 |
|  30000 | 173.20508075688772 |
|  10000 |                100 |
|  35000 | 187.08286933869707 |
|  35000 | 187.08286933869707 |
|  30000 | 173.20508075688772 |
|  30000 | 173.20508075688772 |
|  35000 | 187.08286933869707 |
|  15000 | 122.47448713915891 |
|  20000 |  141.4213562373095 |
|  20000 |  141.4213562373095 |
|  30000 | 173.20508075688772 |
+--------+--------------------+
15 rows in set (0.05 sec)


mysql> SELECT salary,  SQRT(salary)/5 FROM emp;
+--------+--------------------+
| salary | SQRT(salary)/5     |
+--------+--------------------+
|  50000 | 44.721359549995796 |
|  50000 | 44.721359549995796 |
|  45000 |  42.42640687119285 |
|  15000 |  24.49489742783178 |
|  30000 |  34.64101615137754 |
|  10000 |                 20 |
|  35000 | 37.416573867739416 |
|  35000 | 37.416573867739416 |
|  30000 |  34.64101615137754 |
|  30000 |  34.64101615137754 |
|  35000 | 37.416573867739416 |
|  15000 |  24.49489742783178 |
|  20000 | 28.284271247461902 |
|  20000 | 28.284271247461902 |
|  30000 |  34.64101615137754 |
+--------+--------------------+
15 rows in set (0.00 sec)

mysql> SELECT emp_name,  ROUND(salary) FROM emp;
+----------+---------------+
| emp_name | ROUND(salary) |
+----------+---------------+
| Ram      |         50000 |
| Ram      |         50000 |
| Amit     |         45000 |
| Tanu     |         15000 |
| Sunil    |         30000 |
| Sonam    |         10000 |
| komal    |         35000 |
| Vinay    |         35000 |
| Dev      |         30000 |
| Suhana   |         30000 |
| Puja     |         35000 |
| Raja     |         15000 |
| jai      |         20000 |
| Sonam    |         20000 |
| Devit    |         30000 |
+----------+---------------+

 DECIMAL Data Type in SQL
============================
Syntax:
	column_name DECIMAL(T,D)
Where

T = Total digits. EX:Range 1-65
D = digits after decimal Range 0-30 and must not be more than T

EX:
	price DECIMAL(7,2)
		16999.81 (. idi count lo ki radu)

. Column_name DECIMAL(T)
. Column_name DECIMAL(T,0)

. Column_name DECIMAL;
	# Default T = 10

No.of Digits		Number of Bytes
------------		---------------
0			0
1-2			1
3-4			2
5-6			3
7-9			4


CREATE TABLE product(
Id INT AUTO_INCREMENT PRIMARY KEY,
Pname VARCHAR (40),
Price DECIMAL (7,2) NOT NULL
);


INSERT INTO product (pname,price)
VALUES ("Mobile", 16999.25),
("Computer", 25000.65);

mysql> DESC product;
+-------+--------------+------+-----+---------+----------------+
| Field | Type         | Null | Key | Default | Extra          |
+-------+--------------+------+-----+---------+----------------+
| Id    | int          | NO   | PRI | NULL    | auto_increment |
| Pname | varchar(40)  | YES  |     | NULL    |                |
| Price | decimal(7,2) | NO   |     | NULL    |                |
+-------+--------------+------+-----+---------+----------------+


mysql> SELECT * FROM product;
+----+----------+----------+
| Id | Pname    | Price    |
+----+----------+----------+
|  1 | Mobile   | 16999.25 |
|  2 | Computer | 25000.65 |
+----+----------+----------+
2 rows in set (0.00 sec)


	Zerofill
	-------
	EX:250.65--->#000250.6500
		
		

CREATE TABLE product1(
Id INT AUTO_INCREMENT PRIMARY KEY,
Pname VARCHAR (40),
Price DECIMAL (10,4)ZEROFILL
);


INSERT INTO product1 (pname,price)
VALUES ("Mobile", 16999.2),
("Computer", 250.6),
("Laptop",1656.2),
("printer",100.5);

mysql> DESC product1;
+-------+---------------------------------+------+-----+---------+----------------+
| Field | Type                            | Null | Key | Default | Extra          |
+-------+---------------------------------+------+-----+---------+----------------+
| Id    | int                             | NO   | PRI | NULL    | auto_increment |
| Pname | varchar(40)                     | YES  |     | NULL    |                |
| Price | decimal(10,4) unsigned zerofill | YES  |     | NULL    |                |
+-------+---------------------------------+------+-----+---------+----------------+


mysql> SELECT * FROM product1;
+----+----------+-------------+
| Id | Pname    | Price       |
+----+----------+-------------+
|  1 | Mobile   | 016999.2000 |
|  2 | Computer | 000250.6000 |
|  3 | Laptop   | 001656.2000 |
|  4 | printer  | 000100.5000 |
+----+----------+-------------+
4 rows in set (0.00 sec)


ROUND Function in SQL
======================

mysql> SELECT * FROM product1;
+----+----------+-------------+
| Id | Pname    | Price       |
+----+----------+-------------+
|  1 | Mobile   | 016999.2000 |
|  2 | Computer | 000250.6000 |
|  3 | Laptop   | 001656.2000 |
|  4 | printer  | 000100.5000 |
+----+----------+-------------+
4 rows in set (0.00 sec)

mysql> SELECT  * , ROUND(Price,3) FROM product1;
+----+----------+-------------+----------------+
| Id | Pname    | Price       | ROUND(Price,3) |
+----+----------+-------------+----------------+
|  1 | Mobile   | 016999.2000 |      16999.200 |
|  2 | Computer | 000250.6000 |        250.600 |
|  3 | Laptop   | 001656.2000 |       1656.200 |
|  4 | printer  | 000100.5000 |        100.500 |
+----+----------+-------------+----------------+
4 rows in set (0.00 sec)

mysql> SELECT  * , ROUND(Price,3) AS New_Price  FROM product1;
+----+----------+-------------+-----------+
| Id | Pname    | Price       | New_Price |
+----+----------+-------------+-----------+
|  1 | Mobile   | 016999.2000 | 16999.200 |
|  2 | Computer | 000250.6000 |   250.600 |
|  3 | Laptop   | 001656.2000 |  1656.200 |
|  4 | printer  | 000100.5000 |   100.500 |
+----+----------+-------------+-----------+


mysql> SELECT  * , ROUND(Price,1) AS New_Price  FROM product1;
+----+----------+-------------+-----------+
| Id | Pname    | Price       | New_Price |
+----+----------+-------------+-----------+
|  1 | Mobile   | 016999.2000 |   16999.2 |
|  2 | Computer | 000250.6000 |     250.6 |
|  3 | Laptop   | 001656.2000 |    1656.2 |
|  4 | printer  | 000100.5000 |     100.5 |
+----+----------+-------------+-----------+


COUNT Function in SQL
=====================
The COUNT(column_name)function returns the  number of values (NULL values will
not be counted) of the  specified column:
	SELECT COUNT(column_name) FROM table_name;

COUNT(*)function returns the number of records in table.
	SELECT COUNT(*) FROM table_name;

The COUNT(DISTINCT column_name)function returns the number of distinct
values of the specified column
	SELECT COUNT(DISTINCT column_name) FROM table_name;


mysql> CREATE TABLE orders
    -> (
    -> orderID int (5),
    -> Cust int (5),
    -> SellerID int(5)
    -> );
Query OK, 0 rows affected, 3 warnings (2.89 sec)

mysql> DESC orders;
+----------+------+------+-----+---------+-------+
| Field    | Type | Null | Key | Default | Extra |
+----------+------+------+-----+---------+-------+
| orderID  | int  | YES  |     | NULL    |       |
| Cust     | int  | YES  |     | NULL    |       |
| SellerID | int  | YES  |     | NULL    |       |
+----------+------+------+-----+---------+-------+
3 rows in set (0.28 sec)

mysql> INSERT INTO orders(orderID,Cust,SellerID)
    -> VALUES(1,101,201),
    -> (2,102,202),
    -> (3,103,204),
    -> (4,101,205),
    -> (5,101,301),
    -> (6,102,401),
    -> (7,103,301),
    -> (8,103,345);
Query OK, 8 rows affected (0.22 sec)
Records: 8  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM orders;
+---------+------+----------+
| orderID | Cust | SellerID |
+---------+------+----------+
|       1 |  101 |      201 |
|       2 |  102 |      202 |
|       3 |  103 |      204 |
|       4 |  101 |      205 |
|       5 |  101 |      301 |
|       6 |  102 |      401 |
|       7 |  103 |      301 |
|       8 |  103 |      345 |
+---------+------+----------+

mysql> SELECT COUNT(Cust) FROM orders;
+-------------+
| COUNT(Cust) |
+-------------+
|           8 |
+-------------+

mysql> SELECT COUNT(*) FROM orders;
+----------+
| COUNT(*) |
+----------+
|        8 |
+----------+

mysql> SELECT COUNT(DISTINCT Cust) FROM orders;
+----------------------+
| COUNT(DISTINCT Cust) |
+----------------------+
|                    3 |
+----------------------+
1 row in set (0.03 sec)


mysql> SELECT COUNT(Cust) FROM orders
    -> WHERE Cust = 101;
+-------------+
| COUNT(Cust) |
+-------------+
|           3 |
+-------------+

mysql> SELECT COUNT(Cust) FROM orders
    -> WHERE Cust = 102;
+-------------+
| COUNT(Cust) |
+-------------+
|           2 |
+-------------+
1 row in set (0.00 sec)

mysql> SELECT COUNT(Cust) FROM orders
    -> WHERE Cust = 103;
+-------------+
| COUNT(Cust) |
+-------------+
|           3 |
+-------------+


UPPER and LOWER Function in SQL
============================
UPPER(column_name) or UCASE(column_name)-Converts the value of a field to uppercase.

LOWER(column_name) or LCASE(column_name) -Convert the  value of a field to  lowercase.

MID(column_name,start,length) or  SUBSTRING (column_name,start,length)-function is used
to  extract characters from a text field.

LENGTH(column_name)- the length of the value in a text field.


mysql> SELECT * FROM emp;
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
| emp_id | emp_name | dob        | dept       | salary | city     | pin    | email                 |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
|    101 | Ram      | 1990-01-01 | IT         |  50000 | Delhi    | 800001 | ram@geekyshows.com    |
|    101 | Ram      | 1990-01-01 | IT         |  50000 | Delhi    | 800001 | ram@geekyshows.com    |
|    102 | Amit     | 1988-04-03 | Research   |  45000 | Mumbai   | 800002 | amit@geekyshows.com   |
|    103 | Tanu     | 1990-01-01 | Accountant |  15000 | Delhi    | 800001 | tanu@geekyshows.com   |
|    104 | Sunil    | 1989-12-05 | IT         |  30000 | Kolkata  | 800003 | sunil@geekyshows.com  |
|    105 | Sonam    | 1989-12-05 | Executive  |  10000 | kolkata  | 800003 | sonam@geekyshows.com  |
|    106 | komal    | 1992-11-03 | HR         |  35000 | Ranchi   | 800004 | komanl@geekyshows.com |
|    107 | Vinay    | 1990-10-06 | HR         |  35000 | kolkata  | 800003 | vinay@geekyshows.com  |
|    108 | Dev      | 1989-09-25 | IT         |  30000 | Mumbai   | 800002 | dev@geekyshows.com    |
|    109 | Suhana   | 1990-07-15 | IT         |  30000 | Ranchi   | 800004 | suhana@geekyshows.com |
|    110 | Puja     | 1988-01-26 | HR         |  35000 | Banglore | 800005 | puja@geekyshows.com   |
|    111 | Raja     | 1992-11-03 | Accountant |  15000 | patna    | 800007 | raj@geekyshows.com    |
|    112 | jai      | 1990-01-18 | Trainer    |  20000 | Chennai  | 800009 | jai@geekyshows.com    |
|    113 | Sonam    | 1990-01-18 | Trainer    |  20000 | J&k      | 800010 | sonam@geekyshows.com  |
|    114 | Devit    | 1989-09-25 | IT         |  30000 | Chennai  | 800009 | devit@geekyshows.com  |
+--------+----------+------------+------------+--------+----------+--------+-----------------------+
15 rows in set (0.65 sec)

mysql>
mysql> SELECT UPPER(emp_name) FROM emp;
+-----------------+
| UPPER(emp_name) |
+-----------------+
| RAM             |
| RAM             |
| AMIT            |
| TANU            |
| SUNIL           |
| SONAM           |
| KOMAL           |
| VINAY           |
| DEV             |
| SUHANA          |
| PUJA            |
| RAJA            |
| JAI             |
| SONAM           |
| DEVIT           |
+-----------------+


mysql> SELECT UPPER(emp_name) AS Name,city FROM emp;
+--------+----------+
| Name   | city     |
+--------+----------+
| RAM    | Delhi    |
| RAM    | Delhi    |
| AMIT   | Mumbai   |
| TANU   | Delhi    |
| SUNIL  | Kolkata  |
| SONAM  | kolkata  |
| KOMAL  | Ranchi   |
| VINAY  | kolkata  |
| DEV    | Mumbai   |
| SUHANA | Ranchi   |
| PUJA   | Banglore |
| RAJA   | patna    |
| JAI    | Chennai  |
| SONAM  | J&k      |
| DEVIT  | Chennai  |
+--------+----------+

mysql> SELECT LOWER(emp_name) FROM emp;
+-----------------+
| LOWER(emp_name) |
+-----------------+
| ram             |
| ram             |
| amit            |
| tanu            |
| sunil           |
| sonam           |
| komal           |
| vinay           |
| dev             |
| suhana          |
| puja            |
| raja            |
| jai             |
| sonam           |
| devit           |
+-----------------+

MID and LENGTH Function in SQL
================================

mysql> SELECT MID(city,1,3) FROM emp;
+---------------+
| MID(city,1,3) |
+---------------+
| Del           |
| Del           |
| Mum           |
| Del           |
| Kol           |
| kol           |
| Ran           |
| kol           |
| Mum           |
| Ran           |
| Ban           |
| pat           |
| Che           |
| J&k           |
| Che           |
+---------------+

mysql> SELECT city,LENGTH(city) FROM emp;
+----------+--------------+
| city     | LENGTH(city) |
+----------+--------------+
| Delhi    |            5 |
| Delhi    |            5 |
| Mumbai   |            6 |
| Delhi    |            5 |
| Kolkata  |            7 |
| kolkata  |            7 |
| Ranchi   |            6 |
| kolkata  |            7 |
| Mumbai   |            6 |
| Ranchi   |            6 |
| Banglore |            8 |
| patna    |            5 |
| Chennai  |            7 |
| J&k      |            3 |
| Chennai  |            7 |
+----------+--------------+

CONCAT Function in SQL
===================
CONCAT(column_name1, column_name2,......) -It joints two column

REVERSE(Column_name) -It reverse the order of letter in string.

NOW() -function returns the  current system date and time.

FORMAT(column_name, format_type)- format is used to format how a field is to be displayed.


mysql> SELECT emp_name, CONCAT(city,pin) FROM emp;
+----------+------------------+
| emp_name | CONCAT(city,pin) |
+----------+------------------+
| Ram      | Delhi800001      |
| Ram      | Delhi800001      |
| Amit     | Mumbai800002     |
| Tanu     | Delhi800001      |
| Sunil    | Kolkata800003    |
| Sonam    | kolkata800003    |
| komal    | Ranchi800004     |
| Vinay    | kolkata800003    |
| Dev      | Mumbai800002     |
| Suhana   | Ranchi800004     |
| Puja     | Banglore800005   |
| Raja     | patna800007      |
| jai      | Chennai800009    |
| Sonam    | J&k800010        |
| Devit    | Chennai800009    |
+----------+------------------+

mysql> SELECT emp_name, CONCAT(city,'|',pin) FROM emp;
+----------+----------------------+
| emp_name | CONCAT(city,'|',pin) |
+----------+----------------------+
| Ram      | Delhi|800001         |
| Ram      | Delhi|800001         |
| Amit     | Mumbai|800002        |
| Tanu     | Delhi|800001         |
| Sunil    | Kolkata|800003       |
| Sonam    | kolkata|800003       |
| komal    | Ranchi|800004        |
| Vinay    | kolkata|800003       |
| Dev      | Mumbai|800002        |
| Suhana   | Ranchi|800004        |
| Puja     | Banglore|800005      |
| Raja     | patna|800007         |
| jai      | Chennai|800009       |
| Sonam    | J&k|800010           |
| Devit    | Chennai|800009       |
+----------+----------------------+

mysql> SELECT emp_name, CONCAT(city,', ',pin) FROM emp;
+----------+-----------------------+
| emp_name | CONCAT(city,', ',pin) |
+----------+-----------------------+
| Ram      | Delhi, 800001         |
| Ram      | Delhi, 800001         |
| Amit     | Mumbai, 800002        |
| Tanu     | Delhi, 800001         |
| Sunil    | Kolkata, 800003       |
| Sonam    | kolkata, 800003       |
| komal    | Ranchi, 800004        |
| Vinay    | kolkata, 800003       |
| Dev      | Mumbai, 800002        |
| Suhana   | Ranchi, 800004        |
| Puja     | Banglore, 800005      |
| Raja     | patna, 800007         |
| jai      | Chennai, 800009       |
| Sonam    | J&k, 800010           |
| Devit    | Chennai, 800009       |
+----------+-----------------------+

mysql> SELECT emp_name, CONCAT(city,', ',pin) AS New_Address FROM emp;
+----------+------------------+
| emp_name | New_Address      |
+----------+------------------+
| Ram      | Delhi, 800001    |
| Ram      | Delhi, 800001    |
| Amit     | Mumbai, 800002   |
| Tanu     | Delhi, 800001    |
| Sunil    | Kolkata, 800003  |
| Sonam    | kolkata, 800003  |
| komal    | Ranchi, 800004   |
| Vinay    | kolkata, 800003  |
| Dev      | Mumbai, 800002   |
| Suhana   | Ranchi, 800004   |
| Puja     | Banglore, 800005 |
| Raja     | patna, 800007    |
| jai      | Chennai, 800009  |
| Sonam    | J&k, 800010      |
| Devit    | Chennai, 800009  |
+----------+------------------+

mysql> SELECT emp_name, CONCAT(pin, ', ',(SELECT MID(city,1, 3))) FROM emp;
+----------+-------------------------------------------+
| emp_name | CONCAT(pin, ', ',(SELECT MID(city,1, 3))) |
+----------+-------------------------------------------+
| Ram      | 800001, Del                               |
| Ram      | 800001, Del                               |
| Amit     | 800002, Mum                               |
| Tanu     | 800001, Del                               |
| Sunil    | 800003, Kol                               |
| Sonam    | 800003, kol                               |
| komal    | 800004, Ran                               |
| Vinay    | 800003, kol                               |
| Dev      | 800002, Mum                               |
| Suhana   | 800004, Ran                               |
| Puja     | 800005, Ban                               |
| Raja     | 800007, pat                               |
| jai      | 800009, Che                               |
| Sonam    | 800010, J&k                               |
| Devit    | 800009, Che                               |
+----------+-------------------------------------------+


mysql> SELECT emp_name, CONCAT(pin, ', ',(SELECT MID(city,1, 3))) AS New_Address FROM emp;
+----------+-------------+
| emp_name | New_Address |
+----------+-------------+
| Ram      | 800001, Del |
| Ram      | 800001, Del |
| Amit     | 800002, Mum |
| Tanu     | 800001, Del |
| Sunil    | 800003, Kol |
| Sonam    | 800003, kol |
| komal    | 800004, Ran |
| Vinay    | 800003, kol |
| Dev      | 800002, Mum |
| Suhana   | 800004, Ran |
| Puja     | 800005, Ban |
| Raja     | 800007, pat |
| jai      | 800009, Che |
| Sonam    | 800010, J&k |
| Devit    | 800009, Che |
+----------+-------------+


REVERSE Function in SQL
=====================
mysql> SELECT  REVERSE(city) FROM emp;
+---------------+
| REVERSE(city) |
+---------------+
| ihleD         |
| ihleD         |
| iabmuM        |
| ihleD         |
| atakloK       |
| ataklok       |
| ihcnaR        |
| ataklok       |
| iabmuM        |
| ihcnaR        |
| erolgnaB      |
| antap         |
| iannehC       |
| k&J           |
| iannehC       |
+---------------+

mysql> SELECT emp_name,salary, NOW() FROM emp;
+----------+--------+---------------------+
| emp_name | salary | NOW()               |
+----------+--------+---------------------+
| Ram      |  50000 | 2021-07-26 11:20:44 |
| Ram      |  50000 | 2021-07-26 11:20:44 |
| Amit     |  45000 | 2021-07-26 11:20:44 |
| Tanu     |  15000 | 2021-07-26 11:20:44 |
| Sunil    |  30000 | 2021-07-26 11:20:44 |
| Sonam    |  10000 | 2021-07-26 11:20:44 |
| komal    |  35000 | 2021-07-26 11:20:44 |
| Vinay    |  35000 | 2021-07-26 11:20:44 |
| Dev      |  30000 | 2021-07-26 11:20:44 |
| Suhana   |  30000 | 2021-07-26 11:20:44 |
| Puja     |  35000 | 2021-07-26 11:20:44 |
| Raja     |  15000 | 2021-07-26 11:20:44 |
| jai      |  20000 | 2021-07-26 11:20:44 |
| Sonam    |  20000 | 2021-07-26 11:20:44 |
| Devit    |  30000 | 2021-07-26 11:20:44 |
+----------+--------+---------------------+

mysql> SELECT emp_name,salary, NOW() AS DateTime FROM emp;
+----------+--------+---------------------+
| emp_name | salary | DateTime            |
+----------+--------+---------------------+
| Ram      |  50000 | 2021-07-26 11:20:13 |
| Ram      |  50000 | 2021-07-26 11:20:13 |
| Amit     |  45000 | 2021-07-26 11:20:13 |
| Tanu     |  15000 | 2021-07-26 11:20:13 |
| Sunil    |  30000 | 2021-07-26 11:20:13 |
| Sonam    |  10000 | 2021-07-26 11:20:13 |
| komal    |  35000 | 2021-07-26 11:20:13 |
| Vinay    |  35000 | 2021-07-26 11:20:13 |
| Dev      |  30000 | 2021-07-26 11:20:13 |
| Suhana   |  30000 | 2021-07-26 11:20:13 |
| Puja     |  35000 | 2021-07-26 11:20:13 |
| Raja     |  15000 | 2021-07-26 11:20:13 |
| jai      |  20000 | 2021-07-26 11:20:13 |
| Sonam    |  20000 | 2021-07-26 11:20:13 |
| Devit    |  30000 | 2021-07-26 11:20:13 |
+----------+--------+---------------------+


GROUP BY in SQL
==================

mysql> SELECT emp_name, MIN(salary) FROM emp Group BY emp_name;
+----------+-------------+
| emp_name | MIN(salary) |
+----------+-------------+
| Ram      |       50000 |
| Amit     |       45000 |
| Tanu     |       15000 |
| Sunil    |       30000 |
| Sonam    |       10000 |
| komal    |       35000 |
| Vinay    |       35000 |
| Dev      |       30000 |
| Suhana   |       30000 |
| Puja     |       35000 |
| Raja     |       15000 |
| jai      |       20000 |
| Devit    |       30000 |
+----------+-------------+



mysql> SELECT *  FROM orders;
+---------+------+----------+
| orderID | Cust | SellerID |
+---------+------+----------+
|       1 |  101 |      201 |
|       2 |  102 |      202 |
|       3 |  103 |      204 |
|       4 |  101 |      205 |
|       5 |  101 |      301 |
|       6 |  102 |      401 |
|       7 |  103 |      301 |
|       8 |  103 |      345 |
+---------+------+----------+


mysql> SELECT Cust,COUNT(*) FROM orders GROUP BY Cust;
+------+----------+
| Cust | COUNT(*) |
+------+----------+
|  101 |        3 |
|  102 |        2 |
|  103 |        3 |
+------+----------+

HAVING Clause in SQL
=====================

HAVING cheyali ante Group BY kuda cheyali...

mysql> SELECT emp_name, MIN(salary) FROM emp Group BY emp_name;
+----------+-------------+
| emp_name | MIN(salary) |
+----------+-------------+
| Ram      |       50000 |
| Amit     |       45000 |
| Tanu     |       15000 |
| Sunil    |       30000 |
| Sonam    |       10000 |
| komal    |       35000 |
| Vinay    |       35000 |
| Dev      |       30000 |
| Suhana   |       30000 |
| Puja     |       35000 |
| Raja     |       15000 |
| jai      |       20000 |
| Devit    |       30000 |
+----------+-------------+
13 rows in set (0.00 sec)

mysql> SELECT emp_name, MIN(salary) FROM emp Group BY emp_name HAVING MIN(salary) > 25000;
+----------+-------------+
| emp_name | MIN(salary) |
+----------+-------------+
| Ram      |       50000 |
| Amit     |       45000 |
| Sunil    |       30000 |
| komal    |       35000 |
| Vinay    |       35000 |
| Dev      |       30000 |
| Suhana   |       30000 |
| Puja     |       35000 |
| Devit    |       30000 |
+----------+-------------+

mysql> SELECT *  FROM orders;
+---------+------+----------+
| orderID | Cust | SellerID |
+---------+------+----------+
|       1 |  101 |      201 |
|       2 |  102 |      202 |
|       3 |  103 |      204 |
|       4 |  101 |      205 |
|       5 |  101 |      301 |
|       6 |  102 |      401 |
|       7 |  103 |      301 |
|       8 |  103 |      345 |
+---------+------+----------+
8 rows in set (0.00 sec)

mysql> SELECT Cust,COUNT(*) FROM orders GROUP BY Cust HAVING COUNT(*) > 2;
+------+----------+
| Cust | COUNT(*) |
+------+----------+
|  101 |        3 |
|  103 |        3 |
+------+----------+
2 rows in set (0.00 sec)


Why do we need Multi Table in SQL
============================

Not a importent



 Relationship between Tables in SQL
=========================================

One to one
-------------
	1.EX:Oka customer Ooka order matrame pedithey appudu 'One to One" antaru

	2.EX:Company lo, Ooka employee Ooka Department lo matrame work chesthe "one to one"

One to Many (or) Many to one
------------
	1.EX:Oka customer Ooka order kante ekkuva pedithey appudu "One to Many".

	2.EX: Company lo ,Chala mandi employees Ooka Department lo matrame work chesthe (one to many)
			(or) (opposite direction)
		Ooka Department lo Chala mandi employees work chesthe(one to many)
 
Many to Many(it just like opposite directions)
----------
	1.EX:Chala mandi customers chala products ni order pedithey,Chala products ni
chala mandi customers order chesthe appudu 'Many to Many". antaru
	
	2.Company lo,work chese employees chala mandi employees unnaru.vallu chala
Departmets lo work chesthunaru.chala Departments lo chala mandi employees work chesthunaru
ఒక ఉద్యోగి ఒకటి కంటే ఎక్కువ విభాగాలలో తన సహకారాన్ని(help cheyadaniki chusthadu.)
 చూసుకుంటాడు.


What is Normalization in SQL
=============================

. 1 NF (Normal Form)

. 2 NF

. 3 NF


 First Normal Form 1 NF in SQL
==================================

	Theory cheppinadu..

Second Normal Form 2 NF in SQL
=============================
	
	Theory cheppinadu..

Third Normal Form 3 NF in SQL
==============================

	Theory cheppinadu..


Short Note about Normalization in SQL
==================================
	Theory cheppinadu..
	 


What is Foreign Key(one to many) in SQL
============================
. A FOREIGN  KEY in one table points to a PRIMARY KEY in another table.
. A foreign key can have a different name than the primary key it comes from.
. The primary key used by a foreign key is also know as a parent key. The table where
 the primary key is from is know as a parent table.
. The foreign key can  be used to make sure that the row in one table have corresponding row
in another table.
. Foreign key value can be null, even though primary key value can't.
. Foreign key don't have to be unique in fact,they often aren't.

Create Table with Foreign Key in SQL Theory
=======================================
CREATE TABLE department
(
D_id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
D_Name varchar (40),
E_id int,
CONSTRAINT employee_Eid_fk (This line is optional)
FOREIGN KEY(E_id) REFERENCES employee (Emp_id)
);

The CONSTRAINT clause allows to define constraint name for the foreign key
constraint.If we omit it, MYSQL will generate a name automatically it is optional.

The REFERENCES clause specifies the parent table and its column to  which the columns in 
the child table refer. The number of  columns in the child table and parent table specified
in the FOREIGN KEY and REFERENCES must be the  same.


Create Table with Foreign Key in SQL Practical
=========================================

mysql> CREATE TABLE employee1
    -> (
    -> eid int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> ename varchar (40),
    -> address varchar (40)
    -> );
Query OK, 0 rows affected (2.33 sec)

mysql> DESC employee1;
+---------+-------------+------+-----+---------+----------------+
| Field   | Type        | Null | Key | Default | Extra          |
+---------+-------------+------+-----+---------+----------------+
| eid     | int         | NO   | PRI | NULL    | auto_increment |
| ename   | varchar(40) | YES  |     | NULL    |                |
| address | varchar(40) | YES  |     | NULL    |                |
+---------+-------------+------+-----+---------+----------------+

mysql> INSERT INTO employee1(eid,ename,address)
    -> VALUES(1,'Rani','Delhi'),
    -> (2,'Raghu','HYD'),
    -> (3,'Raj','Kol');
Query OK, 3 rows affected (0.24 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM employee1;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   1 | Rani  | Delhi   |
|   2 | Raghu | HYD     |
|   3 | Raj   | Kol     |
+-----+-------+---------+


mysql> CREATE TABLE department
    -> (
    -> did int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> dname varchar (40),
    -> empid int NOT NULL,
    -> FOREIGN KEY (empid) REFERENCES employee1(eid)
    -> );

(OR)

mysql> CREATE TABLE department
    -> (
    -> did int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> dname varchar (40),
    -> empid int NOT NULL,
    -> CONSTRAINT employee1_eid_fk	
    -> FOREIGN KEY (empid) REFERENCES employee1(eid)
    -> );


mysql> DESC department;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| did   | int         | NO   | PRI | NULL    | auto_increment |
| dname | varchar(40) | YES  |     | NULL    |                |
| empid | int         | NO   | MUL | NULL    |                |
+-------+-------------+------+-----+---------+----------------+


mysql> INSERT INTO department(did,dname,empid)
    -> VALUES(1,'IT',1),
    -> (2,'HR',1),
    -> (3,'Manage',2);

mysql> select * from department;
+-----+--------+-------+
| did | dname  | empid |
+-----+--------+-------+
|   1 | IT     |     1 |
|   2 | HR     |     1 |
|   3 | Manage |     2 |
+-----+--------+-------+
3 rows in set (0.00 sec)


How to find Constraint Name in SQL 
====================================
Note:Constraint mean's UNIQUE,PRIMARY KEY, NOT NULL,NULL,FOREIGN KEY..etc

mysql> DESC department;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| did   | int         | NO   | PRI | NULL    | auto_increment |
| dname | varchar(40) | YES  |     | NULL    |                |
| empid | int         | NO   | MUL | NULL    |                |
+-------+-------------+------+-----+---------+----------------+


mysql> SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    -> WHERE TABLE_NAME = 'department';
+--------------------+-------------------+-------------------+--------------+------------+-----------------+----------+
| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME   | TABLE_SCHEMA | TABLE_NAME | CONSTRAINT_TYPE | ENFORCED |
+--------------------+-------------------+-------------------+--------------+------------+-----------------+----------+
| def                | my_db             | PRIMARY           | my_db        | department | PRIMARY KEY     | YES      |
| def                | my_db             | department_ibfk_1 | my_db        | department | FOREIGN KEY     | YES      |
+--------------------+-------------------+-------------------+--------------+------------+-----------------+----------+
2 rows in set (0.28 sec)


 Drop Foreign Key from Table in SQL
=================================

mysql> ALTER TABLE department
    -> DROP FOREIGN KEY department_ibfk_1;

(OR)

mysql> ALTER TABLE department
    -> DROP CONSTRAINT department_ibfk_1;


mysql> SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    -> WHERE TABLE_NAME = 'department';
+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+
| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME | TABLE_SCHEMA | TABLE_NAME | CONSTRAINT_TYPE | ENFORCED |
+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+
| def                | my_db             | PRIMARY         | my_db        | department | PRIMARY KEY     | YES      |
+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+

 Add Foreign Key Constraint in a Table SQL
======================================

mysql> CREATE TABLE department1
    -> (
    -> did int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> dname varchar(40),
    -> empid int NOT NULL
    -> );

mysql> DESC department1;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| did   | int         | NO   | PRI | NULL    | auto_increment |
| dname | varchar(40) | YES  |     | NULL    |                |
| empid | int         | NO   |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
3 rows in set (0.21 sec)

mysql> ALTER TABLE department1
    -> ADD CONSTRAINT employee1_eid_fk  --->employee1 table paina undi chudu...
    -> FOREIGN KEY (empid) REFERENCES employee1(eid);


mysql> DESC department1;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| did   | int         | NO   | PRI | NULL    | auto_increment |
| dname | varchar(40) | YES  |     | NULL    |                |
| empid | int         | NO   | MUL | NULL    |                |
+-------+-------------+------+-----+---------+----------------+


mysql> SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    -> WHERE TABLE_NAME = 'department1';
+--------------------+-------------------+------------------+--------------+-------------+-----------------+----------+
| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME  | TABLE_SCHEMA | TABLE_NAME  | CONSTRAINT_TYPE | ENFORCED |
+--------------------+-------------------+------------------+--------------+-------------+-----------------+----------+
| def                | my_db             | PRIMARY          | my_db        | department1 | PRIMARY KEY     | YES      |
| def                | my_db             | employee1_eid_fk | my_db        | department1 | FOREIGN KEY     | YES      |
+--------------------+-------------------+------------------+--------------+-------------+-----------------+----------+
2 rows in set (0.00 sec)
	

mysql> ALTER TABLE department1
    -> DROP FOREIGN KEY employee1_eid_fk;


mysql> SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    ->  WHERE TABLE_NAME = 'department1';
+--------------------+-------------------+-----------------+--------------+-------------+-----------------+----------+
| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME | TABLE_SCHEMA | TABLE_NAME  | CONSTRAINT_TYPE | ENFORCED |
+--------------------+-------------------+-----------------+--------------+-------------+-----------------+----------+
| def                | my_db             | PRIMARY         | my_db        | department1 | PRIMARY KEY     | YES      |
+--------------------+-------------------+-----------------+--------------+-------------+-----------------+----------+
1 row in set (0.00 sec)



	ADD column name and foreign key
	------------------------------

mysql> CREATE TABLE department2
    -> (
    -> did int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> dname varchar(40)
    -> );



mysql> ALTER TABLE department2
    -> ADD COLUMN empid int NOT NULL,
    -> ADD CONSTRAINT employee1_eid_fk
    -> FOREIGN KEY(empid) REFERENCES employee1(eid);
Query OK, 0 rows affected (2.11 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> DESC department2;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| did   | int         | NO   | PRI | NULL    | auto_increment |
| dname | varchar(40) | YES  |     | NULL    |                |
| empid | int         | NO   | MUL | NULL    |                |
+-------+-------------+------+-----+---------+----------------+

mysql> SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    ->  WHERE TABLE_NAME = 'department2';
+--------------------+-------------------+------------------+--------------+-------------+-----------------+----------+
| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME  | TABLE_SCHEMA | TABLE_NAME  | CONSTRAINT_TYPE | ENFORCED |
+--------------------+-------------------+------------------+--------------+-------------+-----------------+----------+
| def                | my_db             | PRIMARY          | my_db        | department2 | PRIMARY KEY     | YES      |
| def                | my_db             | employee1_eid_fk | my_db        | department2 | FOREIGN KEY     | YES      |
+--------------------+-------------------+------------------+--------------+-------------+-----------------+----------+
2 rows in set (0.00 sec)


 Unable to Delete Parent Table in SQL
======================================

	Theory chepinadu


Unable to Delete Parent Table records in SQL
=======================================

	Anthaga importent kadule...



ON DELETE Clause in SQL
==========================
. ON DELETE CASCADE

. ON DELETE SET NULL

. ON DELETE NO ACTION

. ON DELETE RESTRICT


ON DELETE CASCADE in SQL 
===========================

ON DELETE CASCADE ni use chesi parent table lo unde record ni  delete chesthe automatice ga
child table lo unde related record delete auvthundi....


mysql> CREATE TABLE cust
    -> (
    -> eid int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> ename varchar (40),
    -> address varchar (40)
    -> );
Query OK, 0 rows affected (0.89 sec)

mysql> DESC cust;
+---------+-------------+------+-----+---------+----------------+
| Field   | Type        | Null | Key | Default | Extra          |
+---------+-------------+------+-----+---------+----------------+
| eid     | int         | NO   | PRI | NULL    | auto_increment |
| ename   | varchar(40) | YES  |     | NULL    |                |
| address | varchar(40) | YES  |     | NULL    |                |
+---------+-------------+------+-----+---------+----------------+
3 rows in set (0.22 sec)

mysql> INSERT INTO cust(eid,ename,address)
    -> VALUES(1,'Rani','Delhi'),
    -> (2,'Sonam','kol'),
    -> (3,'Sumit','HYD'),
    -> (4,'priti','Mum'),
    -> (5,'Kunal','kol');
Query OK, 5 rows affected (0.18 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   1 | Rani  | Delhi   |
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+


mysql> CREATE TABLE sal
    -> (
    -> did int not null auto_increment primary key,
    -> dname varchar(40),
    -> empid int not null,
    -> CONSTRAINT cust_eid_fk
    -> FOREIGN KEY (empid) REFERENCES cust(eid)
    -> ON DELETE CASCADE
    -> );
Query OK, 0 rows affected (2.65 sec)

mysql> DESC sal;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| did   | int         | NO   | PRI | NULL    | auto_increment |
| dname | varchar(40) | YES  |     | NULL    |                |
| empid | int         | NO   | MUL | NULL    |                |
+-------+-------------+------+-----+---------+----------------+


mysql> INSERT INTO sal (dname,empid)
    -> VALUES ('IT',1),
    -> ('HR',1),
    -> ('ADMIN',1),
    -> ('IT',2),
    -> ('EXE',2),
    -> ('IT',3),
    -> ('EXE',3),
    -> ('IT',4),
    -> ('HR',5);
Query OK, 9 rows affected (0.22 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM sal;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |     1 |
|   2 | HR    |     1 |
|   3 | ADMIN |     1 |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+

mysql> DELETE FROM cust
    -> WHERE eid = 1;
Query OK, 1 row affected (0.36 sec)

mysql> SELECT * FROM cust;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM sal;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+

ON DELETE SET NULL in SQL
=========================
ON DELETE SET NULL ni use chesi parent table lo record ni delete chesthe
chaild table lo foreign key column lo unde related record lo NULL set suvthundi.


mysql> CREATE TABLE cust1
    -> (
    -> eid int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> ename varchar (40),
    -> address varchar (40)
    -> );
Query OK, 0 rows affected (1.88 sec)

mysql> DESC cust1;
+---------+-------------+------+-----+---------+----------------+
| Field   | Type        | Null | Key | Default | Extra          |
+---------+-------------+------+-----+---------+----------------+
| eid     | int         | NO   | PRI | NULL    | auto_increment |
| ename   | varchar(40) | YES  |     | NULL    |                |
| address | varchar(40) | YES  |     | NULL    |                |
+---------+-------------+------+-----+---------+----------------+
3 rows in set (0.16 sec)


mysql> INSERT INTO cust1(eid,ename,address)
    -> VALUES(1,'Rani','Delhi'),
    -> (2,'Sonam','kol'),
    -> (3,'Sumit','HYD'),
    -> (4,'priti','Mum'),
    -> (5,'Kunal','kol');
Query OK, 5 rows affected (0.15 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust1;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   1 | Rani  | Delhi   |
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+


mysql> CREATE TABLE sal1
    -> (
    -> did int not null auto_increment primary key,
    -> dname varchar(40),
    -> empid int,
    -> CONSTRAINT cust1_eid_fk
    -> FOREIGN KEY (empid) REFERENCES cust1(eid)
    -> ON DELETE SET NULL
    -> );
Query OK, 0 rows affected (2.18 sec)

mysql> DESC sal1;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| did   | int         | NO   | PRI | NULL    | auto_increment |
| dname | varchar(40) | YES  |     | NULL    |                |
| empid | int         | YES  | MUL | NULL    |                |
+-------+-------------+------+-----+---------+----------------+


mysql> INSERT INTO sal1(dname,empid)
    -> VALUES ('IT',1),
    -> ('HR',1),
    -> ('ADMIN',1),
    -> ('IT',2),
    -> ('EXE',2),
    -> ('IT',3),
    -> ('EXE',3),
    -> ('IT',4),
    -> ('HR',5);

mysql> select * from sal1;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |     1 |
|   2 | HR    |     1 |
|   3 | ADMIN |     1 |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+
9 rows in set (0.00 sec)


mysql> DELETE FROM cust1
    -> where eid = 1;
Query OK, 1 row affected (0.44 sec)

mysql> SELECT * FROM cust1;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+
4 rows in set (0.00 sec)


mysql> SELECT * FROM sal1;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |  NULL |
|   2 | HR    |  NULL |
|   3 | ADMIN |  NULL |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+
9 rows in set (0.11 sec)


ON DELETE NO ACTION (or) ON DELETE RESTRICT in SQL(both are same)
===========================================
ON DELETE NO ACTION (or) ON DELETE RESTRICT idi use chesthe "direct" ga parent 
table lo unde record ni delete cheyalemu..appudu munduga "child table" lo unde related
 records ni delete chesina tharuvatha.. appudu parent table lo delete cheyali..

	
mysql> CREATE TABLE cust2
    -> (
    -> eid int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> ename varchar (40),
    -> address varchar (40)
    -> );
Query OK, 0 rows affected (3.81 sec)

mysql> INSERT INTO cust2(eid,ename,address)
    -> VALUES(1,'Rani','Delhi'),
    -> (2,'Sonam','kol'),
    -> (3,'Sumit','HYD'),
    -> (4,'priti','Mum'),
    -> (5,'Kunal','kol');
Query OK, 5 rows affected (0.24 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust2;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   1 | Rani  | Delhi   |
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+


mysql> CREATE TABLE sal2
    -> (
    -> did int not null auto_increment primary key,
    -> dname varchar(40),
    -> empid int,
    -> CONSTRAINT cust2_eid_fk
    -> FOREIGN KEY (empid) REFERENCES cust2(eid)
    -> ON DELETE RESTRICT
    -> );
Query OK, 0 rows affected (2.54 sec)


mysql> INSERT INTO sal2(dname,empid)
    -> VALUES ('IT',1),
    -> ('HR',1),
    -> ('ADMIN',1),
    -> ('IT',2),
    -> ('EXE',2),
    -> ('IT',3),
    -> ('EXE',3),
    -> ('IT',4),
    -> ('HR',5);
Query OK, 9 rows affected (0.44 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM sal2;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |     1 |
|   2 | HR    |     1 |
|   3 | ADMIN |     1 |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+

mysql> DELETE FROM cust2(ela direct ga parent table lo unde record ni delete cheste error vasthundi)
    -> where eid = 1;
	ERROR vasthundi.....


 
mysql> DELETE FROM sal2
    -> WHERE did = 1;
Query OK, 1 row affected (1.12 sec)

mysql> DELETE FROM sal2
    -> WHERE did = 2;
Query OK, 1 row affected (1.83 sec)

mysql> DELETE FROM sal2
    -> WHERE did = 3;
Query OK, 1 row affected (0.21 sec)

mysql> SELECT * FROM sal2;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+

mysql> DELETE FROM cust2
    -> WHERE eid = 1;
Query OK, 1 row affected (0.19 sec)

mysql> SELECT * FROM cust2;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+


ON UPDATE Clause in SQL
=========================
. ON UPDATE CASCADE

. ON UPDATE SET NULL

. ON UPDATE NO ACTION

. ON UPDATE RESTRICT


ON UPDATE CASCADE in SQL
==========================
	ON UPDATE CASCADE idi use chesi parent table lo record ni update
chesthe automatice ga child table lo unde related record kuda update auvthai... 

mysql> CREATE TABLE cust3
    -> (
    -> eid int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> ename varchar (40),
    -> address varchar (40)
    -> );
Query OK, 0 rows affected (2.27 sec)

mysql> INSERT INTO cust3(eid,ename,address)
    -> VALUES(1,'Rani','Delhi'),
    -> (2,'Sonam','kol'),
    -> (3,'Sumit','HYD'),
    -> (4,'priti','Mum'),
    -> (5,'Kunal','kol');
Query OK, 5 rows affected (0.23 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust3;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   1 | Rani  | Delhi   |
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+
5 rows in set (0.00 sec)

mysql> CREATE TABLE sal3
    -> (
    -> did int not null auto_increment primary key,
    -> dname varchar(40),
    -> empid int,
    -> CONSTRAINT cust3_eid_fk
    -> FOREIGN KEY (empid) REFERENCES cust3(eid)
    -> ON UPDATE CASCADE
    -> );
Query OK, 0 rows affected (1.52 sec)

mysql> INSERT INTO sal3(dname,empid)
    -> VALUES ('IT',1),
    -> ('HR',1),
    -> ('ADMIN',1),
    -> ('IT',2),
    -> ('EXE',2),
    -> ('IT',3),
    -> ('EXE',3),
    -> ('IT',4),
    -> ('HR',5);
Query OK, 9 rows affected (0.36 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM sal3;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |     1 |
|   2 | HR    |     1 |
|   3 | ADMIN |     1 |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+


mysql> UPDATE cust3
    -> SET eid = 10
    -> WHERE eid = 1;
Query OK, 1 row affected (0.13 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM cust3;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
|  10 | Rani  | Delhi   |
+-----+-------+---------+
5 rows in set (0.04 sec)

mysql>
mysql> SELECT * FROM sal3;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |    10 |
|   2 | HR    |    10 |
|   3 | ADMIN |    10 |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+

*****************************************
Note :DELETE ,ON DELETE CASCADE, ON UPDATE CASCADE clause evi parent class 
meeda work chesthai...
*****************************************

ON UPDATE SET NULL in SQL
===========================
ON UPDATE SET NULL idi use chesi parent table lo record ni update chesthe
child table lo unde related records ki automatice ga  NULL set auvthundi....


mysql> CREATE TABLE cust4
    -> (
    -> eid int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> ename varchar (40),
    -> address varchar (40)
    -> );
Query OK, 0 rows affected (2.11 sec)

mysql> INSERT INTO cust4(eid,ename,address)
    -> VALUES(1,'Rani','Delhi'),
    -> (2,'Sonam','kol'),
    -> (3,'Sumit','HYD'),
    -> (4,'priti','Mum'),
    -> (5,'Kunal','kol');
Query OK, 5 rows affected (0.22 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust4;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   1 | Rani  | Delhi   |
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+

mysql> CREATE TABLE sal4
    -> (
    -> did int not null auto_increment primary key,
    -> dname varchar(40),
    -> empid int,
    -> CONSTRAINT cust4_eid_fk
    -> FOREIGN KEY (empid) REFERENCES cust4(eid)
    -> ON UPDATE SET NULL
    -> );
Query OK, 0 rows affected (1.07 sec)


mysql> INSERT INTO sal4(dname,empid)
    -> VALUES ('IT',1),
    -> ('HR',1),
    -> ('ADMIN',1),
    -> ('IT',2),
    -> ('EXE',2),
    -> ('IT',3),
    -> ('EXE',3),
    -> ('IT',4),
    -> ('HR',5);
Query OK, 9 rows affected (0.41 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM sal4;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |     1 |
|   2 | HR    |     1 |
|   3 | ADMIN |     1 |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+
9 rows in set (0.00 sec)


mysql> UPDATE cust4
    -> SET eid = 10
    -> WHERE eid = 1;
Query OK, 1 row affected (0.51 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM cust4;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
|  10 | Rani  | Delhi   |
+-----+-------+---------+
5 rows in set (0.00 sec)


mysql> SELECT * FROM sal4;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |  NULL |
|   2 | HR    |  NULL |
|   3 | ADMIN |  NULL |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+
9 rows in set (0.05 sec)


ON UPDATE NO ACTION or ON UPDATE RESTRICT in SQL(both are same)
===========================================
ON UPDATE NO ACTION or ON UPDATE RESTRICT idi use chesi direct ga parent table
 lo update cheyalemu...child table  lo kuda update cheyalemu..

mysql> CREATE TABLE cust5
    -> (
    -> eid int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> ename varchar (40),
    -> address varchar (40)
    -> );
Query OK, 0 rows affected (2.02 sec)

mysql> INSERT INTO cust5(eid,ename,address)
    -> VALUES(1,'Rani','Delhi'),
    -> (2,'Sonam','kol'),
    -> (3,'Sumit','HYD'),
    -> (4,'priti','Mum'),
    -> (5,'Kunal','kol');
Query OK, 5 rows affected (0.38 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust5;
+-----+-------+---------+
| eid | ename | address |
+-----+-------+---------+
|   1 | Rani  | Delhi   |
|   2 | Sonam | kol     |
|   3 | Sumit | HYD     |
|   4 | priti | Mum     |
|   5 | Kunal | kol     |
+-----+-------+---------+


mysql> CREATE TABLE sal5
    -> (
    -> did int not null auto_increment primary key,
    -> dname varchar(40),
    -> empid int,
    -> CONSTRAINT cust5_eid_fk
    -> FOREIGN KEY (empid) REFERENCES cust5(eid)
    -> ON UPDATE RESTRICT
    -> );
Query OK, 0 rows affected (0.87 sec)

mysql> INSERT INTO sal5(dname,empid)
    -> VALUES ('IT',1),
    -> ('HR',1),
    -> ('ADMIN',1),
    -> ('IT',2),
    -> ('EXE',2),
    -> ('IT',3),
    -> ('EXE',3),
    -> ('IT',4),
    -> ('HR',5);
Query OK, 9 rows affected (0.54 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM sal5;
+-----+-------+-------+
| did | dname | empid |
+-----+-------+-------+
|   1 | IT    |     1 |
|   2 | HR    |     1 |
|   3 | ADMIN |     1 |
|   4 | IT    |     2 |
|   5 | EXE   |     2 |
|   6 | IT    |     3 |
|   7 | EXE   |     3 |
|   8 | IT    |     4 |
|   9 | HR    |     5 |
+-----+-------+-------+
9 rows in set (0.00 sec)


mysql> UPDATE cust5
    -> SET eid = 10
    -> WHERE eid = 1;
ERROR vasthundi.. direct ga parent table lo chesthe...


mysql> UPDATE sal5
    -> SET empid = 10
    -> WHERE did = 1;

Error vasthundi child lo kuda,Update cheyalemu child table lo kuda..


Composite Key in SQL
====================
composite key ante Ookati kante ekkuva 'primary keys ni thisukunte
danini composite key antaru...(composite key is a primary key)

CREATE TABLE course(
Coursecode varchar (40),
Date date,
Cname varchar (40),
Seat int,
Remain int,
Room int,
Recapa int,
PRIMARY KEY (coursecode, date)
);


mysql> DESC course;
+------------+-------------+------+-----+---------+-------+
| Field      | Type        | Null | Key | Default | Extra |
+------------+-------------+------+-----+---------+-------+
| Coursecode | varchar(40) | NO   | PRI | NULL    |       |
| Date       | date        | NO   | PRI | NULL    |       |
| Cname      | varchar(40) | YES  |     | NULL    |       |
| Seat       | int         | YES  |     | NULL    |       |
| Remain     | int         | YES  |     | NULL    |       |
| Room       | int         | YES  |     | NULL    |       |
| Recapa     | int         | YES  |     | NULL    |       |
+------------+-------------+------+-----+---------+-------+


Shorthand Notation in SQL
=========================
Student,Exam Rendu Tables lo same column names unnappudu shorthand notation use
auvthundi..

	Syntax:Tablename.columnname

	EX: Student.rollno
	    Exam.rollno



How to Join Tables in SQL
==========================

Ooka table unde primary ni vere table low ki marusthe appudu Foreign key ga
change auvthundi ee process ne join antaru..	

	

CROSS JOIN in SQL 
====================
Note:Actually CROSS JOIN ni use cheyaru,Toic lo undi kabbati chepinadu
idi use chesthe system 'hang' auvthundi

	CROSS JOIN/Cartesian join/Cartesian product/Cross Product
	---------------------------------------------------------

The Cross Join returns every row from one table crossed with every row from
the second.

Theye are Two tables available
	Employee and Department

syntax:
	
	SELECT * FROM Employee CROSS JOIN Department;
	SELECT Name,Depname FROM Employee CROSS JOIN Department;
	SELECT * FROM Employee,Department;

	SELECT * FROM department,employee;} output vachesi different ga vasthai....
	SELECT * FROM employee,department;}



mysql> CREATE TABLE cust6(
    -> empid int auto_increment primary key,
    -> name varchar (40),
    -> city varchar (40)
    -> );
Query OK, 0 rows affected (1.73 sec)

mysql> DESC cust6;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| empid | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(40) | YES  |     | NULL    |                |
| city  | varchar(40) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+


mysql> INSERT INTO cust6(name,city)
    -> VALUES ('Rahul','Delhi'),
    -> ('Krish','kol'),
    -> ('jay','Mum');
Query OK, 3 rows affected (0.12 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust6;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | kol   |
|     3 | jay   | Mum   |
+-------+-------+-------+


mysql> CREATE TABLE sal6(
    -> did int primary key,
    -> depname varchar (40)
    -> );
Query OK, 0 rows affected (2.37 sec)

mysql> DESC sal6;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| did     | int         | NO   | PRI | NULL    |       |
| depname | varchar(40) | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+

mysql> INSERT INTO sal6(did,depname)
    -> VALUES (101,'IT'),
    -> (102,'HR'),
    -> (103,'Admin');
Query OK, 3 rows affected (0.11 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM sal6;
+-----+---------+
| did | depname |
+-----+---------+
| 101 | IT      |
| 102 | HR      |
| 103 | Admin   |
+-----+---------+
3 rows in set (0.00 sec)


mysql> SELECT name,depname FROM cust6 CROSS JOIN sal6;
+-------+---------+
| name  | depname |
+-------+---------+
| jay   | IT      |
| Krish | IT      |
| Rahul | IT      |
| jay   | HR      |
| Krish | HR      |
| Rahul | HR      |
| jay   | Admin   |
| Krish | Admin   |
| Rahul | Admin   |
+-------+---------+

mysql> SELECT name,depname FROM sal6 CROSS JOIN cust6;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | Admin   |
| Rahul | HR      |
| Rahul | IT      |
| Krish | Admin   |
| Krish | HR      |
| Krish | IT      |
| jay   | Admin   |
| jay   | HR      |
| jay   | IT      |
+-------+---------+

	CROSS JOIN(this is optional)
mysql> SELECT name,depname FROM sal6,cust6;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | Admin   |
| Rahul | HR      |
| Rahul | IT      |
| Krish | Admin   |
| Krish | HR      |
| Krish | IT      |
| jay   | Admin   |
| jay   | HR      |
| jay   | IT      |
+-------+---------+

mysql> SELECT * FROM sal6,cust6;
+-----+---------+-------+-------+-------+
| did | depname | empid | name  | city  |
+-----+---------+-------+-------+-------+
| 103 | Admin   |     1 | Rahul | Delhi |
| 102 | HR      |     1 | Rahul | Delhi |
| 101 | IT      |     1 | Rahul | Delhi |
| 103 | Admin   |     2 | Krish | kol   |
| 102 | HR      |     2 | Krish | kol   |
| 101 | IT      |     2 | Krish | kol   |
| 103 | Admin   |     3 | jay   | Mum   |
| 102 | HR      |     3 | jay   | Mum   |
| 101 | IT      |     3 | jay   | Mum   |
+-----+---------+-------+-------+-------+

mysql> SELECT * FROM cust6,sal6;
+-------+-------+-------+-----+---------+
| empid | name  | city  | did | depname |
+-------+-------+-------+-----+---------+
|     3 | jay   | Mum   | 101 | IT      |
|     2 | Krish | kol   | 101 | IT      |
|     1 | Rahul | Delhi | 101 | IT      |
|     3 | jay   | Mum   | 102 | HR      |
|     2 | Krish | kol   | 102 | HR      |
|     1 | Rahul | Delhi | 102 | HR      |
|     3 | jay   | Mum   | 103 | Admin   |
|     2 | Krish | kol   | 103 | Admin   |
|     1 | Rahul | Delhi | 103 | Admin   |
+-------+-------+-------+-----+---------+
9 rows in set (0.00 sec)


INNER EQUIJOIN in SQL
===================
An INNER JOIN  is a CROSS JOIN with some result rows removed by a condition
in the query.
	. ENUIJOIN	} 	 	
	. NON-EQUIJOIN	}
	. NATURAL JOIN	}ee 3 inner join lo work chesthai...


EQUIJOIN
--------
Note:EQUIJOIN means 'equal' ani artham...

Syntax:	
	SELECT table name.column_name FROM table1
	INNER JOIN table2
	ON column_name = column_name;



mysql> CREATE TABLE cust7(
    -> empid int auto_increment primary key,
    -> name varchar (40),
    -> city varchar (40)
    -> );
Query OK, 0 rows affected (0.50 sec)

mysql>
mysql> DESC cust7;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| empid | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(40) | YES  |     | NULL    |                |
| city  | varchar(40) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+

mysql> INSERT INTO cust7(name,city)
    -> VALUES ('Rahul','Delhi'),
    -> ('Krish','kol'),
    -> ('jay','Mum');
Query OK, 3 rows affected (0.24 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust7;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | kol   |
|     3 | jay   | Mum   |
+-------+-------+-------+
3 rows in set (0.00 sec)


mysql> CREATE TABLE sal7(
    -> did int primary key,
    -> depname varchar (40),
    -> empid int,
    -> CONSTRAINT cust7_id_fk
    -> FOREIGN KEY(empid) REFERENCES cust7(empid)
    -> );
Query OK, 0 rows affected (2.47 sec)

mysql> DESC sal7;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| did     | int         | NO   | PRI | NULL    |       |
| depname | varchar(40) | YES  |     | NULL    |       |
| empid   | int         | YES  | MUL | NULL    |       |
+---------+-------------+------+-----+---------+-------+

mysql> INSERT INTO sal7(did,depname,empid)
    -> VALUES (101,'IT',3),
    -> (102,'HR',1),
    -> (103,'Admin',2);
Query OK, 3 rows affected (0.16 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM sal7;
+-----+---------+-------+
| did | depname | empid |
+-----+---------+-------+
| 101 | IT      |     3 |
| 102 | HR      |     1 |
| 103 | Admin   |     2 |
+-----+---------+-------+
3 rows in set (0.11 sec)


mysql> SELECT cust7.name, sal7.depname FROM cust7
    -> INNER JOIN sal7
    -> ON cust7.empid = sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | HR      |
| Krish | Admin   |
| jay   | IT      |
+-------+---------+
3 rows in set (0.00 sec)

mysql>
mysql> SELECT cust7.name, sal7.depname FROM cust7
    -> INNER JOIN sal7
    -> ON sal7.empid = cust7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | HR      |
| Krish | Admin   |
| jay   | IT      |
+-------+---------+


mysql> SELECT cust7.name, sal7.depname FROM sal7
    -> INNER JOIN cust7
    -> ON cust7.empid = sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| jay   | IT      |
| Rahul | HR      |
| Krish | Admin   |
+-------+---------+
3 rows in set (0.00 sec)

mysql> SELECT cust7.name, sal7.depname FROM sal7
    -> INNER JOIN cust7
    -> ON sal7.empid = cust7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| jay   | IT      |
| Rahul | HR      |
| Krish | Admin   |
+-------+---------+

INNER NON-EQUIJOIN in SQL
========================
Note:NON-EQUIJOIN means "Not equal to" ani artham.

	. NON-EQUIJOIN <>
	SELECT tablename.column_name FROM table1
	INNER JOIN table2
	ON column_name <> column_name;



mysql> SELECT * FROM cust7;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | kol   |
|     3 | jay   | Mum   |
+-------+-------+-------+
3 rows in set (0.00 sec)

mysql> SELECT * FROM sal7;
+-----+---------+-------+
| did | depname | empid |
+-----+---------+-------+
| 101 | IT      |     3 |
| 102 | HR      |     1 |
| 103 | Admin   |     2 |
+-----+---------+-------+
3 rows in set (0.00 sec)


mysql> SELECT cust7.name, sal7.depname FROM sal7
    -> INNER JOIN cust7
    -> ON cust7.empid <> sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | Admin   |
| Rahul | IT      |
| Krish | HR      |
| Krish | IT      |
| jay   | Admin   |
| jay   | HR      |
+-------+---------+
6 rows in set (0.00 sec)

mysql> SELECT cust7.name, sal7.depname FROM cust7
    -> INNER JOIN sal7
    -> ON cust7.empid <> sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| Krish | IT      |
| Rahul | IT      |
| jay   | HR      |
| Krish | HR      |
| jay   | Admin   |
| Rahul | Admin   |
+-------+---------+


NATURAL JOIN in SQL 
====================
. NATURAL JOIN

  SELECT tablename.column_name FROM table1
  NATURAL JOIN table2;

Note:
-------
NATURAL JOIN process lo primary key,Foreign key column names same undali...

mysql> SELECT * FROM cust7;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | kol   |
|     3 | jay   | Mum   |
+-------+-------+-------+
3 rows in set (0.00 sec)

mysql> SELECT * FROM sal7;
+-----+---------+-------+
| did | depname | empid |
+-----+---------+-------+
| 101 | IT      |     3 |
| 102 | HR      |     1 |
| 103 | Admin   |     2 |
+-----+---------+-------+

mysql> SELECT cust7.name ,sal7.depname FROM sal7
    -> NATURAL JOIN cust7;
+-------+---------+
| name  | depname |
+-------+---------+
| jay   | IT      |
| Rahul | HR      |
| Krish | Admin   |
+-------+---------+
3 rows in set (0.00 sec)

mysql> SELECT cust7.name ,sal7.depname FROM cust7
    -> NATURAL JOIN sal7;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | HR      |
| Krish | Admin   |
| jay   | IT      |
+-------+---------+
3 rows in set (0.00 sec)		

Outer Join in SQL
=================
An outer joins returns all  rows from one of the tables, along with
matching information from another table.

	. LEFT OUTER JOIN/ LEFT JOIN	
	. RIGHT OUTER JOIN/RIGHT JOIN
	. FULL OUTER JOIN/FULL JOIN

LEFT OUTER JOIN/ LEFT JOIN
=======================
The LEFT JOIN keyword all rows from the left table,with the
matching rows in the right table.The result is NULL in the right side when
there is no match.
In a LEFT OUTER JOIN the table that comes before the  join is the left table
and the table that comes after the join is the right table.

Note: records match kakunte NULL vasthundi...

	syntax:
		SELECT tablename.Column_name FROM table1 (#Left Table) 
		LEFT JOIN table2 (#Right Table)
		ON column_name = column_name;

mysql> SELECT * FROM cust7;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | kol   |
|     3 | jay   | Mum   |
+-------+-------+-------+
3 rows in set (0.00 sec)

mysql> INSERT INTO cust7(name,city)
    -> VALUES ('Sonam','Hyd'),
    -> ('Mona','Patna');
Query OK, 2 rows affected (0.13 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust7;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | kol   |
|     3 | jay   | Mum   |
|     4 | Sonam | Hyd   |
|     5 | Mona  | Patna |
+-------+-------+-------+

mysql> SELECT * FROM sal7;
+-----+---------+-------+
| did | depname | empid |
+-----+---------+-------+
| 101 | IT      |     3 |
| 102 | HR      |     1 |
| 103 | Admin   |     2 |
+-----+---------+-------+
3 rows in set (0.12 sec)

mysql> INSERT INTO sal7(did,depname,empid)
    -> VALUES(104,'IT',1);
Query OK, 1 row affected (0.09 sec)

mysql> SELECT * FROM sal7;
+-----+---------+-------+
| did | depname | empid |
+-----+---------+-------+
| 101 | IT      |     3 |
| 102 | HR      |     1 |
| 103 | Admin   |     2 |
| 104 | IT      |     1 |
+-----+---------+-------+


mysql> SELECT * FROM cust7;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | kol   |
|     3 | jay   | Mum   |
|     4 | Sonam | Hyd   |
|     5 | Mona  | Patna |
+-------+-------+-------+
5 rows in set (0.08 sec)

mysql> SELECT * FROM sal7;
+-----+---------+-------+
| did | depname | empid |
+-----+---------+-------+
| 101 | IT      |     3 |
| 102 | HR      |     1 |
| 103 | Admin   |     2 |
| 104 | IT      |     1 |
+-----+---------+-------+


mysql> SELECT cust7.name, sal7.depname FROM cust7
    -> LEFT JOIN sal7
    -> ON cust7.empid = sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | HR      |
| Rahul | IT      |
| Krish | Admin   |
| jay   | IT      |
| Sonam | NULL    |
| Mona  | NULL    |
+-------+---------+

mysql> SELECT cust7.name, sal7.depname FROM sal7
    -> LEFT JOIN cust7
    -> ON cust7.empid = sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| jay   | IT      |
| Rahul | HR      |
| Krish | Admin   |
| Rahul | IT      |
+-------+---------+
4 rows in set (0.00 sec)

RIGHT OUTER JOIN in SQL
=======================
The RIGHT JOIN keyword returns all rows from the right table,with the
matching rows in the left table.The result is NULL in the left side when there
is no match.
In a RIGHT OUTER JOIN the table that comes before the join is the Right
table,and the table that comes after the join is  the Left table.

syntax:
	SELECT table name.Column_name FROM table1(#Right table)
	RIGHT JOIN table2 (# Left table)
	ON column_name = column_name;

mysql> SELECT cust7.name, sal7.depname FROM cust7
    -> RIGHT JOIN sal7
    -> ON cust7.empid = sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| jay   | IT      |
| Rahul | HR      |
| Krish | Admin   |
| Rahul | IT      |
+-------+---------+
4 rows in set (0.00 sec)


mysql> SELECT cust7.name, sal7.depname FROM sal7
    -> RIGHT JOIN cust7
    -> ON cust7.empid = sal7.empid;
+-------+---------+
| name  | depname |
+-------+---------+
| Rahul | HR      |
| Rahul | IT      |
| Krish | Admin   |
| jay   | IT      |
| Sonam | NULL    |
| Mona  | NULL    |
+-------+---------+
6 rows in set (0.00 sec)

FULL OUTER JOIN in SQL
==========================
The FULL OUTER JOIN returns all rows from the left table and from the right table.
The FULL OUTER JOIN combines the result of both LEFT and RIGHT joins.
	syntax:
		SELECT tablename.Column_name FROM table1
		FULL JOIN table2
		ON column_name =  column_name;


Note: try cheshanu error vasthundi...

	

What is Self Join in SQL
=========================
	self join is a table joined to itself.



Why do we need Self Join in SQL
=================================

	Theory chepinadu..


Self Join Example in SQL 
============================

mysql> CREATE TABLE empman
    -> (
    -> empid int(11) NOT NULL PRIMARY KEY,
    -> name varchar(40),
    -> manid int(11)
    -> );
Query OK, 0 rows affected, 2 warnings (3.34 sec)

mysql> DESC empman;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| empid | int         | NO   | PRI | NULL    |       |
| name  | varchar(40) | YES  |     | NULL    |       |
| manid | int         | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
3 rows in set (0.85 sec)


mysql> INSERT INTO empman(empid,name,manid)
    -> VALUES(1,'Rahul',3),
    -> (2,'Jay',3),
    -> (3,'Sonam',4),
    -> (4,'Kunal',5),
    -> (5,'Ram',6);
Query OK, 5 rows affected (0.17 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> INSERT INTO empman(empid,name)
    -> VALUES(6,'Rani');
Query OK, 1 row affected (0.06 sec)

mysql> INSERT INTO empman(empid,name,manid)
    -> VALUES(7,'Veeru',6);
Query OK, 1 row affected (0.13 sec)

mysql>
mysql> SELECT * FROM empman;
+-------+-------+-------+
| empid | name  | manid |
+-------+-------+-------+
|     1 | Rahul |     3 |
|     2 | Jay   |     3 |
|     3 | Sonam |     4 |
|     4 | Kunal |     5 |
|     5 | Ram   |     6 |
|     6 | Rani  |  NULL |
|     7 | Veeru |     6 |
+-------+-------+-------+
7 rows in set (0.00 sec)


mysql> SELECT e.name Name, m.name Manager
    -> FROM empman e
    -> INNER JOIN empman m
    -> ON e.manid = m.empid;
+-------+---------+
| Name  | Manager |
+-------+---------+
| Rahul | Sonam   |
| Jay   | Sonam   |
| Sonam | Kunal   |
| Kunal | Ram     |
| Ram   | Rani    |
| Veeru | Rani    |
+-------+---------+
Note: ee syntax lo Aslias use cheshamu..Aslias ledukada ani anukovadu
indulo kanipinchakunda aslias use cheshamu..

mysql> SELECT e.name Name, m.name Manager
    -> FROM empman e
    -> INNER JOIN empman m
    -> ON m.empid = e.manid;
+-------+---------+
| Name  | Manager |
+-------+---------+
| Rahul | Sonam   |
| Jay   | Sonam   |
| Sonam | Kunal   |
| Kunal | Ram     |
| Ram   | Rani    |
| Veeru | Rani    |
+-------+---------+
6 rows in set (0.00 sec)

mysql> SELECT  m.name Manager,e.name Name
    -> FROM empman e
    -> INNER JOIN empman m
    -> ON e.empid = m.manid;
+---------+-------+
| Manager | Name  |
+---------+-------+
| Rahul   | Sonam |
| Jay     | Sonam |
| Sonam   | Kunal |
| Kunal   | Ram   |
| Ram     | Rani  |
| Veeru   | Rani  |
+---------+-------+
6 rows in set (0.00 sec)

mysql> SELECT e.name Name, m.name Manager
    -> FROM empman e
    -> INNER JOIN empman m
    -> ON m.manid = e.empid;
+-------+---------+
| Name  | Manager |
+-------+---------+
| Sonam | Rahul   |
| Sonam | Jay     |
| Kunal | Sonam   |
| Ram   | Kunal   |
| Rani  | Ram     |
| Rani  | Veeru   |
+-------+---------+
6 rows in set (0.00 sec)

mysql> SELECT e.name Name, m.name Manager
    -> FROM empman e
    -> LEFT JOIN empman m
    -> ON e.manid = m.empid;
+-------+---------+
| Name  | Manager |
+-------+---------+
| Rahul | Sonam   |
| Jay   | Sonam   |
| Sonam | Kunal   |
| Kunal | Ram     |
| Ram   | Rani    |
| Rani  | NULL    |
| Veeru | Rani    |
+-------+---------+


mysql> CREATE TABLE cust8(
    -> stuid int (11),
    -> name varchar (40),
    -> city varchar (40)
    -> );
Query OK, 0 rows affected, 1 warning (2.11 sec)

mysql> DESC cust8;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| stuid | int         | YES  |     | NULL    |       |
| name  | varchar(40) | YES  |     | NULL    |       |
| city  | varchar(40) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

mysql> INSERT INTO cust8(stuid,name,city)
    -> VALUES(1,'Rahul','Delhi'),
    -> (2,'jay','Kol'),
    -> (3,'Sonam','Delhi'),
    -> (4,'Kunal','Hyd'),
    -> (5,'Ram','Delhi'),
    -> (6,'Rani','patna'),
    -> (7,'Veeru','Kol');
Query OK, 7 rows affected (0.34 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust8;
+-------+-------+-------+
| stuid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | jay   | Kol   |
|     3 | Sonam | Delhi |
|     4 | Kunal | Hyd   |
|     5 | Ram   | Delhi |
|     6 | Rani  | patna |
|     7 | Veeru | Kol   |
+-------+-------+-------+
7 rows in set (0.00 sec)

mysql> SELECT c2.name Name, c2.city City
    -> FROM cust8 c1
    -> INNER JOIN cust8 c2
    -> ON c1.city = c2.city AND c1.name = 'Rahul';
+-------+-------+
| Name  | City  |
+-------+-------+
| Rahul | Delhi |
| Sonam | Delhi |
| Ram   | Delhi |
+-------+-------+
3 rows in set (0.01 sec)

mysql> SELECT c1.name Name, c1.city City
    -> FROM cust8 c1
    -> INNER JOIN cust8 c2
    -> ON c1.city = c2.city AND c1.name = 'Rahul';
+-------+-------+
| Name  | City  |
+-------+-------+
| Rahul | Delhi |
| Rahul | Delhi |
| Rahul | Delhi |
+-------+-------+


 Replacing NULL in SQL
========================
		IFNULL()
		----------
		
Syntax:
	IFNULL(exp1,exp2)
	If exp1 is not NULL then IFNULL() return exp1 otherwise it returns exp2.

EX:
	SELECT IFNULL('GEEKY','SHOWS')AS Example

SELECT e.name Name, IFNULL(m.name, 'No Manager') AS Manager
FROM empman e
LEFT JOIN empman m
ON e.manid = m.empid;


mysql> SELECT * FROM empman;
+-------+-------+-------+
| empid | name  | manid |
+-------+-------+-------+
|     1 | Rahul |     3 |
|     2 | Jay   |     3 |
|     3 | Sonam |     4 |
|     4 | Kunal |     5 |
|     5 | Ram   |     6 |
|     6 | Rani  |  NULL |
|     7 | Veeru |     6 |
+-------+-------+-------+
7 rows in set (0.05 sec)

mysql> SELECT IFNULL('Geeky','show') AS Example;
+---------+
| Example |
+---------+
| Geeky   |
+---------+
1 row in set (0.00 sec)

mysql> SELECT IFNULL('NULL','show') AS Example;
+---------+
| Example |
+---------+
| NULL    |
+---------+
1 row in set (0.00 sec)


mysql> SELECT e.name Name, IFNULL(m.name, 'No Manager') AS Manager
    -> FROM empman e
    -> LEFT JOIN empman m
    -> ON e.manid = m.empid;
+-------+------------+
| Name  | Manager    |
+-------+------------+
| Rahul | Sonam      |
| Jay   | Sonam      |
| Sonam | Kunal      |
| Kunal | Ram        |
| Ram   | Rani       |
| Rani  | No Manager |
| Veeru | Rani       |
+-------+------------+

	COALESCE()
	---------

synatx:
	COALESCE(exp1,exp2.....expm);

EX:
	SELECT COALESCE(NULL,'Geekyhows') AS Example;

SELECT e.name Name, COALESCE(m.name,'No Manager') AS Manager
FROM empman e
LEFT JOIN empman m
ON e.manid = m.empid;

mysql> SELECT COALESCE(NULL, 'No Manager') AS Example;
+------------+
| Example    |
+------------+
| No Manager |
+------------+
1 row in set (0.02 sec)


mysql> SELECT COALESCE('Geekyshows', 'No Manager') AS Example;
+------------+
| Example    |
+------------+
| Geekyshows |
+------------+
1 row in set (0.00 sec)


mysql> SELECT e.name Name, COALESCE(m.name,'No Manager') AS Manager
    -> FROM empman e
    -> LEFT JOIN empman m
    -> ON e.manid = m.empid;
+-------+------------+
| Name  | Manager    |
+-------+------------+
| Rahul | Sonam      |
| Jay   | Sonam      |
| Sonam | Kunal      |
| Kunal | Ram        |
| Ram   | Rani       |
| Rani  | No Manager |
| Veeru | Rani       |
+-------+------------+
7 rows in set (0.00 sec)


UNION in SQL
=============
A UNION combines the results of more quires into one table.

Rules:-
	. The number of column in each SELECT statement must match	
	. The data types in the columns should be same.
	. The columns in each SELECT statement must be in  the same order.
	. Must have the same expressions and aggregate function in each SELECT statement
	. The UNION operator selects only distinct values by default and It doesn't select
	duplicate values.
EX:
	SELECT name fROM Student
	UNION
	SELECT name FROM Employee;


mysql> SELECT * FROM cust8;
+-------+-------+-------+
| stuid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | jay   | Kol   |
|     3 | Sonam | Delhi |
|     4 | Kunal | Hyd   |
|     5 | Ram   | Delhi |
|     6 | Rani  | patna |
|     7 | Veeru | Kol   |
+-------+-------+-------+
7 rows in set (0.00 sec)


mysql> CREATE TABLE cust9(
    -> empid int (5),
    -> name varchar (10),
    -> city varchar (10)
    -> );
Query OK, 0 rows affected, 1 warning (2.80 sec)

mysql> DESC cust9;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| empid | int         | YES  |     | NULL    |       |
| name  | varchar(10) | YES  |     | NULL    |       |
| city  | varchar(10) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
3 rows in set (0.17 sec)

mysql> INSERT INTO cust9(empid,name,city)
    -> VALUES (1,'Rahul','Delhi'),
    -> (2,'Krish','Kol'),
    -> (3,'Jay','Mum');
Query OK, 3 rows affected (0.27 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM cust9;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | Kol   |
|     3 | Jay   | Mum   |
+-------+-------+-------+
3 rows in set (0.11 sec)


mysql> SELECT name FROM cust8
    -> UNION
    -> SELECT name FROM cust9;
+-------+
| name  |
+-------+
| Rahul |
| jay   |
| Sonam |
| Kunal |
| Ram   |
| Rani  |
| Veeru |
| Krish |
+-------+


mysql> SELECT city FROM cust8
    -> UNION
    -> SELECT city FROM cust9;
+-------+
| city  |
+-------+
| Delhi |
| Kol   |
| Hyd   |
| patna |
| Mum   |
+-------+
5 rows in set (0.00 sec)

Note: UNION ante rendu table ni compare chesi andulo duplicate values ni thisivesi
separate ga result anedi 'new table' lo esthundi..



mysql> SELECT name AS StudentName FROM cust8
    -> UNION
    -> SELECT name AS StudentName FROM cust9;
+-------------+
| StudentName |
+-------------+
| Rahul       |
| jay         |
| Sonam       |
| Kunal       |
| Ram         |
| Rani        |
| Veeru       |
| Krish       |
+-------------+
8 rows in set (0.00 sec)


mysql> SELECT name AS StudentName FROM cust8
    -> UNION
    -> SELECT name AS StudentName FROM cust9 ORDER BY Studentname;
+-------------+
| StudentName |
+-------------+
| jay         |
| Krish       |
| Kunal       |
| Rahul       |
| Ram         |
| Rani        |
| Sonam       |
| Veeru       |
+-------------+

UNION ALL in SQL	
==================
UNION ALL returns every match whether it is duplicate or  distinct ones.

mysql> SELECT * FROM cust8;
+-------+-------+-------+
| stuid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | jay   | Kol   |
|     3 | Sonam | Delhi |
|     4 | Kunal | Hyd   |
|     5 | Ram   | Delhi |
|     6 | Rani  | patna |
|     7 | Veeru | Kol   |
+-------+-------+-------+
7 rows in set (0.00 sec)

mysql> SELECT * FROM cust9;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | Kol   |
|     3 | Jay   | Mum   |
+-------+-------+-------+
3 rows in set (0.00 sec)

mysql> SELECT name FROM cust8
    -> UNION ALL
    -> SELECT name FROM cust9;
+-------+
| name  |
+-------+
| Rahul |
| jay   |
| Sonam |
| Kunal |
| Ram   |
| Rani  |
| Veeru |
| Rahul |
| Krish |
| Jay   |
+-------+
10 rows in set (0.00 sec)

mysql> SELECT name FROM cust8
    -> UNION ALL
    -> SELECT name FROM cust9 ORDER BY name;
+-------+
| name  |
+-------+
| jay   |
| Jay   |
| Krish |
| Kunal |
| Rahul |
| Rahul |
| Ram   |
| Rani  |
| Sonam |
| Veeru |
+-------+
10 rows in set (0.00 sec)

INTERSECT and EXCEPT in SQL
========================
INTERSECT returns only those columns that are in the first query and also in the second query

NOte: Interset ante rendu table lo same unna records ni matrame esthundi..
-----

Syntax:
	SELECT name FROM cust8
	INTERSECT
	SELECT name FROM cust9;

	EXCEPT
	-------
EXCEPT returns only those columns that are in the first query but not in the
second query.
	
Syntax:
	SELECT name FROM cust8
	EXCEPT 
	SELECT name FROM cust9;

Note:EXCEPT ante rendu table lo duplicate(match) unna records ni remove chesi 
esthundi...anthey kakunda final ga "first table lo unde records ni matrame esthundi"..
yendukante second table lo unde records anevi first table ki match kakunte match kani 
vatini kuda skip chesthundi.


mysql> SELECT * FROM cust8;
+-------+-------+-------+
| stuid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | jay   | Kol   |
|     3 | Sonam | Delhi |
|     4 | Kunal | Hyd   |
|     5 | Ram   | Delhi |
|     6 | Rani  | patna |
|     7 | Veeru | Kol   |
+-------+-------+-------+
7 rows in set (0.00 sec)

mysql> SELECT * FROM cust9;
+-------+-------+-------+
| empid | name  | city  |
+-------+-------+-------+
|     1 | Rahul | Delhi |
|     2 | Krish | Kol   |
|     3 | Jay   | Mum   |
+-------+-------+-------+


Note:
INTERSECT and EXCEPT evi support cheyadam ledu..

===========================END================




	
		











	
	






 




	









	-






