
Note:
	1.Ikkada importent emity ante top to bottom povali code,
	2.bottom to top code podu okay na....

debugging
==========
	debugging means to find the error and took correct the error also..


Note:
	The 'try' block lets you test a block of code for errors.(1.try blocks anedi, try lo unde code lo errors unnayoo ledo 
									check chesthundi.okavella erros unte haa errors ni hadle
									cheyadaniki try nundi  'except' lo ki jump chesthundi.
								2.ledu try lo emi errors leuv annapudu code anedi try lo ne execute hai
								bayataku vasthundi.Errors unte ne except lo ki jump auvthundi lekunte jump kadu..)

	The 'except' block lets you handle the error. (try nunchi vachina haa error ni except handle chesthundi) 



			  raise Exception
			====================
If a specific "condition" occurs(ఏర్పడుతుంది), you can manually raise exceptions with a raise keyword.



Ex:
try: 
    f = open("C:/Users/BALAMURALI/Desktop/test.txt")
except: 
    print('Could not open file')
finally:
    f.close()

print('Program continue')

output
------
Program continue


EX:
try: 
    f = open("C:/Users/BALAMURALI/Desktop/good.txt") --->good.txt ane file ledu kabbati ee location lo error vasthundi..
except: 
    print('Could not open file')
finally:
    f.close()

print('Program continue')

output
------
Could not open file
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 6, in <module>
    f.close()
NameError: name 'f' is not defined



	((Specific ga "if condition" lo euuvali ante ela "raise Exception" ela euvvachunu..))
EX:
x = 10
if x > 5:
	raise Exception('x should not exceed 5.The value of x was: {}'.format(x))

output
-------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 3, in <module>
    raise Exception('x should not exceed 5.The value of x was: {}'.format(x))
Exception: x should not exceed 5(x 5కి మించకూడదు).The value of x was: 10

			(OR)

EX:
x = 2
if x > 5:
	raise Exception('x should not exceed 5.The value of x was: {}'.format(x))
print('Code is Executed..!!')
	
output
------
Code is Executed..!!



Ex:
student_age = int(input('Enter student age:'))

if student_age < 2:
	raise Exception("Sorry!,student age cannot be lower than 2") (క్షమించండి!, విద్యార్థి వయస్సు 2 కంటే తక్కువ ఉండకూడదు)

print('Student age higher then 2')
print('So code is executed!!')	

output
------
Enter student age:4
Student age higher then 2
So code is executed!!


output
-----
Enter student age:2
Student age higher then 2
So code is executed!!


output
-------
Enter student age:1
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 4, in <module>
    raise Exception("Sorry!,student age cannot be lower than 2")
Exception: Sorry!,student age cannot be lower than 2 (క్షమించండి!, విద్యార్థి వయస్సు 2 కంటే తక్కువ ఉండకూడదు)


output
------
Enter student age:-3
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 4, in <module>
    raise Exception("Sorry!,student age cannot be lower than 2")
Exception: Sorry!,student age cannot be lower than 2



EX:
student_age = int(input('Enter Student age:'))

if student_age > 2:
	raise Exception ("Sorry!,Student age cannot be Higher than 2 ")
	
print('The condition is true')
print('The code is End')

output
-------
Enter Student age:3
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 4, in <module>
    raise Exception ("Sorry!,Student age cannot be Higher than 2 ")
Exception: Sorry!,Student age cannot be Higher than 2


output
-------
Enter Student age:1
The condition is true
The code is End


EX:

try:
	raise Exception('spam','eggs') #args ante evi = spam,eggs
except Exception as inst:
	print(type(inst))
	print(inst.args)
	print(inst)

	x,y = inst.args
	print('x=', x)
	print('y=', y)	


output
-------
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x= spam
y= eggs

			raise ValueError
			====================

EX:
try:
	amount = 1999
	if amount < 2999:
		
		# raise the ValueError
		raise ValueError("Please add money in your account")

	else:
		print("You are eligible to purchase DSA Self Paced course")

# if false then raise the value error
except ValueError as e:
        print(e)			

output
------
Please add money in your account



EX:
while True:
	try:
		x = int(input("Please enter a number:"))
		break
	except ValueError:
		print('Oops! That was no valid number. Try again....')	


output
-------
Please enter a number:  # observe here ikkada number menction cheyaledu kabbati, again and again vasthune untundi...
Oops! That was no valid number. Try again....
Please enter a number:
Oops! That was no valid number. Try again....
Please enter a number:


output
--------
Please enter a number:2  #observe here ikkada number menction cheshamu kabbati, ikkadi varukey program end auvthundi..



Syntax:
	try:
		{Run This code}
	
	except:
		{Run this code if an exception occurs}
		(మినహాయింపు సంభవించినట్లయితే ఈ కోడ్‌ని అమలు చేయండి.)		

	else:	
		{Run this code if no exception occurs}
		(మినహాయింపు జరగకపోతే ఈ కోడ్‌ని అమలు చేయండి)

	finally
		{Always run this code}

	

		Exception
		=========
An exception is a runtime error which can be handled by the 'programmer'.
All exceptions are represented as classes in python.

Type of Exception
==================
1.	Built-in Exception -Exceptions which are already available in python Language.The
base class for all built-in exceptions is BaseException class.

2.	User Defined Exception -A programmer can create his own exceptions,called
User-defined exceptions.


Need of Exception Handling
==========================
1.When an exception occurs,the program terminates suddenly.
2.Suddenly termination of program may occupt the program.
3.Exception may cause data loss from the database or a file.


	Exception Handling
	=================

Try-The try block contains code which may cause exceptions.

	Syntax:
		Statements
	

Except - The except block is used to catch an exception that is raised in the try block.(ట్రై బ్లాక్‌లో లేవనెత్తిన మినహాయింపును క్యాచ్ చేయడానికి మినహా బ్లాక్ ఉపయోగించబడుతుంది.)
There can be multiple except block for try block.(ట్రై బ్లాక్ కోసం 'బ్లాక్ మినహా అనేకం' ఉండవచ్చు)

	syntax:
		except ExceptionName:
			statements

Else - This block will get executed when no exception is raised.Else block is executed after try block
	(మినహాయింపు లేకపోయినా ఈ బ్లాక్ అమలు చేయబడుతుంది. ప్రయత్నించిన తర్వాత బ్లాక్ ఎగ్జిక్యూట్ చేయబడుతుంది)
	syntax:
		else:
			statements

Finally - This block will get executed irrespective of whether there is an exception or not.
	  (మినహాయింపు ఉందా లేదా అనే దానితో సంబంధం లేకుండా ఈ బ్లాక్ అమలు చేయబడుతుంది)	
	syntax:
		finally:
			statements


1.We can write several except blocks for a single try block.
2.we can write multiple except blocks to handle multiple exceptions.
3.we can write block without any except blocks.
4.we can not write except block without a try block.
5.Finally block is always executed irrespective of whether there is an exception or not.
6.Else block is optional
7.Finally block is optional


EX:1
try:
	statement

except ExceptionClassName:
	Statement

else:			#Optional
	Statement

finally:		#Optional
	Statement


OR

try:
	Statement
except ExceptionClassName:
	statement



EX:2(Multiple Exception blocks)

try:
	Statement

except ExceptionClassName1:
	Statement

except ExceptionClassName2:
	Statement



Except
---------
1.with the ExceptionClass Name
	except ExceptionClassName:
		Statement

2.Exception as an object
	except ExceptionClassName as obj:
		Statement

3.Multiple Exception within tuple
	except(ExceptionClassName1,ExceptionClassName2,ExceptioncClassName3,......):
		Statement

4.Catch any Type of Exception
	except:
		Statement

------------Theory complete----------


Note: ela yee errors naina handle  cheyadaniki supparat supparat  ga except errors untai okay na.. example ga nenu
ZeroDivisionError, IndexError ni chupinchanu inka untai google lo chudu..


	ZeroDivisionError
	------------------

ZeroDivisionError anedi only "Division zero tho chesina" Error ni matrame handle chesthundi.


EX:
def this_fails():
	x = 1/0

try:
	this_fails()

except ZeroDivisionError as err:
	print('Handling run-time error:',err)		

output
-------
Handling run-time error: division by zero


EX:
L = [22,33,44,55]

try:
	print(L[3])
	print(100/0) ---->Look here
	print(L[0])

except:                  # ela only 'except' anipedithey anni errors  ni handle chesthundi ani..artham
	print("Exception Generated...")

print("End of Program...")		


EX:

L = [22,33,44,55]

try:
	print(L[3])
	print(100/0)
	print(L[0])

except ZeroDivisionError:
	print("Division 0 is not correct")

print("End of Program...")		

output
-------
55
Exception Generated...
End of Program...


EX:
try:
	numerator = int(input('Enter numerator:'))
	denominator = int(input('Enter denominator:'))

	result  = numerator/denominator
	print(result)

except:                # ela only 'except' anipedithey anni errors  ni handle chesthundi ani..artham

	print('Denominator cannot be 0. Please try again')

print("Program End!!")

output
------
Enter numerator:12
Enter denominator:0
Denominator cannot be 0. Please try again
Program End

EX:
try:
	numerator = int(input('Enter numerator:'))
	denominator = int(input('Enter denominator:'))

	result  = numerator/denominator
	print(result)

except ZeroDivisionError:
	print('Denominator cannot be 0. Please try again')

print("Program End!!")		

  	
output
------
Enter numerator:10
Enter denominator:0
Denominator cannot be 0. Please try again
Program End!!


	IndexError
	----------
EX:
L = [11,22,33,44]
a = L[6]
print(a)

outptu
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 2, in <module>
    a = L[6]
IndexError: list index out of range


Ex:python program just you will analysis
L = [11,22,33,44]
a = L[3]
print(a)

output
------
44  -------->ela ravali answer index number esthey


Ex:
L = [11,22,33,44]

try:
	print(L[3])
	print(L[4])
	print(L[0])

except IndexError:
	print("You are enter Wrong index number try again!!")

print("End of Program...")		

output
------
44
You are enter Wrong index number try again!!
End of Program...



EX:
	my_list = [1,2,3]
	i  =int(input('Enter index:'))
	print(my_list[i])
	
output
------
Enter index:5
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 16, in <module>
    print(my_list[i])
IndexError: list index out of range

output
------
Enter index:2
3

**Note: ela indexError vachinappudu, try lo except lo ela handle cheyali

EX:

L = [22,33,44,55]

try:
	print(L[3])
	print(L[7])
	print(L[0])

except IndexError:
	print("Index out of the range...")

print("End of Program...")

output
-----
55
Index out of the range...
End of Program...		



EX:

try:
	my_list = [1,2,3]
	i  =int(input('Enter index:'))
	print(my_list[i])

except IndexError:
	print("Index cannot be greater than size of list.")	

print("Program End!!")		



output
-----
Enter index:6
Index cannot be greater than size of list.
Program End!!


output
------
Enter index:2
3
Program End!!


EX:

try:
	numerator = int(input('Enter numerator:'))
	denominator = int(input('Enter denominator:'))

	result  = numerator/denominator
	print(result)

	my_list = [1,2,3]
	i  =int(input('Enter index:'))
	print(my_list[i])

except ZeroDivisionError:
	print('Denominator cannot be 0. Please try again')


except IndexError:
	print("Index cannot be greater than size of list.")	

print("Program End!!")		


output
------
Enter numerator:5
Enter denominator:2
2.5
Enter index:2
3
Program End!!

output
-------
Enter numerator:3
Enter denominator:0
Denominator cannot be 0. Please try again
Program End!!


output
------
Enter numerator:2
Enter denominator:1
2.0
Enter index:4
Index cannot be greater than size of list.
Program End!!


			NameError
			==========

Raised when a 'variable' is not found in local or global scope
(స్థానిక లేదా ప్రపంచ పరిధిలో ఒక 'వేరియబుల్' కనిపించనప్పుడు లేవనెత్తబడింది)

*********************************
Note: particular ga Error ekkada undi ani thelusukovali ante ela rayali "Exception"

EX:

a = b

output
-----
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    a = b  #a ku value vachesi b, b ku value ekkada undi.
NameError: name 'b' is not defined


(OR)


EX:
try:
	a = b
except Exception as e:
	print(e)

output
------
name 'b' is not defined
*********************************

EX:

	a = b     ##a ku value vachesi b, b ku value ekkada undi.

ouptut
-----
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    a = b  #a ku value vachesi b, b ku value ekkada undi.
NameError: name 'b' is not defined


EX:

try:
	a = b

except:
	print("Some problem may have occured")	

output
-------
Some problem may have occured
		


EX:
L1 = [22,33,44,55]
print(L[3])

output
-------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 2, in <module>
    print(L[3])
NameError: name 'L' is not defined


Ex:
L1 = [22,33,44,55]

try:
	print(L1[3])
	print(L[1])
	print(L1[0])

except NameError:
	print("Sorry! NameError Try agian okay")

print("End of Program...")		

output
------

55
Sorry! NameError Try agian okay
End of Program...



EX:
a = "Hello i am a Student"
b = "Ok"
print(a + c)

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 3, in <module>
    print(a + c)
NameError: name 'c' is not defined---------------------->Look here


EX:
try:
	a = "Hello i am a Student"
	b = "Ok"
	c = a + b
	print(z)

except NameError:
	print("Sorry! NameError Try agian okay")

print("End of Program...")

output
------
Sorry! NameError Try agian okay
End of Program...		


EX:
a = 12
b = 16
print(a + m)

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 3, in <module>
    print(a + m)
NameError: name 'm' is not defined



EX:
a = 12
b = 16

try:
	print(a + m)

except NameError:
	print("Sorry! NameError Try agian okay")

print("End of Program...")		

output
------
Sorry! NameError Try agian okay
End of Program...




EX:
try:
	print(x)

except NameError:
	print("variable x is not defined")

output
-------
variable x is not defined


EX:
try:
	x = 20
	y = 10
	z = x + y
	print(f'c value is:{z}')

except NameError:
	print("variable x is not defined")

output
------
c value is:30


		Syntax Errors
		=============
syntax error ante starting and colsing semicoluns same undali


EX:

print("I am Murali')

output
------
 File "C:\Users\BALAMURALI\Desktop\python.py", line 1
    print("I am Murali')
                       ^
SyntaxError: EOL while scanning string literal


EX:
try:
	print("Hello I am Murali')

output
------
  File "C:\Users\BALAMURALI\Desktop\python.py", line 2
    print("Hello I am Murali')
                             ^
SyntaxError: EOL while scanning string literal--->like this



		Type Error
		===========
Ex:

print('Hello'+2)

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    print('Hello'+2)
TypeError: can only concatenate str (not "int") to str


EX:
a = 'Hello'
b = 12
c = a + b
print(c)

output
-----
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 3, in <module>
    c = a + b
TypeError: can only concatenate str (not "int") to str----------------->look here...


EX:
L1 = [22,3,55]
T = (4,56,67)
print(L1+T)

output
-------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 3, in <module>
    print(L1+T)
TypeError: can only concatenate list (not "tuple") to list


		ValueError
		============
ValueError is thrown when a finction's argument is of an inappropriate type.

Ex:


EX:
a = int(input('Ener value:'))
print(a)

ouptut
------
Ener value:22
22


EX:
a = int(input('Ener value:'))
print(a)


output
------
Ener value:xyz
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    a = int(input('Ener value:'))
ValueError: invalid literal for int() with base 10: 'xyz' ---------->look here



EX:
a = int(input('Ener Float value:'))
print(a)

outptu
-----
Ener Float value:23.6
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    a = int(input('Ener Float value:'))
ValueError: invalid literal for int() with base 10: '23.6'




EX:
a = float(input('Ener Float value:'))
print(a)

output
------
Ener Float value:2.3
2.3


EX:
a = float(input('Ener Float value:'))
print(a)

outptu
------
Ener Float value:jik
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    a = float(input('Ener Float value:'))
ValueError: could not convert string to float: 'jik'---------->look here



		ModuleNotFoundError
		====================
ModuleNotFoundError  is thrown when a module could not be found.

EX:

	import maths-->maths anedi python lo lene ledu okay appudu errorvasthundi

output
-------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    import maths
ModuleNotFoundError: No module named 'maths'


EX:

	import social ------->social anedi python lo lene ledu okay appudu errorvasthundi

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    import social
ModuleNotFoundError: No module named 'social'

		
			ImportError
			------------
ImportError is thrown when a specified function cannot be found


EX:
from math import sqrt --------->math lo sqrt function undi kabatti error radu..
a = sqrt(144)
print(a)

output
-----
12.0


Ex:
from math import cube -->math lo cube function  undadu kabatti importError vasthundi.
a = cube(144)
print(a)

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 1, in <module>
    from math import cube
ImportError: cannot import name 'cube' from 'math' (unknown location)


		KeyError
		---------
KeyError is thrown when a key is not found.This exception is raised when a mapping(dictionary)key
is not found in the set of existing keys.


EX:
emp_dict = {'Name':'Murali', 'ID':1}

emp_id = emp_dict['ID']
print('The Employee ID is {}'.format(emp_id))

emp_role = emp_dict['Role']
print(emp_role)


output
-----
The Employee ID is 1

Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 6, in <module>
    emp_role = emp_dict['Role']
KeyError: 'Role'

			(OR)--->handle the KeyError

emp_dict = {'Name':'Murali', 'ID':1}
try:
	emp_id = emp_dict['ID']
	print('The Employee ID is {}'.format(emp_id))

	emp_role = emp_dict['Role']
	print(emp_role)

except KeyError as ke:
	print('Key Not Found in Employee Dictionary:',ke)



EX:
a = {1:'Hello',2:'Good',3:"Nice"}
c = a[2]
print(c)

output
-------
Good

EX:

a = {1:'Hello',2:'Good',3:"Nice"}
c = a[4]
print(c)

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 2, in <module>
    c = a[4]
KeyError: 4  ----------->look  here


EX:
a = {"name":"BalaMurali","age":26,"Color":"Black","city":"NDK"}
b = a['name']
print(b)

output
------
BalaMurali


EX:
a = {"name":"BalaMurali","age":26,"Color":"Black","city":"NDK"}
b = a['village']
print(b)


output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 5, in <module>
    b = a['village']
KeyError: 'village' ----------->look  here


		EOFError
		---------
EOFError raised when the imput() function hits the end-of-file condition.




		How to Handle Exceptions
		---------------------------
In python,exceptions can be handled using a try statement.

try: The critical operation which can raise an exception is placed inside the try clause.

except: The code that handles the exceptions is written in the except clause.




		Syntax
		--------

	try:
		statements that generate exceptions

	except:	

		statement(s) to handle exceptions



            finally block
	  ----------------	

finally block anedi  try,except blocks execute aina auvakapoina finally block execute authundi.

EX:

try:
	numerator = int(input('Enter numerator:'))
	denominator = int(input('Enter denominator:'))

	result  = numerator/denominator
	print(result)

except ZeroDivisionError:
	print('Denominator cannot be 0. Please try again')

finally:
	print('Always printed')	

print("Program End!!")		


output
------
Enter numerator:3
Enter denominator:2
1.5
Always printed
Program End!!


output
------
Enter numerator:3
Enter denominator:0
Denominator cannot be 0. Please try again
Always printed
Program End!!


EX:
try:
	my_list = [1,2,3]
	i  =int(input('Enter index:'))
	print(my_list[i])

except IndexError:
	print("Index cannot be greater than size of list.")	

finally:
	print('Always printed')	

print("Program End!!")		

output
-------
Enter index:3
Index cannot be greater than size of list.
Always printed
Program End!!


output
------
Enter index:2
3
Always printed
Program End!!



EX:

try:
	numerator = int(input('Enter numerator:'))
	denominator = int(input('Enter denominator:'))

	result  = numerator/denominator
	print(result)

	my_list = [1,2,3]
	i  =int(input('Enter index:'))
	print(my_list[i])

except ZeroDivisionError:
	print('Denominator cannot be 0. Please try again')


except IndexError:
	print("Index cannot be greater than size of list.")	

finally:
	print('Always printed')	

print("Program End!!")	


output
------
Enter numerator:2
Enter denominator:0
Denominator cannot be 0. Please try again
Always printed ----> look here
Program End!!


output
------
Enter numerator:2
Enter denominator:1
2.0
Enter index:5
Index cannot be greater than size of list.
Always printed ---->look here
Program End!!


output
-----
Enter numerator:2
Enter denominator:3
0.6666666666666666
Enter index:2
3
Always printed --->look here
Program End!!


		else block
		-----------

else block anedi, try block lo unna 'mootham code' execute aitheyne else block lo unna code execute auvthundi
try block lo error vasthe else block execute kadu..appudu haa error ni try block vachesi 'except lo ki' pampisthundi
idi nuv handle cheai ani..

EX:
try:
	print("Hello I am Murali")

except:
	print("Something went wrong")

else:
	print("Nothing went wrong")		

output
------
Hello I am Murali
Nothing went wrong


Ex:

try:
	numerator = int(input('Enter numerator:'))
	denominator = int(input('Enter denominator:'))

	result  = numerator/denominator
	print(result)

except ZeroDivisionError:
	print('Denominator cannot be 0. Please try again')

else:
	print('ok')

finally:
	print('Always printed')	

print("Program End!!")


output
------
Enter numerator:3
Enter denominator:0
Denominator cannot be 0. Please try again
Always printed
Program End!!

output
-------

Enter numerator:3
Enter denominator:5
0.6
ok
Always printed
Program End!!


EX:
try:
	numerator = int(input('Enter numerator:'))
	denominator = int(input('Enter denominator:'))

	result  = numerator/denominator
	print(result)

	my_list = [1,2,3]
	i  =int(input('Enter index:'))
	print(my_list[i])

except ZeroDivisionError:
	print('Denominator cannot be 0. Please try again')


except IndexError:
	print("Index cannot be greater than size of list.")	

else:
	print('Ok')

finally:
	print('Always printed')	

print("Program End!!")


output
------
Enter numerator:3
Enter denominator:0
Denominator cannot be 0. Please try again
Always printed
Program End!!

output
------
Enter numerator:3
Enter denominator:2
1.5
Enter index:4
Index cannot be greater than size of list.
Always printed
Program End!!

output
------
Enter numerator:2
Enter denominator:3
0.6666666666666666
Enter index:2
3
Ok
Always printed
Program End!! 


Ex:

try:
	my_list = [1,2,3]
	i  =int(input('Enter index:'))
	print(my_list[i])

except IndexError:
	print("Index cannot be greater than size of list.")	

else:
	print('ok')	

finally:
	print('Always printed')	

print("Program End!!")

output
------
Enter index:3
Index cannot be greater than size of list.
Always printed
Program End!!

output
------
Enter index:2
3
ok
Always printed
Program End!!



EX:
a = 10
b = 5
d = a/b
print(d)
print('Rest of the code')

output
------
2.0
Rest of the code


EX:
a = 10
b = 0 #---->0 tho division cheyakudadu rule anthey.
d = a/b
print(d)
print('Rest of the code')

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 3, in <module>
    d = a/b
ZeroDivisionError: division by zero

note:ela error vasthundi.appudu e error ni handle cheyali ante 'exception' use cheyali.


****************************************************
Note:
	try lo rasina code error vasthundi(error throw chesthundi) ani anipisthe, ahh error ni handle
cheyadaniki 'except' block lo ahh error ni handle cheyavachunu. 
******************************************************

EX:
a = 10
b = 5 
try:
	d = a/b
	print(d)
except ZeroDivisionError:
	print('Division by Zero Not Allowed')
		
print('Rest of the code')

output
------
2.0
Rest of the code


EX:

a = 10
b = 5

try:
	c = a/b
	print(f'c value is:{c}')

except ZeroDivisionError:
	print('Zero Division Not Allowed')

print('Rest of the code')	

output
------
c value is:2.0
Rest of the code




EX:
a = 10
b = 0 
try:
	d = a/b
	print(d)
except ZeroDivisionError:
	print('Division by Zero Not Allowed')

print('Rest of the code')

output
------
Division by Zero Not Allowed
Rest of the code


EX:
a = 10
b = 5 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError:
	print('Division by Zero Not Allowed')

print('Rest of the code')

output
------
2.0
Inside Try
Rest of the code


EX:
a = 10
b = 0 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError:
	print('Division by Zero Not Allowed')

print('Rest of the code')

output
------
Division by Zero Not Allowed
Rest of the code


EX:
a = 10
b = 5 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError:
	print('Division by Zero Not Allowed')

else:
	print('Inside Else')	

print('Rest of the code')

output
------
2.0
Inside Try
Inside Else
Rest of the code



EX:
a = 10
b = 0 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError:
	print('Division by Zero Not Allowed')

else:
	print('Inside Else')	

print('Rest of the code')

output
-----
Division by Zero Not Allowed
Rest of the code



EX:
a = 10
b = 5 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError:
	print('Division by Zero Not Allowed')

else:
	print('Inside Else')

finally:
	print('Inside Finally')		

print('Rest of the code')

output
------
2.0
Inside Try
Inside Else
Inside Finally
Rest of the code


EX:
a = 10
b = 0 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError:
	print('Division by Zero Not Allowed')

else:
	print('Inside Else')

finally:
	print('Inside Finally')		

print('Rest of the code')

output
------
Division by Zero Not Allowed
Inside Finally
Rest of the code



EX:

a = 10
b = 0 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError as obj:
	print(obj)
	

print('Rest of the code')

output
-------
division by zero
Rest of the code



EX:
a = 10
b = 5 
try:
	d = a/b
	print(d)
	print('Inside Try')

except ZeroDivisionError as obj:
	print(obj)
	

print('Rest of the code')

output
------
2.0
Inside Try
Rest of the code


Ex:
a = 10
b = 0 
try:
	d = a/b
	print(d)
	

except ZeroDivisionError as obj:
	print(obj)

except NameError as ob:
	print(ob)	

print('Rest of the code')

outout
-------
division by zero
Rest of the code



EX:
a = 10
b = 0 
try:
	d = a/c---->kavalani rashanu.NameError ela vasthundo chudam ani.
	print(d)
	

except ZeroDivisionError as obj:
	print(obj)

except NameError as ob:
	print(ob)	

print('Rest of the code')

output
-------
name 'c' is not defined
Rest of the code


EX:
a = 10
b = 0 
try:
	d = a/b
	print(d)
	

except (NameError,ZeroDivisionError) as obj:
	print(obj)
	

print('Rest of the code')

output
------
division by zero
Rest of the code


EX:
a = 10
b = 0 
try:
	d = a/c
	print(d)
	

except (NameError,ZeroDivisionError) as obj:
	print(obj)
	

print('Rest of the code')

output
------
name 'c' is not defined
Rest of the code



EX: 
a = 10
b = 0 
try:
	d = a/c
	print(d)
	
except:		#(ExceptionClassName mention cheyakunda ela kuda simple ga rayavachunu)	
	print('Exception Handler')

print('Rest of the code')

output
------
Exception Handler
Rest of the code


EX:
a = 10
b = 0 
try:
	d = a/b
	print(d)
	
except:
	print('Exception Handler')

print('Rest of the code')


output
-------
Exception Handler
Rest of the code


Assert Statement in Python
=============================
The assert Statement is useful to ensure that a given condition is True.If it is
not true,it raises AssertionError.

	syntax: assert condition,error_message

	1.If the condition is False then the exception by the name AssertionError is 
	raised along with the message.
	
	2.If message is not given and the condition is False then also AssertionError
	is raised without message.

EX:
a = 20
assert a <= 10

output
------
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 2, in <module>
    assert a <= 10
AssertionError  -------->Look here


EX:

a = 20
assert a <= 10,'Invalid Number'

output
-----
Traceback (most recent call last):
  File "C:\Users\BALAMURALI\Desktop\python.py", line 2, in <module>
    assert a <= 10,'Invalid Number'
AssertionError: Invalid Number ------>Look here
		

EX:
a = 10
assert a <= 10,'Invalid Number'

output
------
output vachindi adi kanabadadu.




Difference between Error and Exception in Python
===============================================
	1.An exception is an error that can be handled by a programmer.
	2.An exception which are not handled by programmer,becomes an error.
	3.All exceptions occur only at runtime.
	4.Error may occur at compile time or runtime.




User Defined Exception in Python
==================================
A Programmer can create his own exceptions, called user-defined exceptions or Custom Exception.
	1.Creating Exception Class using Exception Class as a Base Class
	2.Raising Exception
	3.Handling Exception


Creating Exception
--------------------
We can create our own exception by creating a sub class to built-in Exception class.

	syntax:
		class MyException(Exception):
			pass
		class MyException(Exception):
			def __init__(self,arg):
				self.msg = arg




Raising Exception
-------------------
raise statement is used to raise the user defined exception.
	synatx:
		raise MyException('message')


Handling Exception
-----------------
Using try and except block programmer can handle exceptions.
	syntax:
		try:
			statement

		except MyException as mye:
			Statement




EX:

class BalanceException(Exception):
	pass

def checkbalance():
	money = 10000
	withdraw = 5000
	balance = money - withdraw
	print(balance)

checkbalance()		


output
-----
5000





EX:
class BalanceException(Exception):
	pass

def checkbalance():
	money = 10000
	withdraw = 5000 ---->Look here
	try:
		balance = money - withdraw
		if(balance <= 2000):
			raise BalanceException('Insufficient Balance')
		print(balance)
	except BalanceException as be:
		print(be)	

checkbalance()		

output
-------
5000


EX:
class BalanceException(Exception):
	pass

def checkbalance():
	money = 10000
	withdraw = 9000------>Look here
	try:
		balance = money - withdraw
		if(balance <= 2000):
			raise BalanceException('Insufficient Balance')
		print(balance)
	except BalanceException as be:
		print(be)	

checkbalance()		

output
-------
Insufficient Balance


(OR)



EX:
class BalanceException(Exception):
	pass

def checkbalance():
	money = 10000
	withdraw = 4000
	balance = money - withdraw
	if(balance <= 2000):
		raise BalanceException('Insufficient Balance')
	print(balance)

try:
	checkbalance()		

except BalanceException as be:
	print(be)		

output
------
6000


EX:
class BalanceException(Exception):
	pass

def checkbalance():
	money = 10000
	withdraw = 9000
	balance = money - withdraw
	if(balance <= 2000):
		raise BalanceException('Insufficient Balance')
	print(balance)

try:
	checkbalance()		

except BalanceException as be:
	print(be)		

output
------

Insufficient Balance




Difference between Error and Warning in Python
=============================================
It is compulsory to handle all error otherwise program will not
exceute,while warning represents a caution and even though it is
not handled,the program will exceute.

Errors are derived as sub class 'StandardError',While warning derived as sub class
from 'Warning' class.




Logging in Python
=================

	Logging is useful to track the error or exception or information.It
also helps in debugging.

we use Logging Module to log  the error.

syntax:
	import logging	
	from logging import *


basicConfig(**kwargs)Method
===========================
	This method is used to 	config the logging system.

syntax:
	basicConfig(**kwargs)

1.filename -It specifies that a FileHandler be crated,using the specified filename,
rather than a StreamHandler.
2.filemode - IF filename is specified,open the file in this mode.Defaults to 'a'. We
can write 'w'
3.level - Set the root logger level to the  specified level.
4.format - Use the specified format string for the handler.
5.datefmt -Use the specified data/time format,as accepted by time.strftime()
6.style -If format is specified,use this style for the format string.One of '%','{' or'$'
for printf-style,str.format() or string.Template respectively.Defaults to '%'.


Levels
------
NOTSET - 0
DEBUG - 10
INFO - 20
WARNING - 30
ERROR - 40
CRITICAL - 50

Methods
-----------
getLogger()-This method returns a logger with the specified name or,if name is None,return a
logger which is the root logger of the hierarchy if specified,the name is typically a dot -separated
hierarchical name like 'a','a.b', or 'a.b.c.d'.

info(msg) - This will log a message with level INFO on this logger.

warning(msg) - This will log a message with level WARNING on this logger.

error(msg) - This islog a message with level ERROR on this logger.

critical(msg) - This will log a message with level CRITICAL on this logger

exception(msg) - This will log a message with level ERROR on this  logger.


Format
----------
Format can take a string with LogRecord attributes in any arrangement you like

asctime - Human-readable time when the LogRecord was created.By default this is 
of the form '2003-07-08 16:49:45,896'(the numbers after the comma are millisecond portion of the time).

EX:%(asctime)s

created - Time when the LogRecord was created(as returned by time.time()).
EX:%(created)f

filename - Filename portion of pathname.

LogRecord attributes
-------------------
levelname - Text logging level for the message('DEBUG','INFO','WARNING','ERROR','CRITICAL').
	EX:%(levelname)s

levelno - Numeric logging level for the message('DEBUG','INFO','WARNING','ERROR','CRITICAL').

	EX:%(levelno)s

lineno - Source line number where the logging call was issued(if available)

message - The logged message,computed as msg % args.This is set when Formatter.format() is invoked.

	EX:%(message)s
name -Name of the logger used to log the call

	Ex:%(name)s

pathname - Full pathname of the source file where the logging call was issued(if available)
	EX:%(pathname)s

args,exc_info,funcname,module,msecs,msg,process,processname,relativecreated,stack_info,thread,threadname.

EX:
from logging import *
warning('This is warning')
error('This is error')
critical('This is critical')
debug('This is Debug')
info('This is Ingo')


output
------
WARNING:root:This is warning
ERROR:root:This is error
CRITICAL:root:This is critical

Note:debug,info viti output's kanipinchauv.

EX:
from logging import *

basicConfig(filename ='logfile.log')

warning('This is warning')
error('This is error')
critical('This is critical')

output
------
logfile file open cheai


EX:
from logging import *

basicConfig(filename ='logfile.log',level = DEBUG)
debug('This is Debug')
info('This is Info')
warning('This is warning')
error('This is error')
critical('This is critical')

output
-----
logfile file open cheai

EX:
from logging import *

basicConfig(filename ='logfile.log',level = DEBUG,filemode = 'w')
debug('This is Debug')
info('This is Info')
warning('This is warning')
error('This is error')
critical('This is critical')

output
-----
logfile file open cheai


EX:
from logging import *

basicConfig(filename ='logfile.log',level = DEBUG,filemode = 'w')
debug('This is Debug in w mode')
info('This is Info')
warning('This is warning')
error('This is error')
critical('This is critical')

output
-----

logfile file open cheai

EX:
from logging import *

basicConfig(filename ='logfile.log',level = DEBUG,filemode = 'w',format = '%(asctime)s -- %(message)s')
debug('This is Debug in w mode')
info('This is Info')
warning('This is warning')
error('This is error')
critical('This is critical')

output
-----
logfile file open cheai


EX:
from logging import *
LOG_FORMAT = '%(asctime)s// %(message)s // %(lineno)d'

basicConfig(filename ='logfile.log',level = DEBUG,filemode = 'w',format = LOG_FORMAT)
debug('This is Debug in w mode')
info('This is Info')
warning('This is warning')
error('This is error')
critical('This is critical')

output
------
logfile file open cheai

EX:
from logging import *
LOG_FORMAT = '{asctime}// {message} // {lineno}'

basicConfig(filename ='logfile.log',level = DEBUG,filemode = 'w',format = LOG_FORMAT,style = '{')
debug('This is Debug in w mode')
info('This is Info')
warning('This is warning')
error('This is error')
critical('This is critical')


ouput
-----
logfile file open cheai


EX:

from logging import *
LOG_FORMAT = '{lineno} ***{name}*** {asctime} *** {message}'

basicConfig(filename ='logfile.log',level = DEBUG,filemode = 'w',format = LOG_FORMAT,style = '{')
debug('This is Debug in w mode')
info('This is Info')
warning('This is warning')
error('This is error')
critical('This is critical')


output
-----
logfile file open cheai


EX:
from logging import *
LOG_FORMAT = '{lineno} ***{name}*** {asctime} *** {message}'

basicConfig(filename ='logfile.log',level = DEBUG,filemode = 'w',format = LOG_FORMAT,style = '{')

logger = getLogger('Geek')

logger.debug('This is Debug')
logger.info('This is Info')
logger.warning('This is warning')
logger.error('This is error')
logger.critical('This is critical')

output
-----
logfile file open cheai





	










 