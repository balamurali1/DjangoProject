	Introduction to Python 
======================

	What is Python ?
	---------------

Python  is a clear and  powerful object-oriented programming language,comparable
to Perl,Ruby, or Java.

Python is a programming language that combines features of C and Java.

	History
	--------
Python was developed by "Guido Van Rossum" in that year 1990 at Stichting
Mathematisch Centrum in the Netherlands as Successor of a language called ABC.


	Features
	-------
.Easy to Learn
.High Level Language
.Interpreted Language
.Platform Independent
.Procedure and Object Oriented
.Huge Library
.Scalable

	Where to use Pyhon in Applications
	-----------------------------------
.Web Application -Django,Pyramid,Flask,Bottle

.Desktop GUI Application - Tkinter

.Console Based Application

.Games and 3D Applications

.Mobile Applications

.Scientific and Numeric

.Data Science

.Machine Learning - Scikit-learn and TensorFlow

.Artificial Inteligent Applications

.Auto mission Applications

.Data Analysis - Matplotlib,Numpy,Pandas,Seaborn

.Data Visulization 

.Business Application


How Python Work
===================
	Byte code
	--------- 
Byte code represents the fixed set of instruction created by
python developers representing all type of operations like arithmetic operations,
Comparison operation, memory related operation etc..

The size of each byte code instruction is 1byte or 8 bits.

we can find byte code instuctions in the .pyc file.


	python Compiler(vvvvIMP in interview)
	---------------
A Python Compiler converts the "program source code" into "byte code".

 Type of Python Compilers:-
		1 CPython
		2 Jpython/Jython
		3 PyPy
		4 RubyPython
		5 IronPython
		6 StacklessPython		
		7 Pythonxy
		8 AnacondaPython

EX:
	
	Source Code/Program
	(Geekyshows.py)    	
		|
		|
		|Compile using Python compiler
		|
		|	
		V
	   Byte Code
	   (Geekyshows.pyc)
		|
		|
		|Run Program using PVM(Python Virtual Machine)
		|
		|
		V
	Binary Code/Machine Code
		|
		|
		|
		|
		V
	    Computer	
		(output)

    Digram Explanation	(Interview Question)
     -----------------
.write Source Code/Program
.Compile the Program using  "Python Compiler"
.Compiler Converts the Python Program into byte Code
.Computer/Machine Can not understand Byte Code so we convert it into Machine Code using PVM
.'PVM uses an interpreter' which understands the byte code and  convert it into machine code
.Machine Code instuctions are then excuted by the processor and result are displayed.



Python Virtual Machine(PVM)
=======================
Python Virtual Machine (PVM) is a program which provides programming environment.'The
role of PVM is to convert the byte code instructions into machine code' so the  computer
can execute those machine code instructions and  display the output.

Interpreter converts the byte code into machine code and sends that machine code to
the computer processor for execution.


EX:
		Source Code/Program
	(Geekyshows.py)    	
		|
		|
		|Compile using Python compiler
		|
		|	
		V
	   Byte Code
	   (Geekyshows.pyc)
		|
		|
		|
		V
	   Interpreter
		(PVM)	
		|
		|
		V
	Binary Code/Machine Code
		|
		|
		|
		|
		V
	    Computer	
		(output)


Identifier in Python
=====================
An Identifier is a name having a few letters,numbers and special characters _(underscore).
It should always start with a non-numeric character.
It is used to identify a variable,function,symbolic constant,class etc.

	EX:
		X2
		P1
		Sigma
		matadd
		full_name

*******************
Python is case sensitive programming language.
	
	EX:
		d is not equal to D
		t is not equal to T
		rahul is not equal to Rahul
		rahul is not equal to RAHUL

********************



Constant in Python 
===================

A constant is an identifier whose value cannot be changed throughout the execution of
a program whereas the variable value keeps on changing.
There are no constants in Python, the way they exist in C and Java.
In Python It is not possible to define constant whose value can not be changed.
In Python,Constants are usually defined on a module level and  written in all capital
letter with underscores separating words but remember its value can be changed.
	
	EX:
		PI
		TOTAL
		MIN_VALUE


Variable in Python
====================

1. In "C,Java or some other programming languages, a 'variable' is an identifier or a name,
connected memory location".

Note C, java lo "memory address anedi variable ni base" chesukoni vasthundi...
----	

	EX: a = 10

		a--->Variable
		10-->value
		12114--->Memory address

	EX: b = 20
	
		b--->Variable
		20---->value
		12117--->Memory address

2. In Python,"a variable is considered as tag" that is tied to some value.
Python considers value as objects(object means variable ani).

Note: Python lo "memory address(location)" anedi "value ni base" chesukoni vasthundi...
-----

	EX:
		a = 10

		a--->tag
		10-->Value
		12114--->Memory address


	EX:

		50-->Value
		12115--->Memory Address
		
		Note: Since value 50 becomes 'unreferenced' object,it is removed by
			"garbage collector".

Rulues
-----
. Every variable name should start with alphabets or underscore(_).

. No spaces are allowed in variable declaration.

. Except underscore(_) no other special symbol are allowed in the  middle of the variable declaration

. A variable is written with a combination of letters,numbers and  special characters_(underscore)

. No Reserved keyword


Variable Names Examples
------------------
		
		DO 		Don't
		--		------
		
		A		and
		a		15name
		name		#city
		name15		Full$Name
		_city		Full Name
		Full_name
		FullName

EX:
>>>a = 10	
>>>a
10
>>>id(a)
140706393187248


Data Type in Python
====================
Datatype represents the type of data stored into a variable or memory

	Types of Data type:-
		. Built-in Data type
		. User Defined Data type


. Built-in Datatype
-----------------
These datatype are provided by python Language.
Following are the built-in data type:-

	. None Type
	. Numeric Types/Number
	. Sequences
	. Sets
	. MappingsType/dict/Dictionary


.None Type
----------
None datatype represents an object that doesn't contain any value.


. Numeric Types/Number
---------------------
	Following are the Numeric Data type:-
		1. Int
		2. Float
		3. Complex
	
	1.Int
	----
		The int datatype represents an integer number.An integer number without
any decimal point or fraction part.In Python,It is possible to store very large integer
number as there is no limit for the size of an int datatype.

	EX:20,10,-50,-1002

	y = 10 (note: y 'int type variable',10 is int 'value')
	
	pin_code = 564512 (note:pin_code is 'int type variable',564512 is 'int value')

	
	2.Float
	--------
		The float data type represents floating point numbers. A floating point
number is a number that contains a 'decimal point'.
	
	EX: 25.56,10.5,-45.69,-0.8

	price = 25.56

	run_rate = -0.8 (EX:run_rate is the 'float type variable', -0.8 is 'float value')


	value = 5.1e5(EX: 5.1e5 its's scientific notation, where  e or E represents exponentiation
			   which represents the power of 10)

	((	5
	 5.1 x 10))) ela rastharu final ga...


	
	3.Complex 
	----------
		A Complex number is a number that is written in the form of a+bj or a+bJ.
			
			Where:-
				a = Real Part of the number
				b = Imaginary part of the number
				j or J = Square root value of -1
				a and b many contain integer ot float number
		
			Ex: 5+7j,0.8+2j
			
			com = 5+7j(Ex: com is the complex number,5+7j is the complex type variable)

Bool type
=========
 The bool datatype represents boolean value True or False.Python 'internally' represents
 True as 1 and False as 0.

 	EX: True, False

	True + True = 2
	True - False = 1


Sequence Type
===============
	Following are sequence type:-

		1.String	
		2.List
		3.Tuple
		4.Range


1.String
--------
	String represents group of character. Strings are enclosed in "double quotes" or
"single quotes".

	EX: "Hello","GeekyShows",'Rahul'


	str1 = "GeekyShows"(EX:str1 is the 'String type variable', "GeekyShows" is the 'String')
	str1 = 'GeekyShows'		

2.List
------
	A list represents a group of elements. A list can store 'different types of elements '
	which can be modified. List are dynamic which means size is not fixed.Lists are
	represented using "square bracket[]".
		EX: data = [10,20,-50,21.3,'Geekyshows']


3.Tuple
--------
	A tuple contains a group of elements which can be store "different types of elements". It is similar
to List but "Tuples are read-only which means we can not modify it's element".Tuples are 
represented using "parentheses()".

	EX: data = (10,20,-50,21.3, 'Geekyshows')


4.Range
--------
	Range represents a sequence of numbers. The numbers in the range are 'not modifiable'.

	EX: rg = range(5)   #0 1 2 3 4

	    rg = range(10,20,2)  # 10 12 14 16 18

5. Set Type
==============
. A set is an unordered collection of elements much like a set in mathematics.

. "The order of elements is not maintained in the sets". It means the elements may not
appear in the same order as they are entered into the set.
	
. A set does not accept duplicate elements.

. Sets are Unordered, so we can not access its elements using index.

. Sets are represented using "curly brackets {}".

	EX: data = {10,20,30,"GeekyShows", "Raj",40}

	    data = {10,20,30,"GeekyShows", "Raj", 40,10,20} #duplicates not allowed..


6.Mapping Type/dict/Dictionary
=============================
 A map represents a group of elements in the from of key value pairs(జంటలు).
  	EX:
		data = {101:'Rahul',102:'Raj',103:'Sonam'}
	
		data = {'rahul':2000,'raj':3000, 'sonam':8000,}

	
. User Defined DataType
-------------------------
. Array
. Class
. Module


Arithmetic Operators in Python
=============================

	An Operator is a symbol that performs an operation
		
		. Arithmetic Operators
		. Relational Operators/Comparison Operators
		. Logical Operators
		. Assignment Operators
		. Bitwise Operators
		. Membership Operators
		. Identity Operators


. Arithmetic Operators
-------------------------
 Arithmetic Operators are used to perform basic arithmetic operations like addition ,
subtraction,division etc..

 Operators	 Meaning 			Example		Result
----------	---------			-------		-------

+		Addition			4+2		6

-		Subtraction			4-2		2

*		Multiplication			4*2		8

/		Division			4/2		2

%		Modulus operators to get	5%2		1 --->Dini ki matramu shesham display auvthundi.
		'remainder' in integer division	
						      2				
**		Exponent			5**2=5		25

//		Integer Division/Floor Division  5//2		2   
						 -5//2		-3

	Note:   5//2
	-----
		2) 5(2.5  #ikkada 2.5 ani python chupinchadu only point(.) left side unnadi chupisthundi.	
		   4
		  -----
		   10
		   10
		  -----
		   0
		  -----	 

 Relational Operators/Comparison Operators
=======================================
	Relational Operators are used to compare the value of operands (expressions) to
produce a logical value. A logical value is either True or False.


Operators		Meaning			Example		Result
--------		-------			-------		------

<			Less than		 5<2		False

>			Greater than		 5>2		True

<=			Less than or equal to	 5<=2		False

>=			Grater than or equal to	  5>=2		True

==			Equal to		   5==2		False

!=			Not equal to		   5!=2		True (# 5 anedi 2 ku samanam ledu kabbati True vasthundi)
						   5!=5		False(# 5 anedi 5 ki samanamu undadu False vasthundi) 

	
Logical Operators in Python
==========================
Logical operators are used to connect more relational operations to form a complex expression
called logical expression. A value obtained by evaluating a logical expression is always logical,
i.e either True or False.

Operator	Meaning			Example 		Result
------		-------			--------		-------

and 		logical and		(5<2) and (5>3)		False
or		Logical or		(5<2) or  (5>3)		True
not		Logical not		 not(5<2)		True


	and
	----

Operand1		Operand2		Result
--------		--------		-------
True			True			True
True			False			False
False			True			False
False			False			False
True			Expression		Expression
False			Expression		False

Note: Expression is nothing but give any value

	EX: True and 100 =>100
	    
	    False and 102==> False



	or
	----

Operand1		Operand2		Result
--------		---------		-------
True			True			True
True			False			True
False			True			True
False			False			False
True			Expression		True
False			Expression		Expression



	not
	-----
Operand 		Result
-------			-------
False			True
True			False

EX:
	a = 5
	b = 2

	print(not(a<b))

output
----
	True

EX:
	a = 5
	b = 2
	print(not(a>b))

output
----
	False


Assignment Operators in Python
===============================
Assignment operators are used to perform arithmetic operations while assigning 
a value to a variable.

Operator	Example		Equivalent Expression(m = 15)		Result
--------	-------		-----------------------------		------
=		y = a+b			y = 10+20			30

+=		m+=10			m = m+10			25

-=		m-=10			m = m-10			5

*=		m*=10			m = m*10			150

/=		m /=10			m = m/10			1

%=		m%=10			m = m%10			5

						 (    2 
**=		m**=2			m=m**2 or( m=m )		225

//=		m//=10			m=m//10				1



Bitwise Operator in Python
=========================


NOt a Importent....


Membership Operators in Python
===============================
The membership operators are useful to test for membership in a sequence
such as string,lists,tuple and dictionaries.

There are  two type of Membership operator:-

	1.in
	2.not in

in
--
This operators is used to find an element in the specified sequence.
It return True if element is found in the specified sequence else it return False.

EX:
st1 = 'Welcome to geekyshows"
print("to" in st1)

output
-----
True


EX:
st2 = 'Welcome top geekyshows"
print("to" in st2)

output
-----
True

EX:
s3 ='Welcome to geekyshows"
print("subs" in st3)

output
-----
False


not in
-------
This operators works in revers manner for in operator

It returns True if elements is not found in the specified sequence and if element is found,
then it returns False.

EX:
s3 ='Welcome to geekyshows"
print("subs" not in st3)

output
-----
True


EX:
st1 = 'Welcome to geekyshows"
print("to" not in st1)

output
-----
False


EX:
st2 = 'Welcome top geekyshows"
print("to" not in st2)

output
-----
False



Identity Operators in Python
=============================

is
----
This operator is used to compare whether two objects are same or not.
it returns True if memory location of two objcets are same else it returns False.

EX:
a = 10
b = 10

print(a is b)

output
------
True

Ex:
a = 10
b = '10'

print(a is b) 

output
------
False


isnot
--------
This operator works in reverse mannar for 'is' operators
It return True if memory location of two objects are not same and if they are same it
return False.

Ex:
a = 10
b = 10

print(a is not b)

output
------
False

EX:
a = 10
b = '10'

print(a is not b)

output
------
True





Operator Precedence and Associativity in Python 
============================================

	Video -25

	(BOARD Maths Process)






Implicit and Explicit Type Conversion in Python
=======================================
 	Converting one data type into another data type is called Type Conversion.

type of Type Conversion:-
	1. Implicit Type Conversion
	2. Explicit Type Conversion


1. Implicit Type Conversion
-------------------------
	In the Implicit type conversion, python automatically converts one data
type into another data type.

	EX:
		a = 5-->integer
		b = 2---->integer
		value = a/b
		print(value)
		print(type(value))

output
-----
2.5-->look here float.
<class 'float'>


EX:

a = 10 #integer
b = 5.5 #Float
value = a/b
print(value)
print(type(value))

output
-------
1.8181818181818181
<class 'float'>

EX:
a = "Hello"
b = "Geekyshows"
value = a + b
print(value)
print(type(value))

output
------
HelloGeekyshows
<class 'str'>

EX:
a = 20
b = "10"
value = a + b
print(value)
print(type(value))

output
-------
TypeError: unsupported operand type(s) for +: 'int' and 'str'

EX:
a = 20
b = "Geekyshows"
value = a + b
print(value)
print(type(value))

output
------
unsupported operand type(s) for +: 'int' and 'str'


Explicit Type Conversion
------------------------
in the Cast/Explicit Type Conversion,Programmer Converts one data type into another
data type.

	1 int(n)
	2 float(n)
	3 complex(n)
	4 complex(x,y) where x is real part and y is imaginary part
	5 str(n)
	6 list(n)
	7 tuple(n)
	8 bin(n)
	9 oct(n)
	10 hex(n)

EX:
a = 5
b = 2
value = a/b
print(type(value))
int_value = int(value)
print(type(int_value))
print(int_value)

output
------
<class 'float'>
<class 'int'>
2


EX:
	 	
a = 5
b = '2'
print(type(b))
value = a + int(b)
print(value)

output
-----
<class 'str'>
7

EX:

#Float to Integer

n = 10.36
vn = int(n)
print(vn)
print(type(vn))


output
------
10
<class 'int'>

EX:
# Integer to Float

n = 10
vn = float(n)
print(vn)
print(type(vn))

output
-----
10.0
<class 'float'>

EX:
# Integer to complex

n = 10
vn = complex(n)
print(vn)
print(type(vn))

output
-----
(10+0j)
<class 'complex'>

EX:
# Integer to string

n = 10
vn = str(n)
print(vn)
print(type(vn))

ouptut
-----
10
<class 'str'>

EX:
# string to tuple 

n = "Geekyshows"
vn = tuple(n)
print(vn)
print(type(vn))

output
-----
('G', 'e', 'e', 'k', 'y', 's', 'h', 'o', 'w', 's')
<class 'tuple'>

EX:
# string to List

n = "Geekyshows"
vn = list(n)
print(vn)
print(type(vn))

output
------
['G', 'e', 'e', 'k', 'y', 's', 'h', 'o', 'w', 's']
<class 'list'>

EX:
# Tuple to List

n = ("Rahul","Rani","Rakesh","Preet")
vn = list(n)
print(vn)
print(type(vn))

output
------
['Rahul', 'Rani', 'Rakesh', 'Preet']
<class 'list'

EX:
# List to Tuple

n = ["Rahul","Rani","Rakesh","Preet"]
vn = tuple(n)
print(vn)
print(type(vn))

output
------
('Rahul', 'Rani', 'Rakesh', 'Preet')
<class 'tuple'>

EX:
# integer to binary

a = 10
result = bin(a)
print(result)

ouput
-----
0b1010 (Note: binary lo '0b' tharuvatha unna values ni matrame thisuko..)


EX:
# integer to binary

a = 15
result = bin(a)

print(result)

output
------
0b1111  (Note: binary lo '0b' tharuvatha unna values ni matrame thisuko..)


Output Statement or Print Function in Python 
===========================================

Input -The data given to the computer is called input.

Output - The results returned by the computer are called output.


Output Statements
------------------

	print() Function :- The print()function is used to print the specified message to the output
	----------------
	Screen/device. The message can be string, or any other object.

		syntax: 
			print(objects,sep='character',end='character',file=sys.stdout,flush=False)

		Here:
			sep -Separate the objects by given character.Character can be any string.Default is' '
				or can write none.
			end -It indicates ending character for the line.Default is '\n' or can write none.
			file - An object with a write method.Default is sys. stdout or can write none.
			flush - An Boolean,specifying if the output is flushed(True) or buffered(False).Default is False

	print() -This function is used to display a "blank line".

	print("string") -When a string is passed to the function,the string is displayed as it is.
			
		EX:
			print("Hello")
			print(10)
			print(10.5)
			
			output
			------ 
				Hello
				10
				10.5		

	pritn(object)-We can pass objetcs like list,tuples and dictionary to display the elements of those objects.
		
			EX:
				data = [10,20,-50,21.3,'Geekyshows']  #Observe here 'data' is object ok...
				print(data)
			output
			-----
				[10,20,-50,21.3,'Geekyshows']

	print("string",sep='')- It separates string with given sep character. Character can be any string.
				Default is ' ' or can write none.

			EX:
				print("Like", "share", "Subcribe", sep=' ')
			
			output
			------
				Like share Subcribe

			EX:
				print("Like", "share", "Subcribe", sep='***')

			output
			------
				Like***share***Subcribe	
	
	print("string" end='') -when ending character is passed it prints given character at the end 
				Default is '\n' or can write none.

			EX:
				print("welcome", end='\n')
				print("to", end='\n')
				print("Geekyshows", end='\n')

			outptu
			-------
				welcome
				to
				Geekyshows

			EX:
				print("welcome", end='')
				print("to", end='')
				print("Geekyshows", end='')

			output
			-----
				welcometoGeekyshows

			EX:
				print("welcome", end=' ')
				print("to", end=' ')
				print("Geekyshows", end=' ')

			output
			------
				welcome to Geekyshows
	
			EX:
					
				print("welcome", end='\t')  (#\t ante tab ani artham)
				print("to", end='\t')
				print("Geekyshows", end='\t')	

			output
			------
				welcome to	Geekyshows					
					
		print(variable list) - This is used to display the value of a variable or a list of 
					variable.	
		
			EX:
				a = 10
				print(a)
				
			output
			-------
				 10
			
			EX:
				x = 20
				y = 30
				pritn(x,y)
				
			output
			------
				20 30
			EX:
				x = 5
				y = 2
				print(x,y,sep=',')
			output
			------
				5,2

	print("String", variable list)- This is used to display the string along with variable.	

			Ex:
				m = 40
				print("Value":,m)
	
			output
			------
				Value:40

			EX:
				name = "Rahul"
				age = 62
				print("My Name is ",name, "and My age is",age)
		
			output
			------
				My Name is Rahul and My age is 62


Getting input from user or Input Statement or input Function in Python
==============================================================

Input Statement
-----------------
input() -This function is used to accept input from keyboard.

This function will stop the program flow untill the user gives an input and end the input with the
return key.

Whatever user gives as input,input function convert it into a string.if user enters an integer value
still input() function convert it into string.

So if you need an integer you have to use type conversion.

By default input() function convert to "string"

	syntax:
		input([prompt])
	
	prompt--> prompt is a "string or message",representing a default message before input."It is optional"


	EX:
		name = input()
		name = input("Your Name:")
		mobile = input("Enter Your Mobile Number:")

Whatever user gives  as input,input function convert it into a string.If user enters an integer value
still input() function convert it into a string.

So if you "need an integer" you have to use type conversion(convert)

	EX:
		mobile = input("Enter Your Mobile Number:")
		mb = int(mobile)

	EX:	
		mobile = int(input("Enter Your Mobile Number:"))

		price = float(input("Total Price:"))
		
		mobile = complex(input("Enter complex Number:"))



Escape Sequence in Python
============================
Escape Sequence are control character used to move the cursor
and print characters such as ', ".\and so on.


	Escape Sequence			Meaning
	----------------		--------
		\a			Bell
		
		\b			Backspace
	
		\f			Formfeed

		\n			NewLine

		\r			Carring Return

		\t			Horizontal Tab

		\v			Vertical tab

		\newline		Backslash and NewLine lgnored.

		\\			Backslash

		\'			Single Quote

		\"			Double Quote



EX:
	print("Welcome to \nGeekyshows")

output
-----
	Welcome to
	Geekyshows

EX:
	print("Welcome to \tGeekyshows")		
	

output
------

	Welcome to     Geekyshows	
	
EX:

	print("Welcome to \"Geekyshows\" ")

output
------	
	Welcome to  "Geekyshows"

EX:

	print("Welcome to 'Geekyshows' ")

output
------	
	Welcome to  'Geekyshows'	
	

EX:

	print('Welcome to \'Geekyshows\' ')

output
------	
	Welcome to  'Geekyshows'
				

EX:
	 print("Welcome to \bGeekyshows")

output
-----
	Welcome toGeekyshows	

	
EX:

	print("\fWelcome to \fGeekyshows")
output
------
	♀Welcome to ♀Geekyshows(\f pedithey ♀ ee symbol vasthundi)


	
EX:

	>>> print("Welcome to \rGeekyshows")
output
-----
Geekyshows

	>>> print("\rWelcome to Geekyshows")
output
-----
Welcome to Geekyshows

	>>> print("\rWelcome to \rGeekyshows")
output
-----
Geekyshows


EX:

	>>> print("Welcome to \vGeekyshows")
output
-----
Welcome to ♂Geekyshows
		

EX:
		
	>>> print("Welcome to \newlineGeekyshows")
output
-----
Welcome to
ewlineGeekyshows


EX:
	>>> print("Welcome to \\Geekyshows")
output
------
Welcome to \Geekyshows


=====================END====================
												




